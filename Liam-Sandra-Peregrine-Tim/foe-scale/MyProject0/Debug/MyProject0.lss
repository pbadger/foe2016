
MyProject0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003194  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000020  20000000  00003194  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000668  20000020  000031c0  00010020  2**4
                  ALLOC
  3 .stack        00002000  20000688  00003828  00010020  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010020  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010048  2**0
                  CONTENTS, READONLY
  6 .debug_info   00036324  00000000  00000000  000100a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000476e  00000000  00000000  000463c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00013436  00000000  00000000  0004ab35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001038  00000000  00000000  0005df6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001530  00000000  00000000  0005efa3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00007115  00000000  00000000  000604d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001203e  00000000  00000000  000675e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00077bbe  00000000  00000000  00079626  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002b58  00000000  00000000  000f11e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002688 	.word	0x20002688
       4:	00000615 	.word	0x00000615
       8:	00000611 	.word	0x00000611
       c:	00000611 	.word	0x00000611
	...
      2c:	00000611 	.word	0x00000611
	...
      38:	00000611 	.word	0x00000611
      3c:	00000611 	.word	0x00000611
      40:	00000549 	.word	0x00000549
      44:	00000529 	.word	0x00000529
      48:	000004e9 	.word	0x000004e9
      4c:	00000611 	.word	0x00000611
      50:	00000489 	.word	0x00000489
      54:	00000611 	.word	0x00000611
      58:	00000509 	.word	0x00000509
      5c:	00000569 	.word	0x00000569
      60:	00000611 	.word	0x00000611
      64:	00000429 	.word	0x00000429
      68:	00000449 	.word	0x00000449
      6c:	00000611 	.word	0x00000611
      70:	00000611 	.word	0x00000611
	...
      7c:	00000611 	.word	0x00000611
      80:	00000611 	.word	0x00000611
      84:	00000611 	.word	0x00000611
      88:	00000469 	.word	0x00000469
      8c:	00000611 	.word	0x00000611
      90:	00000611 	.word	0x00000611
	...
      9c:	00000611 	.word	0x00000611
      a0:	000004a9 	.word	0x000004a9
      a4:	000004c9 	.word	0x000004c9
      a8:	00000611 	.word	0x00000611
      ac:	00000611 	.word	0x00000611
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000020 	.word	0x20000020
      d4:	00000000 	.word	0x00000000
      d8:	00003194 	.word	0x00003194

000000dc <frame_dummy>:
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd08      	pop	{r3, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	00003194 	.word	0x00003194
     108:	20000024 	.word	0x20000024
     10c:	00003194 	.word	0x00003194
     110:	00000000 	.word	0x00000000

00000114 <SPI_0_PORT_init>:
struct dac_sync_descriptor DAC_0;

struct wdt_descriptor WDT_0;

void SPI_0_PORT_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin,
		const enum gpio_direction direction)
{
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(
     116:	2000      	movs	r0, #0
     118:	2110      	movs	r1, #16
     11a:	2202      	movs	r2, #2
     11c:	4d11      	ldr	r5, [pc, #68]	; (164 <SPI_0_PORT_init+0x50>)
     11e:	47a8      	blx	r5
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     120:	2000      	movs	r0, #0
     122:	2110      	movs	r1, #16
     124:	2200      	movs	r2, #0
     126:	4e10      	ldr	r6, [pc, #64]	; (168 <SPI_0_PORT_init+0x54>)
     128:	47b0      	blx	r6
 *                      found in the header files for the device
 *                                            
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
	_gpio_set_pin_function(pin, function);
     12a:	2004      	movs	r0, #4
     12c:	490f      	ldr	r1, [pc, #60]	; (16c <SPI_0_PORT_init+0x58>)
     12e:	4c10      	ldr	r4, [pc, #64]	; (170 <SPI_0_PORT_init+0x5c>)
     130:	47a0      	blx	r4
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin,
		const enum gpio_direction direction)
{
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(
     132:	2000      	movs	r0, #0
     134:	2120      	movs	r1, #32
     136:	2202      	movs	r2, #2
     138:	47a8      	blx	r5
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     13a:	2000      	movs	r0, #0
     13c:	2120      	movs	r1, #32
     13e:	2200      	movs	r2, #0
     140:	47b0      	blx	r6
 *                      found in the header files for the device
 *                                            
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
	_gpio_set_pin_function(pin, function);
     142:	2005      	movs	r0, #5
     144:	490b      	ldr	r1, [pc, #44]	; (174 <SPI_0_PORT_init+0x60>)
     146:	47a0      	blx	r4
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin,
		const enum gpio_direction direction)
{
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(
     148:	2000      	movs	r0, #0
     14a:	2140      	movs	r1, #64	; 0x40
     14c:	2201      	movs	r2, #1
     14e:	47a8      	blx	r5
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin,
		const enum gpio_pull_mode pull_mode)
{
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     150:	2000      	movs	r0, #0
     152:	2106      	movs	r1, #6
     154:	2200      	movs	r2, #0
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <SPI_0_PORT_init+0x64>)
     158:	4798      	blx	r3
 *                      found in the header files for the device
 *                                            
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
	_gpio_set_pin_function(pin, function);
     15a:	2006      	movs	r0, #6
     15c:	4907      	ldr	r1, [pc, #28]	; (17c <SPI_0_PORT_init+0x68>)
     15e:	47a0      	blx	r4
	        // <GPIO_PULL_UP"> Pull-up
	        // <GPIO_PULL_DOWN"> Pull-down
			GPIO_PULL_OFF);

	gpio_set_pin_function(PA06, PINMUX_PA06D_SERCOM0_PAD2);
}
     160:	bd70      	pop	{r4, r5, r6, pc}
     162:	46c0      	nop			; (mov r8, r8)
     164:	000010e5 	.word	0x000010e5
     168:	00001189 	.word	0x00001189
     16c:	00040003 	.word	0x00040003
     170:	0000122d 	.word	0x0000122d
     174:	00050003 	.word	0x00050003
     178:	000011ad 	.word	0x000011ad
     17c:	00060003 	.word	0x00060003

00000180 <SPI_0_CLOCK_init>:
void SPI_0_CLOCK_init(void)
{
     180:	b508      	push	{r3, lr}
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM0);
     182:	2003      	movs	r0, #3
     184:	4904      	ldr	r1, [pc, #16]	; (198 <SPI_0_CLOCK_init+0x18>)
     186:	4b05      	ldr	r3, [pc, #20]	; (19c <SPI_0_CLOCK_init+0x1c>)
     188:	4798      	blx	r3
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data) 
{
        GCLK_CRITICAL_SECTION_ENTER();
        ((Gclk *)hw)->CLKCTRL.reg = data;
     18a:	4b05      	ldr	r3, [pc, #20]	; (1a0 <SPI_0_CLOCK_init+0x20>)
     18c:	4a05      	ldr	r2, [pc, #20]	; (1a4 <SPI_0_CLOCK_init+0x24>)
     18e:	805a      	strh	r2, [r3, #2]
     190:	4a05      	ldr	r2, [pc, #20]	; (1a8 <SPI_0_CLOCK_init+0x28>)
     192:	805a      	strh	r2, [r3, #2]
	_gclk_enable_channel(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
	_gclk_enable_channel(SERCOM0_GCLK_ID_SLOW, CONF_GCLK_SERCOM0_SLOW_SRC);
}
     194:	bd08      	pop	{r3, pc}
     196:	46c0      	nop			; (mov r8, r8)
     198:	42000800 	.word	0x42000800
     19c:	00001039 	.word	0x00001039
     1a0:	40000c00 	.word	0x40000c00
     1a4:	00004014 	.word	0x00004014
     1a8:	00004313 	.word	0x00004313

000001ac <SPI_0_init>:
void SPI_0_init(void)
{
     1ac:	b508      	push	{r3, lr}
	SPI_0_CLOCK_init();
     1ae:	4b04      	ldr	r3, [pc, #16]	; (1c0 <SPI_0_init+0x14>)
     1b0:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SERCOM0);
     1b2:	4804      	ldr	r0, [pc, #16]	; (1c4 <SPI_0_init+0x18>)
     1b4:	4904      	ldr	r1, [pc, #16]	; (1c8 <SPI_0_init+0x1c>)
     1b6:	4b05      	ldr	r3, [pc, #20]	; (1cc <SPI_0_init+0x20>)
     1b8:	4798      	blx	r3
	SPI_0_PORT_init();
     1ba:	4b05      	ldr	r3, [pc, #20]	; (1d0 <SPI_0_init+0x24>)
     1bc:	4798      	blx	r3
}
     1be:	bd08      	pop	{r3, pc}
     1c0:	00000181 	.word	0x00000181
     1c4:	200005c0 	.word	0x200005c0
     1c8:	42000800 	.word	0x42000800
     1cc:	000026fd 	.word	0x000026fd
     1d0:	00000115 	.word	0x00000115

000001d4 <USART_0_PORT_init>:

void USART_0_PORT_init(void)
{
     1d4:	b510      	push	{r4, lr}
     1d6:	2000      	movs	r0, #0
     1d8:	2103      	movs	r1, #3
     1da:	4c03      	ldr	r4, [pc, #12]	; (1e8 <USART_0_PORT_init+0x14>)
     1dc:	47a0      	blx	r4
     1de:	2001      	movs	r0, #1
     1e0:	4902      	ldr	r1, [pc, #8]	; (1ec <USART_0_PORT_init+0x18>)
     1e2:	47a0      	blx	r4
	gpio_set_pin_function(PA00, PINMUX_PA00D_SERCOM1_PAD0);

	gpio_set_pin_function(PA01, PINMUX_PA01D_SERCOM1_PAD1);
}
     1e4:	bd10      	pop	{r4, pc}
     1e6:	46c0      	nop			; (mov r8, r8)
     1e8:	0000122d 	.word	0x0000122d
     1ec:	00010003 	.word	0x00010003

000001f0 <USART_0_CLOCK_init>:

void USART_0_CLOCK_init(void)
{
     1f0:	b508      	push	{r3, lr}
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM1);
     1f2:	2003      	movs	r0, #3
     1f4:	4904      	ldr	r1, [pc, #16]	; (208 <USART_0_CLOCK_init+0x18>)
     1f6:	4b05      	ldr	r3, [pc, #20]	; (20c <USART_0_CLOCK_init+0x1c>)
     1f8:	4798      	blx	r3
     1fa:	4b05      	ldr	r3, [pc, #20]	; (210 <USART_0_CLOCK_init+0x20>)
     1fc:	4a05      	ldr	r2, [pc, #20]	; (214 <USART_0_CLOCK_init+0x24>)
     1fe:	805a      	strh	r2, [r3, #2]
     200:	4a05      	ldr	r2, [pc, #20]	; (218 <USART_0_CLOCK_init+0x28>)
     202:	805a      	strh	r2, [r3, #2]
	_gclk_enable_channel(SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC);
	_gclk_enable_channel(SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC);
}
     204:	bd08      	pop	{r3, pc}
     206:	46c0      	nop			; (mov r8, r8)
     208:	42000c00 	.word	0x42000c00
     20c:	00001039 	.word	0x00001039
     210:	40000c00 	.word	0x40000c00
     214:	00004015 	.word	0x00004015
     218:	00004313 	.word	0x00004313

0000021c <USART_0_init>:

void USART_0_init(void)
{
     21c:	b508      	push	{r3, lr}
	USART_0_CLOCK_init();
     21e:	4b04      	ldr	r3, [pc, #16]	; (230 <USART_0_init+0x14>)
     220:	4798      	blx	r3
	usart_sync_init(&USART_0, SERCOM1);
     222:	4804      	ldr	r0, [pc, #16]	; (234 <USART_0_init+0x18>)
     224:	4904      	ldr	r1, [pc, #16]	; (238 <USART_0_init+0x1c>)
     226:	4b05      	ldr	r3, [pc, #20]	; (23c <USART_0_init+0x20>)
     228:	4798      	blx	r3
	USART_0_PORT_init();
     22a:	4b05      	ldr	r3, [pc, #20]	; (240 <USART_0_init+0x24>)
     22c:	4798      	blx	r3
}
     22e:	bd08      	pop	{r3, pc}
     230:	000001f1 	.word	0x000001f1
     234:	200005d4 	.word	0x200005d4
     238:	42000c00 	.word	0x42000c00
     23c:	00002a19 	.word	0x00002a19
     240:	000001d5 	.word	0x000001d5

00000244 <EXTERNAL_IRQ_0_init>:
	_gclk_enable_channel(TC3_GCLK_ID, CONF_GCLK_TC3_SRC);
	timer_init(&TIMER_0, TC3, _tc_get_timer());
}

void EXTERNAL_IRQ_0_init(void)
{
     244:	b508      	push	{r3, lr}
     246:	4a03      	ldr	r2, [pc, #12]	; (254 <EXTERNAL_IRQ_0_init+0x10>)
     248:	4b03      	ldr	r3, [pc, #12]	; (258 <EXTERNAL_IRQ_0_init+0x14>)
     24a:	805a      	strh	r2, [r3, #2]
	_gclk_enable_channel(EIC_GCLK_ID, CONF_GCLK_EIC_SRC);
	ext_irq_init();
     24c:	4b03      	ldr	r3, [pc, #12]	; (25c <EXTERNAL_IRQ_0_init+0x18>)
     24e:	4798      	blx	r3
}
     250:	bd08      	pop	{r3, pc}
     252:	46c0      	nop			; (mov r8, r8)
     254:	00004005 	.word	0x00004005
     258:	40000c00 	.word	0x40000c00
     25c:	00002655 	.word	0x00002655

00000260 <AC_0_CLOCK_init>:
void AC_0_PORT_init(void)
{
}

void AC_0_CLOCK_init(void)
{
     260:	b508      	push	{r3, lr}
	_pm_enable_bus_clock(PM_BUS_APBC, AC);
     262:	2003      	movs	r0, #3
     264:	4904      	ldr	r1, [pc, #16]	; (278 <AC_0_CLOCK_init+0x18>)
     266:	4b05      	ldr	r3, [pc, #20]	; (27c <AC_0_CLOCK_init+0x1c>)
     268:	4798      	blx	r3
     26a:	4b05      	ldr	r3, [pc, #20]	; (280 <AC_0_CLOCK_init+0x20>)
     26c:	4a05      	ldr	r2, [pc, #20]	; (284 <AC_0_CLOCK_init+0x24>)
     26e:	805a      	strh	r2, [r3, #2]
     270:	4a05      	ldr	r2, [pc, #20]	; (288 <AC_0_CLOCK_init+0x28>)
     272:	805a      	strh	r2, [r3, #2]
	_gclk_enable_channel(AC_GCLK_ID_DIG, CONF_GCLK_DIG_AC_SRC);
	_gclk_enable_channel(AC_GCLK_ID_ANA, CONF_GCLK_ANA_AC_SRC);
}
     274:	bd08      	pop	{r3, pc}
     276:	46c0      	nop			; (mov r8, r8)
     278:	42004400 	.word	0x42004400
     27c:	00001039 	.word	0x00001039
     280:	40000c00 	.word	0x40000c00
     284:	0000401f 	.word	0x0000401f
     288:	00004020 	.word	0x00004020

0000028c <AC_0_init>:

void AC_0_init(void)
{
     28c:	b508      	push	{r3, lr}
	AC_0_CLOCK_init();
     28e:	4b03      	ldr	r3, [pc, #12]	; (29c <AC_0_init+0x10>)
     290:	4798      	blx	r3
	ac_sync_init(&AC_0, AC);
     292:	4803      	ldr	r0, [pc, #12]	; (2a0 <AC_0_init+0x14>)
     294:	4903      	ldr	r1, [pc, #12]	; (2a4 <AC_0_init+0x18>)
     296:	4b04      	ldr	r3, [pc, #16]	; (2a8 <AC_0_init+0x1c>)
     298:	4798      	blx	r3
	AC_0_PORT_init();
}
     29a:	bd08      	pop	{r3, pc}
     29c:	00000261 	.word	0x00000261
     2a0:	20000590 	.word	0x20000590
     2a4:	42004400 	.word	0x42004400
     2a8:	00002585 	.word	0x00002585

000002ac <DAC_0_CLOCK_init>:
void DAC_0_PORT_init(void)
{
}

void DAC_0_CLOCK_init(void)
{
     2ac:	b508      	push	{r3, lr}
	_pm_enable_bus_clock(PM_BUS_APBC, DAC);
     2ae:	2003      	movs	r0, #3
     2b0:	4903      	ldr	r1, [pc, #12]	; (2c0 <DAC_0_CLOCK_init+0x14>)
     2b2:	4b04      	ldr	r3, [pc, #16]	; (2c4 <DAC_0_CLOCK_init+0x18>)
     2b4:	4798      	blx	r3
     2b6:	4a04      	ldr	r2, [pc, #16]	; (2c8 <DAC_0_CLOCK_init+0x1c>)
     2b8:	4b04      	ldr	r3, [pc, #16]	; (2cc <DAC_0_CLOCK_init+0x20>)
     2ba:	805a      	strh	r2, [r3, #2]
	_gclk_enable_channel(DAC_GCLK_ID, CONF_GCLK_DAC_SRC);
}
     2bc:	bd08      	pop	{r3, pc}
     2be:	46c0      	nop			; (mov r8, r8)
     2c0:	42004800 	.word	0x42004800
     2c4:	00001039 	.word	0x00001039
     2c8:	00004021 	.word	0x00004021
     2cc:	40000c00 	.word	0x40000c00

000002d0 <DAC_0_init>:

void DAC_0_init(void)
{
     2d0:	b508      	push	{r3, lr}
	DAC_0_CLOCK_init();
     2d2:	4b03      	ldr	r3, [pc, #12]	; (2e0 <DAC_0_init+0x10>)
     2d4:	4798      	blx	r3
	dac_sync_init(&DAC_0, DAC);
     2d6:	4803      	ldr	r0, [pc, #12]	; (2e4 <DAC_0_init+0x14>)
     2d8:	4903      	ldr	r1, [pc, #12]	; (2e8 <DAC_0_init+0x18>)
     2da:	4b04      	ldr	r3, [pc, #16]	; (2ec <DAC_0_init+0x1c>)
     2dc:	4798      	blx	r3
	DAC_0_PORT_init();
}
     2de:	bd08      	pop	{r3, pc}
     2e0:	000002ad 	.word	0x000002ad
     2e4:	200005b4 	.word	0x200005b4
     2e8:	42004800 	.word	0x42004800
     2ec:	000025d5 	.word	0x000025d5

000002f0 <WDT_0_CLOCK_init>:
		i = ( i+1 ) % 1024;
	}
}

void WDT_0_CLOCK_init(void)
{
     2f0:	b508      	push	{r3, lr}
	_pm_enable_bus_clock(PM_BUS_APBA, WDT);
     2f2:	2001      	movs	r0, #1
     2f4:	4903      	ldr	r1, [pc, #12]	; (304 <WDT_0_CLOCK_init+0x14>)
     2f6:	4b04      	ldr	r3, [pc, #16]	; (308 <WDT_0_CLOCK_init+0x18>)
     2f8:	4798      	blx	r3
     2fa:	4a04      	ldr	r2, [pc, #16]	; (30c <WDT_0_CLOCK_init+0x1c>)
     2fc:	4b04      	ldr	r3, [pc, #16]	; (310 <WDT_0_CLOCK_init+0x20>)
     2fe:	805a      	strh	r2, [r3, #2]
	_gclk_enable_channel(WDT_GCLK_ID, CONF_GCLK_WDT_SRC);
}
     300:	bd08      	pop	{r3, pc}
     302:	46c0      	nop			; (mov r8, r8)
     304:	40001000 	.word	0x40001000
     308:	00001039 	.word	0x00001039
     30c:	00004003 	.word	0x00004003
     310:	40000c00 	.word	0x40000c00

00000314 <WDT_0_init>:

void WDT_0_init(void)
{
     314:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
     316:	4b06      	ldr	r3, [pc, #24]	; (330 <WDT_0_init+0x1c>)
     318:	4798      	blx	r3
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, needn't init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
     31a:	2001      	movs	r0, #1
     31c:	4905      	ldr	r1, [pc, #20]	; (334 <WDT_0_init+0x20>)
     31e:	224c      	movs	r2, #76	; 0x4c
     320:	4b05      	ldr	r3, [pc, #20]	; (338 <WDT_0_init+0x24>)
     322:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     324:	4805      	ldr	r0, [pc, #20]	; (33c <WDT_0_init+0x28>)
     326:	4b06      	ldr	r3, [pc, #24]	; (340 <WDT_0_init+0x2c>)
     328:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
     32a:	4b06      	ldr	r3, [pc, #24]	; (344 <WDT_0_init+0x30>)
     32c:	4798      	blx	r3
	wdt_init(&WDT_0, WDT);
}
     32e:	bd08      	pop	{r3, pc}
     330:	000002f1 	.word	0x000002f1
     334:	00002ec0 	.word	0x00002ec0
     338:	00002d79 	.word	0x00002d79
     33c:	200005b0 	.word	0x200005b0
     340:	40001000 	.word	0x40001000
     344:	0000251d 	.word	0x0000251d

00000348 <DMA_0_CLOCK_init>:
	wdt_set_timeout_period(&WDT_0, clk_rate, timeout_period);
	wdt_enable(&WDT_0);
}

void DMA_0_CLOCK_init(void)
{
     348:	b538      	push	{r3, r4, r5, lr}
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
     34a:	4d04      	ldr	r5, [pc, #16]	; (35c <DMA_0_CLOCK_init+0x14>)
     34c:	2000      	movs	r0, #0
     34e:	1c29      	adds	r1, r5, #0
     350:	4c03      	ldr	r4, [pc, #12]	; (360 <DMA_0_CLOCK_init+0x18>)
     352:	47a0      	blx	r4
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
     354:	2002      	movs	r0, #2
     356:	1c29      	adds	r1, r5, #0
     358:	47a0      	blx	r4
}
     35a:	bd38      	pop	{r3, r4, r5, pc}
     35c:	41004800 	.word	0x41004800
     360:	00001039 	.word	0x00001039

00000364 <DMA_0_init>:

void DMA_0_init(void)
{
     364:	b508      	push	{r3, lr}
	DMA_0_CLOCK_init();
     366:	4b02      	ldr	r3, [pc, #8]	; (370 <DMA_0_init+0xc>)
     368:	4798      	blx	r3
	dma_memory_init();
     36a:	4b02      	ldr	r3, [pc, #8]	; (374 <DMA_0_init+0x10>)
     36c:	4798      	blx	r3
}
     36e:	bd08      	pop	{r3, pc}
     370:	00000349 	.word	0x00000349
     374:	00002681 	.word	0x00002681

00000378 <USB_0_PORT_init>:

	dma_memcpy(destination_memory, source_memory, 10);
}

void USB_0_PORT_init(void)
{
     378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin,
		const enum gpio_direction direction)
{
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(
     37a:	2480      	movs	r4, #128	; 0x80
     37c:	0464      	lsls	r4, r4, #17
     37e:	2000      	movs	r0, #0
     380:	1c21      	adds	r1, r4, #0
     382:	2202      	movs	r2, #2
     384:	4f10      	ldr	r7, [pc, #64]	; (3c8 <USB_0_PORT_init+0x50>)
     386:	47b8      	blx	r7
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     388:	2000      	movs	r0, #0
     38a:	1c21      	adds	r1, r4, #0
     38c:	2200      	movs	r2, #0
     38e:	4e0f      	ldr	r6, [pc, #60]	; (3cc <USB_0_PORT_init+0x54>)
     390:	47b0      	blx	r6
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin,
		const enum gpio_pull_mode pull_mode)
{
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     392:	2000      	movs	r0, #0
     394:	2118      	movs	r1, #24
     396:	2200      	movs	r2, #0
     398:	4d0d      	ldr	r5, [pc, #52]	; (3d0 <USB_0_PORT_init+0x58>)
     39a:	47a8      	blx	r5
 *                      found in the header files for the device
 *                                            
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
	_gpio_set_pin_function(pin, function);
     39c:	2018      	movs	r0, #24
     39e:	490d      	ldr	r1, [pc, #52]	; (3d4 <USB_0_PORT_init+0x5c>)
     3a0:	4c0d      	ldr	r4, [pc, #52]	; (3d8 <USB_0_PORT_init+0x60>)
     3a2:	47a0      	blx	r4
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin,
		const enum gpio_direction direction)
{
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(
     3a4:	2000      	movs	r0, #0
     3a6:	2180      	movs	r1, #128	; 0x80
     3a8:	0489      	lsls	r1, r1, #18
     3aa:	2202      	movs	r2, #2
     3ac:	47b8      	blx	r7
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     3ae:	2000      	movs	r0, #0
     3b0:	2180      	movs	r1, #128	; 0x80
     3b2:	0489      	lsls	r1, r1, #18
     3b4:	2200      	movs	r2, #0
     3b6:	47b0      	blx	r6
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin,
		const enum gpio_pull_mode pull_mode)
{
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     3b8:	2000      	movs	r0, #0
     3ba:	2119      	movs	r1, #25
     3bc:	2200      	movs	r2, #0
     3be:	47a8      	blx	r5
 *                      found in the header files for the device
 *                                            
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
	_gpio_set_pin_function(pin, function);
     3c0:	2019      	movs	r0, #25
     3c2:	4906      	ldr	r1, [pc, #24]	; (3dc <USB_0_PORT_init+0x64>)
     3c4:	47a0      	blx	r4
	        // <GPIO_PULL_UP"> Pull-up
	        // <GPIO_PULL_DOWN"> Pull-down
			GPIO_PULL_OFF);

	gpio_set_pin_function(PA25, PINMUX_PA25G_USB_DP);
}
     3c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3c8:	000010e5 	.word	0x000010e5
     3cc:	00001189 	.word	0x00001189
     3d0:	000011ad 	.word	0x000011ad
     3d4:	00180006 	.word	0x00180006
     3d8:	0000122d 	.word	0x0000122d
     3dc:	00190006 	.word	0x00190006

000003e0 <USB_0_CLOCK_init>:
	( CONF_GCLK_USB_FREQUENCY < ( 48000000 - 48000000/400 ))
#    warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void USB_0_CLOCK_init(void)
{
     3e0:	b538      	push	{r3, r4, r5, lr}
	_pm_enable_bus_clock(PM_BUS_APBB, USB);
     3e2:	4d06      	ldr	r5, [pc, #24]	; (3fc <USB_0_CLOCK_init+0x1c>)
     3e4:	2002      	movs	r0, #2
     3e6:	1c29      	adds	r1, r5, #0
     3e8:	4c05      	ldr	r4, [pc, #20]	; (400 <USB_0_CLOCK_init+0x20>)
     3ea:	47a0      	blx	r4
	_pm_enable_bus_clock(PM_BUS_AHB, USB);
     3ec:	2000      	movs	r0, #0
     3ee:	1c29      	adds	r1, r5, #0
     3f0:	47a0      	blx	r4
     3f2:	4a04      	ldr	r2, [pc, #16]	; (404 <USB_0_CLOCK_init+0x24>)
     3f4:	4b04      	ldr	r3, [pc, #16]	; (408 <USB_0_CLOCK_init+0x28>)
     3f6:	805a      	strh	r2, [r3, #2]
	_gclk_enable_channel(USB_GCLK_ID, CONF_GCLK_USB_SRC);
}
     3f8:	bd38      	pop	{r3, r4, r5, pc}
     3fa:	46c0      	nop			; (mov r8, r8)
     3fc:	41005000 	.word	0x41005000
     400:	00001039 	.word	0x00001039
     404:	00004006 	.word	0x00004006
     408:	40000c00 	.word	0x40000c00

0000040c <USB_0_init>:

void USB_0_init(void)
{
     40c:	b508      	push	{r3, lr}
	USB_0_CLOCK_init();
     40e:	4b03      	ldr	r3, [pc, #12]	; (41c <USB_0_init+0x10>)
     410:	4798      	blx	r3
	usb_d_init();
     412:	4b03      	ldr	r3, [pc, #12]	; (420 <USB_0_init+0x14>)
     414:	4798      	blx	r3
	USB_0_PORT_init();
     416:	4b03      	ldr	r3, [pc, #12]	; (424 <USB_0_init+0x18>)
     418:	4798      	blx	r3
}
     41a:	bd08      	pop	{r3, pc}
     41c:	000003e1 	.word	0x000003e1
     420:	00002cbd 	.word	0x00002cbd
     424:	00000379 	.word	0x00000379

00000428 <SERCOM0_Handler>:
		__WFI();
	}
}

void SERCOM0_Handler(void)
{
     428:	b508      	push	{r3, lr}
	if (_irq_table[ SERCOM0_IRQn + 0 ]) {
     42a:	4b05      	ldr	r3, [pc, #20]	; (440 <SERCOM0_Handler+0x18>)
     42c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     42e:	2b00      	cmp	r3, #0
     430:	d003      	beq.n	43a <SERCOM0_Handler+0x12>
		_irq_table[ SERCOM0_IRQn + 0 ]->handler(
     432:	6858      	ldr	r0, [r3, #4]
     434:	681b      	ldr	r3, [r3, #0]
     436:	4798      	blx	r3
     438:	e001      	b.n	43e <SERCOM0_Handler+0x16>
				_irq_table[ SERCOM0_IRQn + 0 ]->parameter);
	} else {
		Default_Handler();
     43a:	4b02      	ldr	r3, [pc, #8]	; (444 <SERCOM0_Handler+0x1c>)
     43c:	4798      	blx	r3
	}
}
     43e:	bd08      	pop	{r3, pc}
     440:	20000618 	.word	0x20000618
     444:	00000829 	.word	0x00000829

00000448 <SERCOM1_Handler>:
void SERCOM1_Handler(void)
{
     448:	b508      	push	{r3, lr}
	if (_irq_table[ SERCOM0_IRQn + 1 ]) {
     44a:	4b05      	ldr	r3, [pc, #20]	; (460 <SERCOM1_Handler+0x18>)
     44c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     44e:	2b00      	cmp	r3, #0
     450:	d003      	beq.n	45a <SERCOM1_Handler+0x12>
		_irq_table[ SERCOM0_IRQn + 1 ]->handler(
     452:	6858      	ldr	r0, [r3, #4]
     454:	681b      	ldr	r3, [r3, #0]
     456:	4798      	blx	r3
     458:	e001      	b.n	45e <SERCOM1_Handler+0x16>
				_irq_table[ SERCOM0_IRQn + 1 ]->parameter);
	} else {
		Default_Handler();
     45a:	4b02      	ldr	r3, [pc, #8]	; (464 <SERCOM1_Handler+0x1c>)
     45c:	4798      	blx	r3
	}
}
     45e:	bd08      	pop	{r3, pc}
     460:	20000618 	.word	0x20000618
     464:	00000829 	.word	0x00000829

00000468 <TC3_Handler>:
void TC3_Handler(void)
{
     468:	b508      	push	{r3, lr}
	if (_irq_table[ TCC0_IRQn + 3 ]) {
     46a:	4b05      	ldr	r3, [pc, #20]	; (480 <TC3_Handler+0x18>)
     46c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
     46e:	2b00      	cmp	r3, #0
     470:	d003      	beq.n	47a <TC3_Handler+0x12>
		_irq_table[ TCC0_IRQn + 3 ]->handler(
     472:	6858      	ldr	r0, [r3, #4]
     474:	681b      	ldr	r3, [r3, #0]
     476:	4798      	blx	r3
     478:	e001      	b.n	47e <TC3_Handler+0x16>
				_irq_table[ TCC0_IRQn + 3 ]->parameter);
	} else {
		Default_Handler();
     47a:	4b02      	ldr	r3, [pc, #8]	; (484 <TC3_Handler+0x1c>)
     47c:	4798      	blx	r3
	}
}
     47e:	bd08      	pop	{r3, pc}
     480:	20000618 	.word	0x20000618
     484:	00000829 	.word	0x00000829

00000488 <EIC_Handler>:
void EIC_Handler(void)
{
     488:	b508      	push	{r3, lr}
	if (_irq_table[ EIC_IRQn + 0 ]) {
     48a:	4b05      	ldr	r3, [pc, #20]	; (4a0 <EIC_Handler+0x18>)
     48c:	691b      	ldr	r3, [r3, #16]
     48e:	2b00      	cmp	r3, #0
     490:	d003      	beq.n	49a <EIC_Handler+0x12>
		_irq_table[ EIC_IRQn + 0 ]->handler(
     492:	6858      	ldr	r0, [r3, #4]
     494:	681b      	ldr	r3, [r3, #0]
     496:	4798      	blx	r3
     498:	e001      	b.n	49e <EIC_Handler+0x16>
				_irq_table[ EIC_IRQn + 0 ]->parameter);
	} else {
		Default_Handler();
     49a:	4b02      	ldr	r3, [pc, #8]	; (4a4 <EIC_Handler+0x1c>)
     49c:	4798      	blx	r3
	}
}
     49e:	bd08      	pop	{r3, pc}
     4a0:	20000618 	.word	0x20000618
     4a4:	00000829 	.word	0x00000829

000004a8 <AC_Handler>:
void AC_Handler(void)
{
     4a8:	b508      	push	{r3, lr}
	if (_irq_table[ AC_IRQn + 0 ]) {
     4aa:	4b05      	ldr	r3, [pc, #20]	; (4c0 <AC_Handler+0x18>)
     4ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
     4ae:	2b00      	cmp	r3, #0
     4b0:	d003      	beq.n	4ba <AC_Handler+0x12>
		_irq_table[ AC_IRQn + 0 ]->handler(_irq_table[ AC_IRQn + 0 ]->parameter);
     4b2:	6858      	ldr	r0, [r3, #4]
     4b4:	681b      	ldr	r3, [r3, #0]
     4b6:	4798      	blx	r3
     4b8:	e001      	b.n	4be <AC_Handler+0x16>
	} else {
		Default_Handler();
     4ba:	4b02      	ldr	r3, [pc, #8]	; (4c4 <AC_Handler+0x1c>)
     4bc:	4798      	blx	r3
	}
}
     4be:	bd08      	pop	{r3, pc}
     4c0:	20000618 	.word	0x20000618
     4c4:	00000829 	.word	0x00000829

000004c8 <DAC_Handler>:
void DAC_Handler(void)
{
     4c8:	b508      	push	{r3, lr}
	if (_irq_table[ DAC_IRQn + 0 ]) {
     4ca:	4b05      	ldr	r3, [pc, #20]	; (4e0 <DAC_Handler+0x18>)
     4cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
     4ce:	2b00      	cmp	r3, #0
     4d0:	d003      	beq.n	4da <DAC_Handler+0x12>
		_irq_table[ DAC_IRQn + 0 ]->handler(
     4d2:	6858      	ldr	r0, [r3, #4]
     4d4:	681b      	ldr	r3, [r3, #0]
     4d6:	4798      	blx	r3
     4d8:	e001      	b.n	4de <DAC_Handler+0x16>
				_irq_table[ DAC_IRQn + 0 ]->parameter);
	} else {
		Default_Handler();
     4da:	4b02      	ldr	r3, [pc, #8]	; (4e4 <DAC_Handler+0x1c>)
     4dc:	4798      	blx	r3
	}
}
     4de:	bd08      	pop	{r3, pc}
     4e0:	20000618 	.word	0x20000618
     4e4:	00000829 	.word	0x00000829

000004e8 <WDT_Handler>:
void WDT_Handler(void)
{
     4e8:	b508      	push	{r3, lr}
	if (_irq_table[ WDT_IRQn + 0 ]) {
     4ea:	4b05      	ldr	r3, [pc, #20]	; (500 <WDT_Handler+0x18>)
     4ec:	689b      	ldr	r3, [r3, #8]
     4ee:	2b00      	cmp	r3, #0
     4f0:	d003      	beq.n	4fa <WDT_Handler+0x12>
		_irq_table[ WDT_IRQn + 0 ]->handler(
     4f2:	6858      	ldr	r0, [r3, #4]
     4f4:	681b      	ldr	r3, [r3, #0]
     4f6:	4798      	blx	r3
     4f8:	e001      	b.n	4fe <WDT_Handler+0x16>
				_irq_table[ WDT_IRQn + 0 ]->parameter);
	} else {
		Default_Handler();
     4fa:	4b02      	ldr	r3, [pc, #8]	; (504 <WDT_Handler+0x1c>)
     4fc:	4798      	blx	r3
	}
}
     4fe:	bd08      	pop	{r3, pc}
     500:	20000618 	.word	0x20000618
     504:	00000829 	.word	0x00000829

00000508 <DMAC_Handler>:
void DMAC_Handler(void)
{
     508:	b508      	push	{r3, lr}
	if (_irq_table[ DMAC_IRQn + 0 ]) {
     50a:	4b05      	ldr	r3, [pc, #20]	; (520 <DMAC_Handler+0x18>)
     50c:	699b      	ldr	r3, [r3, #24]
     50e:	2b00      	cmp	r3, #0
     510:	d003      	beq.n	51a <DMAC_Handler+0x12>
		_irq_table[ DMAC_IRQn + 0 ]->handler(
     512:	6858      	ldr	r0, [r3, #4]
     514:	681b      	ldr	r3, [r3, #0]
     516:	4798      	blx	r3
     518:	e001      	b.n	51e <DMAC_Handler+0x16>
				_irq_table[ DMAC_IRQn + 0 ]->parameter);
	} else {
		Default_Handler();
     51a:	4b02      	ldr	r3, [pc, #8]	; (524 <DMAC_Handler+0x1c>)
     51c:	4798      	blx	r3
	}
}
     51e:	bd08      	pop	{r3, pc}
     520:	20000618 	.word	0x20000618
     524:	00000829 	.word	0x00000829

00000528 <SYSCTRL_Handler>:
void SYSCTRL_Handler(void)
{
     528:	b508      	push	{r3, lr}
	if (_irq_table[ SYSCTRL_IRQn + 0 ]) {
     52a:	4b05      	ldr	r3, [pc, #20]	; (540 <SYSCTRL_Handler+0x18>)
     52c:	685b      	ldr	r3, [r3, #4]
     52e:	2b00      	cmp	r3, #0
     530:	d003      	beq.n	53a <SYSCTRL_Handler+0x12>
		_irq_table[ SYSCTRL_IRQn + 0 ]->handler(
     532:	6858      	ldr	r0, [r3, #4]
     534:	681b      	ldr	r3, [r3, #0]
     536:	4798      	blx	r3
     538:	e001      	b.n	53e <SYSCTRL_Handler+0x16>
				_irq_table[ SYSCTRL_IRQn + 0 ]->parameter);
	} else {
		Default_Handler();
     53a:	4b02      	ldr	r3, [pc, #8]	; (544 <SYSCTRL_Handler+0x1c>)
     53c:	4798      	blx	r3
	}
}
     53e:	bd08      	pop	{r3, pc}
     540:	20000618 	.word	0x20000618
     544:	00000829 	.word	0x00000829

00000548 <PM_Handler>:
void PM_Handler(void)
{
     548:	b508      	push	{r3, lr}
	if (_irq_table[ PM_IRQn + 0 ]) {
     54a:	4b05      	ldr	r3, [pc, #20]	; (560 <PM_Handler+0x18>)
     54c:	681b      	ldr	r3, [r3, #0]
     54e:	2b00      	cmp	r3, #0
     550:	d003      	beq.n	55a <PM_Handler+0x12>
		_irq_table[ PM_IRQn + 0 ]->handler(_irq_table[ PM_IRQn + 0 ]->parameter);
     552:	6858      	ldr	r0, [r3, #4]
     554:	681b      	ldr	r3, [r3, #0]
     556:	4798      	blx	r3
     558:	e001      	b.n	55e <PM_Handler+0x16>
	} else {
		Default_Handler();
     55a:	4b02      	ldr	r3, [pc, #8]	; (564 <PM_Handler+0x1c>)
     55c:	4798      	blx	r3
	}
}
     55e:	bd08      	pop	{r3, pc}
     560:	20000618 	.word	0x20000618
     564:	00000829 	.word	0x00000829

00000568 <USB_Handler>:
void USB_Handler(void)
{
     568:	b508      	push	{r3, lr}
	if (_irq_table[ USB_IRQn + 0 ]) {
     56a:	4b05      	ldr	r3, [pc, #20]	; (580 <USB_Handler+0x18>)
     56c:	69db      	ldr	r3, [r3, #28]
     56e:	2b00      	cmp	r3, #0
     570:	d003      	beq.n	57a <USB_Handler+0x12>
		_irq_table[ USB_IRQn + 0 ]->handler(
     572:	6858      	ldr	r0, [r3, #4]
     574:	681b      	ldr	r3, [r3, #0]
     576:	4798      	blx	r3
     578:	e001      	b.n	57e <USB_Handler+0x16>
				_irq_table[ USB_IRQn + 0 ]->parameter);
	} else {
		Default_Handler();
     57a:	4b02      	ldr	r3, [pc, #8]	; (584 <USB_Handler+0x1c>)
     57c:	4798      	blx	r3
	}
}
     57e:	bd08      	pop	{r3, pc}
     580:	20000618 	.word	0x20000618
     584:	00000829 	.word	0x00000829

00000588 <system_init>:
void EXTERNAL_IRQ_0_example(void)
{
}

void system_init(void)
{
     588:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     58a:	4b11      	ldr	r3, [pc, #68]	; (5d0 <system_init+0x48>)
     58c:	4798      	blx	r3
	init_mcu();

	SPI_0_init();
     58e:	4b11      	ldr	r3, [pc, #68]	; (5d4 <system_init+0x4c>)
     590:	4798      	blx	r3

	USART_0_init();
     592:	4b11      	ldr	r3, [pc, #68]	; (5d8 <system_init+0x50>)
     594:	4798      	blx	r3
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, TC3);
     596:	4c11      	ldr	r4, [pc, #68]	; (5dc <system_init+0x54>)
     598:	2003      	movs	r0, #3
     59a:	1c21      	adds	r1, r4, #0
     59c:	4b10      	ldr	r3, [pc, #64]	; (5e0 <system_init+0x58>)
     59e:	4798      	blx	r3
     5a0:	4a10      	ldr	r2, [pc, #64]	; (5e4 <system_init+0x5c>)
     5a2:	4b11      	ldr	r3, [pc, #68]	; (5e8 <system_init+0x60>)
     5a4:	805a      	strh	r2, [r3, #2]
	_gclk_enable_channel(TC3_GCLK_ID, CONF_GCLK_TC3_SRC);
	timer_init(&TIMER_0, TC3, _tc_get_timer());
     5a6:	4b11      	ldr	r3, [pc, #68]	; (5ec <system_init+0x64>)
     5a8:	4798      	blx	r3
     5aa:	1c02      	adds	r2, r0, #0
     5ac:	4810      	ldr	r0, [pc, #64]	; (5f0 <system_init+0x68>)
     5ae:	1c21      	adds	r1, r4, #0
     5b0:	4b10      	ldr	r3, [pc, #64]	; (5f4 <system_init+0x6c>)
     5b2:	4798      	blx	r3

	SPI_0_init();

	USART_0_init();
	TIMER_0_init();
	EXTERNAL_IRQ_0_init();
     5b4:	4b10      	ldr	r3, [pc, #64]	; (5f8 <system_init+0x70>)
     5b6:	4798      	blx	r3

	AC_0_init();
     5b8:	4b10      	ldr	r3, [pc, #64]	; (5fc <system_init+0x74>)
     5ba:	4798      	blx	r3

	DAC_0_init();
     5bc:	4b10      	ldr	r3, [pc, #64]	; (600 <system_init+0x78>)
     5be:	4798      	blx	r3

	WDT_0_init();
     5c0:	4b10      	ldr	r3, [pc, #64]	; (604 <system_init+0x7c>)
     5c2:	4798      	blx	r3

	DMA_0_init();
     5c4:	4b10      	ldr	r3, [pc, #64]	; (608 <system_init+0x80>)
     5c6:	4798      	blx	r3

	USB_0_init();
     5c8:	4b10      	ldr	r3, [pc, #64]	; (60c <system_init+0x84>)
     5ca:	4798      	blx	r3
}
     5cc:	bd10      	pop	{r4, pc}
     5ce:	46c0      	nop			; (mov r8, r8)
     5d0:	0000082d 	.word	0x0000082d
     5d4:	000001ad 	.word	0x000001ad
     5d8:	0000021d 	.word	0x0000021d
     5dc:	42002c00 	.word	0x42002c00
     5e0:	00001039 	.word	0x00001039
     5e4:	0000401b 	.word	0x0000401b
     5e8:	40000c00 	.word	0x40000c00
     5ec:	00001791 	.word	0x00001791
     5f0:	200005fc 	.word	0x200005fc
     5f4:	00002905 	.word	0x00002905
     5f8:	00000245 	.word	0x00000245
     5fc:	0000028d 	.word	0x0000028d
     600:	000002d1 	.word	0x000002d1
     604:	00000315 	.word	0x00000315
     608:	00000365 	.word	0x00000365
     60c:	0000040d 	.word	0x0000040d

00000610 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
        }
     610:	e7fe      	b.n	610 <Dummy_Handler>
     612:	46c0      	nop			; (mov r8, r8)

00000614 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     614:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     616:	4b2e      	ldr	r3, [pc, #184]	; (6d0 <Reset_Handler+0xbc>)
     618:	4a2e      	ldr	r2, [pc, #184]	; (6d4 <Reset_Handler+0xc0>)
     61a:	429a      	cmp	r2, r3
     61c:	d003      	beq.n	626 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
     61e:	4b2e      	ldr	r3, [pc, #184]	; (6d8 <Reset_Handler+0xc4>)
     620:	4a2b      	ldr	r2, [pc, #172]	; (6d0 <Reset_Handler+0xbc>)
     622:	429a      	cmp	r2, r3
     624:	d304      	bcc.n	630 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     626:	4b2d      	ldr	r3, [pc, #180]	; (6dc <Reset_Handler+0xc8>)
     628:	4a2d      	ldr	r2, [pc, #180]	; (6e0 <Reset_Handler+0xcc>)
     62a:	429a      	cmp	r2, r3
     62c:	d310      	bcc.n	650 <Reset_Handler+0x3c>
     62e:	e01e      	b.n	66e <Reset_Handler+0x5a>
     630:	4a2c      	ldr	r2, [pc, #176]	; (6e4 <Reset_Handler+0xd0>)
     632:	4b29      	ldr	r3, [pc, #164]	; (6d8 <Reset_Handler+0xc4>)
     634:	3303      	adds	r3, #3
     636:	1a9b      	subs	r3, r3, r2
     638:	089b      	lsrs	r3, r3, #2
     63a:	3301      	adds	r3, #1
     63c:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     63e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     640:	4823      	ldr	r0, [pc, #140]	; (6d0 <Reset_Handler+0xbc>)
     642:	4924      	ldr	r1, [pc, #144]	; (6d4 <Reset_Handler+0xc0>)
     644:	588c      	ldr	r4, [r1, r2]
     646:	5084      	str	r4, [r0, r2]
     648:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     64a:	429a      	cmp	r2, r3
     64c:	d1fa      	bne.n	644 <Reset_Handler+0x30>
     64e:	e7ea      	b.n	626 <Reset_Handler+0x12>
     650:	4a25      	ldr	r2, [pc, #148]	; (6e8 <Reset_Handler+0xd4>)
     652:	4b22      	ldr	r3, [pc, #136]	; (6dc <Reset_Handler+0xc8>)
     654:	3303      	adds	r3, #3
     656:	1a9b      	subs	r3, r3, r2
     658:	089b      	lsrs	r3, r3, #2
     65a:	3301      	adds	r3, #1
     65c:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     65e:	2200      	movs	r2, #0
                *pDest++ = 0;
     660:	481f      	ldr	r0, [pc, #124]	; (6e0 <Reset_Handler+0xcc>)
     662:	2100      	movs	r1, #0
     664:	1814      	adds	r4, r2, r0
     666:	6021      	str	r1, [r4, #0]
     668:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     66a:	429a      	cmp	r2, r3
     66c:	d1fa      	bne.n	664 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     66e:	4a1f      	ldr	r2, [pc, #124]	; (6ec <Reset_Handler+0xd8>)
     670:	21ff      	movs	r1, #255	; 0xff
     672:	4b1f      	ldr	r3, [pc, #124]	; (6f0 <Reset_Handler+0xdc>)
     674:	438b      	bics	r3, r1
     676:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     678:	39fd      	subs	r1, #253	; 0xfd
     67a:	2390      	movs	r3, #144	; 0x90
     67c:	005b      	lsls	r3, r3, #1
     67e:	4a1d      	ldr	r2, [pc, #116]	; (6f4 <Reset_Handler+0xe0>)
     680:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     682:	481d      	ldr	r0, [pc, #116]	; (6f8 <Reset_Handler+0xe4>)
     684:	78c3      	ldrb	r3, [r0, #3]
     686:	2403      	movs	r4, #3
     688:	43a3      	bics	r3, r4
     68a:	2202      	movs	r2, #2
     68c:	4313      	orrs	r3, r2
     68e:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     690:	78c3      	ldrb	r3, [r0, #3]
     692:	260c      	movs	r6, #12
     694:	43b3      	bics	r3, r6
     696:	2108      	movs	r1, #8
     698:	430b      	orrs	r3, r1
     69a:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     69c:	4b17      	ldr	r3, [pc, #92]	; (6fc <Reset_Handler+0xe8>)
     69e:	7b98      	ldrb	r0, [r3, #14]
     6a0:	2530      	movs	r5, #48	; 0x30
     6a2:	43a8      	bics	r0, r5
     6a4:	1c05      	adds	r5, r0, #0
     6a6:	2020      	movs	r0, #32
     6a8:	4328      	orrs	r0, r5
     6aa:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     6ac:	7b98      	ldrb	r0, [r3, #14]
     6ae:	43b0      	bics	r0, r6
     6b0:	4301      	orrs	r1, r0
     6b2:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     6b4:	7b99      	ldrb	r1, [r3, #14]
     6b6:	43a1      	bics	r1, r4
     6b8:	430a      	orrs	r2, r1
     6ba:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     6bc:	4a10      	ldr	r2, [pc, #64]	; (700 <Reset_Handler+0xec>)
     6be:	6851      	ldr	r1, [r2, #4]
     6c0:	2380      	movs	r3, #128	; 0x80
     6c2:	430b      	orrs	r3, r1
     6c4:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     6c6:	4b0f      	ldr	r3, [pc, #60]	; (704 <Reset_Handler+0xf0>)
     6c8:	4798      	blx	r3

        /* Branch to main function */
        main();
     6ca:	4b0f      	ldr	r3, [pc, #60]	; (708 <Reset_Handler+0xf4>)
     6cc:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     6ce:	e7fe      	b.n	6ce <Reset_Handler+0xba>
     6d0:	20000000 	.word	0x20000000
     6d4:	00003194 	.word	0x00003194
     6d8:	20000020 	.word	0x20000020
     6dc:	20000688 	.word	0x20000688
     6e0:	20000020 	.word	0x20000020
     6e4:	20000004 	.word	0x20000004
     6e8:	20000024 	.word	0x20000024
     6ec:	e000ed00 	.word	0xe000ed00
     6f0:	00000000 	.word	0x00000000
     6f4:	41007000 	.word	0x41007000
     6f8:	41005000 	.word	0x41005000
     6fc:	41004800 	.word	0x41004800
     700:	41004000 	.word	0x41004000
     704:	00002e41 	.word	0x00002e41
     708:	00002d31 	.word	0x00002d31

0000070c <_ac_init>:
 * \brief Initialize AC
 *
 * \param[in] hw The pointer to hardware instance
 */
static int32_t _ac_init(void *const hw)
{
     70c:	b510      	push	{r4, lr}
     70e:	1c04      	adds	r4, r0, #0
	ASSERT(hw == AC);
     710:	4b1b      	ldr	r3, [pc, #108]	; (780 <_ac_init+0x74>)
     712:	18c0      	adds	r0, r0, r3
     714:	4243      	negs	r3, r0
     716:	4158      	adcs	r0, r3
     718:	b2c0      	uxtb	r0, r0
     71a:	491a      	ldr	r1, [pc, #104]	; (784 <_ac_init+0x78>)
     71c:	2290      	movs	r2, #144	; 0x90
     71e:	0052      	lsls	r2, r2, #1
     720:	4b19      	ldr	r3, [pc, #100]	; (788 <_ac_init+0x7c>)
     722:	4798      	blx	r3
typedef uint8_t hri_ac_statusc_reg_t;
typedef uint8_t hri_ac_winctrl_reg_t;

static inline void hri_ac_wait_for_sync(const void *const hw)
{
	while(((const Ac *)hw)->STATUSB.bit.SYNCBUSY);
     724:	7a63      	ldrb	r3, [r4, #9]
     726:	09db      	lsrs	r3, r3, #7
     728:	d1fc      	bne.n	724 <_ac_init+0x18>
     72a:	7a63      	ldrb	r3, [r4, #9]
     72c:	09db      	lsrs	r3, r3, #7
     72e:	d1fc      	bne.n	72a <_ac_init+0x1e>

static inline bool hri_ac_get_CTRLA_ENABLE_bit(const void *const hw) 
{
        uint8_t tmp;
        hri_ac_wait_for_sync(hw);
        tmp = ((Ac *)hw)->CTRLA.reg;
     730:	7823      	ldrb	r3, [r4, #0]

	hri_ac_wait_for_sync(hw);
	if (hri_ac_get_CTRLA_ENABLE_bit(hw)) {
     732:	079b      	lsls	r3, r3, #30
     734:	d421      	bmi.n	77a <_ac_init+0x6e>
typedef uint8_t hri_ac_statusc_reg_t;
typedef uint8_t hri_ac_winctrl_reg_t;

static inline void hri_ac_wait_for_sync(const void *const hw)
{
	while(((const Ac *)hw)->STATUSB.bit.SYNCBUSY);
     736:	7a63      	ldrb	r3, [r4, #9]
     738:	09db      	lsrs	r3, r3, #7
     73a:	d1fc      	bne.n	736 <_ac_init+0x2a>

static inline void hri_ac_set_CTRLA_SWRST_bit(const void *const hw) 
{
        AC_CRITICAL_SECTION_ENTER();
        hri_ac_wait_for_sync(hw);
        ((Ac *)hw)->CTRLA.reg |= AC_CTRLA_SWRST;
     73c:	7822      	ldrb	r2, [r4, #0]
     73e:	3301      	adds	r3, #1
     740:	4313      	orrs	r3, r2
     742:	7023      	strb	r3, [r4, #0]
typedef uint8_t hri_ac_statusc_reg_t;
typedef uint8_t hri_ac_winctrl_reg_t;

static inline void hri_ac_wait_for_sync(const void *const hw)
{
	while(((const Ac *)hw)->STATUSB.bit.SYNCBUSY);
     744:	7a63      	ldrb	r3, [r4, #9]
     746:	09db      	lsrs	r3, r3, #7
     748:	d1fc      	bne.n	744 <_ac_init+0x38>
     74a:	7a63      	ldrb	r3, [r4, #9]
     74c:	09db      	lsrs	r3, r3, #7
     74e:	d1fc      	bne.n	74a <_ac_init+0x3e>

static inline void hri_ac_write_COMPCTRL_reg(const void *const hw, uint8_t index, hri_ac_compctrl_reg_t data) 
{
        AC_CRITICAL_SECTION_ENTER();
        hri_ac_wait_for_sync(hw);
        ((Ac *)hw)->COMPCTRL[index].reg = data;
     750:	23c0      	movs	r3, #192	; 0xc0
     752:	00db      	lsls	r3, r3, #3
     754:	6123      	str	r3, [r4, #16]
typedef uint8_t hri_ac_statusc_reg_t;
typedef uint8_t hri_ac_winctrl_reg_t;

static inline void hri_ac_wait_for_sync(const void *const hw)
{
	while(((const Ac *)hw)->STATUSB.bit.SYNCBUSY);
     756:	7a63      	ldrb	r3, [r4, #9]
     758:	09db      	lsrs	r3, r3, #7
     75a:	d1fc      	bne.n	756 <_ac_init+0x4a>

static inline void hri_ac_write_COMPCTRL_reg(const void *const hw, uint8_t index, hri_ac_compctrl_reg_t data) 
{
        AC_CRITICAL_SECTION_ENTER();
        hri_ac_wait_for_sync(hw);
        ((Ac *)hw)->COMPCTRL[index].reg = data;
     75c:	23c0      	movs	r3, #192	; 0xc0
     75e:	00db      	lsls	r3, r3, #3
     760:	6163      	str	r3, [r4, #20]
}

static inline void hri_ac_write_SCALER_reg(const void *const hw, uint8_t index, hri_ac_scaler_reg_t data) 
{
        AC_CRITICAL_SECTION_ENTER();
        ((Ac *)hw)->SCALER[index].reg = data;
     762:	2300      	movs	r3, #0
     764:	2220      	movs	r2, #32
     766:	54a3      	strb	r3, [r4, r2]
     768:	3201      	adds	r2, #1
     76a:	54a3      	strb	r3, [r4, r2]
}

static inline void hri_ac_write_EVCTRL_reg(const void *const hw, hri_ac_evctrl_reg_t data) 
{
        AC_CRITICAL_SECTION_ENTER();
        ((Ac *)hw)->EVCTRL.reg = data;
     76c:	8063      	strh	r3, [r4, #2]
typedef uint8_t hri_ac_statusc_reg_t;
typedef uint8_t hri_ac_winctrl_reg_t;

static inline void hri_ac_wait_for_sync(const void *const hw)
{
	while(((const Ac *)hw)->STATUSB.bit.SYNCBUSY);
     76e:	7a63      	ldrb	r3, [r4, #9]
     770:	09db      	lsrs	r3, r3, #7
     772:	d1fc      	bne.n	76e <_ac_init+0x62>

static inline void hri_ac_write_CTRLA_reg(const void *const hw, hri_ac_ctrla_reg_t data) 
{
        AC_CRITICAL_SECTION_ENTER();
        hri_ac_wait_for_sync(hw);
        ((Ac *)hw)->CTRLA.reg = data;
     774:	7023      	strb	r3, [r4, #0]
	hri_ac_write_SCALER_reg(hw, 0, _ac.comp_scaler0);
	hri_ac_write_SCALER_reg(hw, 1, _ac.comp_scaler1);
	hri_ac_write_EVCTRL_reg(hw, _ac.ev_ctrl);
	hri_ac_write_CTRLA_reg(hw, _ac.ctrla);

	return ERR_NONE;
     776:	2000      	movs	r0, #0
     778:	e001      	b.n	77e <_ac_init+0x72>
{
	ASSERT(hw == AC);

	hri_ac_wait_for_sync(hw);
	if (hri_ac_get_CTRLA_ENABLE_bit(hw)) {
		return ERR_DENIED;
     77a:	2011      	movs	r0, #17
     77c:	4240      	negs	r0, r0
	hri_ac_write_SCALER_reg(hw, 1, _ac.comp_scaler1);
	hri_ac_write_EVCTRL_reg(hw, _ac.ev_ctrl);
	hri_ac_write_CTRLA_reg(hw, _ac.ctrla);

	return ERR_NONE;
}
     77e:	bd10      	pop	{r4, pc}
     780:	bdffbc00 	.word	0xbdffbc00
     784:	00002edc 	.word	0x00002edc
     788:	00002d79 	.word	0x00002d79

0000078c <_ac_sync_init>:

/**
 * \brief Initialize synchronous AC
 */
int32_t _ac_sync_init(struct _ac_sync_device *const device, void *const hw)
{
     78c:	b538      	push	{r3, r4, r5, lr}
     78e:	1c05      	adds	r5, r0, #0
     790:	1c0c      	adds	r4, r1, #0
	ASSERT(device);
     792:	1e43      	subs	r3, r0, #1
     794:	4198      	sbcs	r0, r3
     796:	b2c0      	uxtb	r0, r0
     798:	4904      	ldr	r1, [pc, #16]	; (7ac <_ac_sync_init+0x20>)
     79a:	226b      	movs	r2, #107	; 0x6b
     79c:	4b04      	ldr	r3, [pc, #16]	; (7b0 <_ac_sync_init+0x24>)
     79e:	4798      	blx	r3

	device->hw = hw;
     7a0:	602c      	str	r4, [r5, #0]

	return _ac_init(hw);
     7a2:	1c20      	adds	r0, r4, #0
     7a4:	4b03      	ldr	r3, [pc, #12]	; (7b4 <_ac_sync_init+0x28>)
     7a6:	4798      	blx	r3
}
     7a8:	bd38      	pop	{r3, r4, r5, pc}
     7aa:	46c0      	nop			; (mov r8, r8)
     7ac:	00002edc 	.word	0x00002edc
     7b0:	00002d79 	.word	0x00002d79
     7b4:	0000070d 	.word	0x0000070d

000007b8 <_irq_disable>:

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     7b8:	231f      	movs	r3, #31
     7ba:	4018      	ands	r0, r3
     7bc:	3b1e      	subs	r3, #30
     7be:	4083      	lsls	r3, r0
     7c0:	1c18      	adds	r0, r3, #0
     7c2:	2380      	movs	r3, #128	; 0x80
     7c4:	4a01      	ldr	r2, [pc, #4]	; (7cc <_irq_disable+0x14>)
     7c6:	50d0      	str	r0, [r2, r3]
 * \brief Disable the given IRQ
 */
void _irq_disable(uint8_t n)
{
	NVIC_DisableIRQ((IRQn_Type)n);
}
     7c8:	4770      	bx	lr
     7ca:	46c0      	nop			; (mov r8, r8)
     7cc:	e000e100 	.word	0xe000e100

000007d0 <_irq_clear>:

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     7d0:	231f      	movs	r3, #31
     7d2:	4018      	ands	r0, r3
     7d4:	3b1e      	subs	r3, #30
     7d6:	4083      	lsls	r3, r0
     7d8:	1c18      	adds	r0, r3, #0
     7da:	23c0      	movs	r3, #192	; 0xc0
     7dc:	005b      	lsls	r3, r3, #1
     7de:	4a01      	ldr	r2, [pc, #4]	; (7e4 <_irq_clear+0x14>)
     7e0:	50d0      	str	r0, [r2, r3]
 * \brief Clear the given IRQ
 */
void _irq_clear(uint8_t n)
{
	NVIC_ClearPendingIRQ((IRQn_Type)n);
}
     7e2:	4770      	bx	lr
     7e4:	e000e100 	.word	0xe000e100

000007e8 <_irq_enable>:

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     7e8:	231f      	movs	r3, #31
     7ea:	4018      	ands	r0, r3
     7ec:	3b1e      	subs	r3, #30
     7ee:	4083      	lsls	r3, r0
     7f0:	1c18      	adds	r0, r3, #0
     7f2:	4b01      	ldr	r3, [pc, #4]	; (7f8 <_irq_enable+0x10>)
     7f4:	6018      	str	r0, [r3, #0]
 * \brief Enable the given IRQ
 */
void _irq_enable(uint8_t n)
{
	NVIC_EnableIRQ((IRQn_Type)n);
}
     7f6:	4770      	bx	lr
     7f8:	e000e100 	.word	0xe000e100

000007fc <_irq_register>:

/**
 * \brief Register IRQ handler
 */
void _irq_register(const uint8_t n, struct _irq_descriptor *const irq)
{
     7fc:	b538      	push	{r3, r4, r5, lr}
     7fe:	1c04      	adds	r4, r0, #0
     800:	1c0d      	adds	r5, r1, #0
	ASSERT(n < PERIPH_COUNT_IRQn);
     802:	2000      	movs	r0, #0
     804:	231b      	movs	r3, #27
     806:	42a3      	cmp	r3, r4
     808:	4140      	adcs	r0, r0
     80a:	b2c0      	uxtb	r0, r0
     80c:	4903      	ldr	r1, [pc, #12]	; (81c <_irq_register+0x20>)
     80e:	228c      	movs	r2, #140	; 0x8c
     810:	4b03      	ldr	r3, [pc, #12]	; (820 <_irq_register+0x24>)
     812:	4798      	blx	r3

	_irq_table[n] = irq;
     814:	00a4      	lsls	r4, r4, #2
     816:	4b03      	ldr	r3, [pc, #12]	; (824 <_irq_register+0x28>)
     818:	50e5      	str	r5, [r4, r3]
}
     81a:	bd38      	pop	{r3, r4, r5, pc}
     81c:	00002f00 	.word	0x00002f00
     820:	00002d79 	.word	0x00002d79
     824:	20000618 	.word	0x20000618

00000828 <Default_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Default_Handler(void)
{
        while (1) {
        }
     828:	e7fe      	b.n	828 <Default_Handler>
     82a:	46c0      	nop			; (mov r8, r8)

0000082c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     82c:	b500      	push	{lr}
     82e:	b083      	sub	sp, #12
        NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask) 
{
        NVMCTRL_CRITICAL_SECTION_ENTER();
     830:	a801      	add	r0, sp, #4
     832:	4b09      	ldr	r3, [pc, #36]	; (858 <_init_chip+0x2c>)
     834:	4798      	blx	r3
        ((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     836:	4b09      	ldr	r3, [pc, #36]	; (85c <_init_chip+0x30>)
     838:	685a      	ldr	r2, [r3, #4]
     83a:	605a      	str	r2, [r3, #4]
        NVMCTRL_CRITICAL_SECTION_LEAVE();
     83c:	a801      	add	r0, sp, #4
     83e:	4b08      	ldr	r3, [pc, #32]	; (860 <_init_chip+0x34>)
     840:	4798      	blx	r3
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     842:	4b08      	ldr	r3, [pc, #32]	; (864 <_init_chip+0x38>)
     844:	4798      	blx	r3
	_sysctrl_init_sources();
     846:	4b08      	ldr	r3, [pc, #32]	; (868 <_init_chip+0x3c>)
     848:	4798      	blx	r3
	_gclk_init_generators();
     84a:	4b08      	ldr	r3, [pc, #32]	; (86c <_init_chip+0x40>)
     84c:	4798      	blx	r3
	_sysctrl_init_referenced_generators();
     84e:	4b08      	ldr	r3, [pc, #32]	; (870 <_init_chip+0x44>)
     850:	4798      	blx	r3
}
     852:	b003      	add	sp, #12
     854:	bd00      	pop	{pc}
     856:	46c0      	nop			; (mov r8, r8)
     858:	000025b9 	.word	0x000025b9
     85c:	41004000 	.word	0x41004000
     860:	000025c9 	.word	0x000025c9
     864:	000010c5 	.word	0x000010c5
     868:	00001609 	.word	0x00001609
     86c:	00000ed5 	.word	0x00000ed5
     870:	0000165d 	.word	0x0000165d

00000874 <_dac_init>:
 * \brief Initialize DAC
 *
 * param[in] hw The pointer to DAC hardware instance
 */
static int32_t _dac_init(void *const hw)
{
     874:	b510      	push	{r4, lr}
     876:	1c04      	adds	r4, r0, #0
	ASSERT(hw == DAC);
     878:	4b13      	ldr	r3, [pc, #76]	; (8c8 <_dac_init+0x54>)
     87a:	18c0      	adds	r0, r0, r3
     87c:	4243      	negs	r3, r0
     87e:	4158      	adcs	r0, r3
     880:	b2c0      	uxtb	r0, r0
     882:	4912      	ldr	r1, [pc, #72]	; (8cc <_dac_init+0x58>)
     884:	227e      	movs	r2, #126	; 0x7e
     886:	4b12      	ldr	r3, [pc, #72]	; (8d0 <_dac_init+0x5c>)
     888:	4798      	blx	r3
typedef uint8_t hri_dac_intflag_reg_t;
typedef uint8_t hri_dac_status_reg_t;

static inline void hri_dac_wait_for_sync(const void *const hw)
{
	while(((const Dac *)hw)->STATUS.bit.SYNCBUSY);
     88a:	79e3      	ldrb	r3, [r4, #7]
     88c:	09db      	lsrs	r3, r3, #7
     88e:	d1fc      	bne.n	88a <_dac_init+0x16>
     890:	79e3      	ldrb	r3, [r4, #7]
     892:	09db      	lsrs	r3, r3, #7
     894:	d1fc      	bne.n	890 <_dac_init+0x1c>

static inline bool hri_dac_get_CTRLA_ENABLE_bit(const void *const hw) 
{
        uint8_t tmp;
        hri_dac_wait_for_sync(hw);
        tmp = ((Dac *)hw)->CTRLA.reg;
     896:	7823      	ldrb	r3, [r4, #0]

	hri_dac_wait_for_sync(hw);
	if (hri_dac_get_CTRLA_ENABLE_bit(hw)) {
     898:	079b      	lsls	r3, r3, #30
     89a:	d412      	bmi.n	8c2 <_dac_init+0x4e>
typedef uint8_t hri_dac_intflag_reg_t;
typedef uint8_t hri_dac_status_reg_t;

static inline void hri_dac_wait_for_sync(const void *const hw)
{
	while(((const Dac *)hw)->STATUS.bit.SYNCBUSY);
     89c:	79e3      	ldrb	r3, [r4, #7]
     89e:	09db      	lsrs	r3, r3, #7
     8a0:	d1fc      	bne.n	89c <_dac_init+0x28>

static inline void hri_dac_set_CTRLA_SWRST_bit(const void *const hw) 
{
        DAC_CRITICAL_SECTION_ENTER();
        hri_dac_wait_for_sync(hw);
        ((Dac *)hw)->CTRLA.reg |= DAC_CTRLA_SWRST;
     8a2:	7822      	ldrb	r2, [r4, #0]
     8a4:	3301      	adds	r3, #1
     8a6:	4313      	orrs	r3, r2
     8a8:	7023      	strb	r3, [r4, #0]
typedef uint8_t hri_dac_intflag_reg_t;
typedef uint8_t hri_dac_status_reg_t;

static inline void hri_dac_wait_for_sync(const void *const hw)
{
	while(((const Dac *)hw)->STATUS.bit.SYNCBUSY);
     8aa:	79e3      	ldrb	r3, [r4, #7]
     8ac:	09db      	lsrs	r3, r3, #7
     8ae:	d1fc      	bne.n	8aa <_dac_init+0x36>
}

static inline void hri_dac_write_EVCTRL_reg(const void *const hw, hri_dac_evctrl_reg_t data) 
{
        DAC_CRITICAL_SECTION_ENTER();
        ((Dac *)hw)->EVCTRL.reg = data;
     8b0:	70a3      	strb	r3, [r4, #2]
}

static inline void hri_dac_write_CTRLB_reg(const void *const hw, hri_dac_ctrlb_reg_t data) 
{
        DAC_CRITICAL_SECTION_ENTER();
        ((Dac *)hw)->CTRLB.reg = data;
     8b2:	3301      	adds	r3, #1
     8b4:	7063      	strb	r3, [r4, #1]
typedef uint8_t hri_dac_intflag_reg_t;
typedef uint8_t hri_dac_status_reg_t;

static inline void hri_dac_wait_for_sync(const void *const hw)
{
	while(((const Dac *)hw)->STATUS.bit.SYNCBUSY);
     8b6:	79e3      	ldrb	r3, [r4, #7]
     8b8:	09db      	lsrs	r3, r3, #7
     8ba:	d1fc      	bne.n	8b6 <_dac_init+0x42>

static inline void hri_dac_write_CTRLA_reg(const void *const hw, hri_dac_ctrla_reg_t data) 
{
        DAC_CRITICAL_SECTION_ENTER();
        hri_dac_wait_for_sync(hw);
        ((Dac *)hw)->CTRLA.reg = data;
     8bc:	7023      	strb	r3, [r4, #0]

	hri_dac_write_EVCTRL_reg(hw, _dac.ev_ctrl);
	hri_dac_write_CTRLB_reg(hw, _dac.ctrlb);
	hri_dac_write_CTRLA_reg(hw, _dac.ctrla);

	return ERR_NONE;
     8be:	2000      	movs	r0, #0
     8c0:	e001      	b.n	8c6 <_dac_init+0x52>
{
	ASSERT(hw == DAC);

	hri_dac_wait_for_sync(hw);
	if (hri_dac_get_CTRLA_ENABLE_bit(hw)) {
		return ERR_BUSY;
     8c2:	2004      	movs	r0, #4
     8c4:	4240      	negs	r0, r0
	hri_dac_write_EVCTRL_reg(hw, _dac.ev_ctrl);
	hri_dac_write_CTRLB_reg(hw, _dac.ctrlb);
	hri_dac_write_CTRLA_reg(hw, _dac.ctrla);

	return ERR_NONE;
}
     8c6:	bd10      	pop	{r4, pc}
     8c8:	bdffb800 	.word	0xbdffb800
     8cc:	00002f28 	.word	0x00002f28
     8d0:	00002d79 	.word	0x00002d79

000008d4 <_dac_sync_init>:

/**
 * \brief Initialize synchronous DAC
 */
int32_t _dac_sync_init(struct _dac_sync_device *const device, void *const hw)
{
     8d4:	b538      	push	{r3, r4, r5, lr}
     8d6:	1c05      	adds	r5, r0, #0
     8d8:	1c0c      	adds	r4, r1, #0
	ASSERT(device);
     8da:	1e43      	subs	r3, r0, #1
     8dc:	4198      	sbcs	r0, r3
     8de:	b2c0      	uxtb	r0, r0
     8e0:	4904      	ldr	r1, [pc, #16]	; (8f4 <_dac_sync_init+0x20>)
     8e2:	2256      	movs	r2, #86	; 0x56
     8e4:	4b04      	ldr	r3, [pc, #16]	; (8f8 <_dac_sync_init+0x24>)
     8e6:	4798      	blx	r3

	device->hw = hw;
     8e8:	602c      	str	r4, [r5, #0]

	return _dac_init(device->hw);
     8ea:	1c20      	adds	r0, r4, #0
     8ec:	4b03      	ldr	r3, [pc, #12]	; (8fc <_dac_sync_init+0x28>)
     8ee:	4798      	blx	r3
 }
     8f0:	bd38      	pop	{r3, r4, r5, pc}
     8f2:	46c0      	nop			; (mov r8, r8)
     8f4:	00002f28 	.word	0x00002f28
     8f8:	00002d79 	.word	0x00002d79
     8fc:	00000875 	.word	0x00000875

00000900 <get_trigger_source>:
 * \return The trigger number
 */
static int32_t get_trigger_source(void *const dev, uint32_t const trigger)
{
	(void)dev;
	if (MEMORY_DMA_TX == trigger) {
     900:	1e48      	subs	r0, r1, #1
     902:	4181      	sbcs	r1, r0
     904:	4248      	negs	r0, r1
		return 0;
	} else {
		return -1;
	}
}
     906:	4770      	bx	lr

00000908 <_dma_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _dma_handler(void *p)
{
     908:	b5f0      	push	{r4, r5, r6, r7, lr}
     90a:	464f      	mov	r7, r9
     90c:	4646      	mov	r6, r8
     90e:	b4c0      	push	{r6, r7}
     910:	b083      	sub	sp, #12
     912:	1c05      	adds	r5, r0, #0
	struct _dma_dev * *dev = (struct _dma_dev * *)p;
	uint32_t write_size, total_size;

	uint8_t channel = hri_dmac_read_INTPEND_ID_bf(( *dev )->hw);
     914:	6803      	ldr	r3, [r0, #0]
     916:	689c      	ldr	r4, [r3, #8]

static inline hri_dmac_intpend_reg_t hri_dmac_read_INTPEND_ID_bf(const void *const hw)
{
	uint16_t tmp;

	DMAC_CRITICAL_SECTION_ENTER()
     918:	4668      	mov	r0, sp
     91a:	4f2d      	ldr	r7, [pc, #180]	; (9d0 <_dma_handler+0xc8>)
     91c:	47b8      	blx	r7
	tmp = ((const Dmac *)hw)->INTPEND.reg;
     91e:	8c24      	ldrh	r4, [r4, #32]
     920:	b2a4      	uxth	r4, r4
	tmp = (tmp & DMAC_INTPEND_ID_Msk) >> DMAC_INTPEND_ID_Pos;
	DMAC_CRITICAL_SECTION_LEAVE()
     922:	4668      	mov	r0, sp
     924:	4e2b      	ldr	r6, [pc, #172]	; (9d4 <_dma_handler+0xcc>)
     926:	47b0      	blx	r6
     928:	230f      	movs	r3, #15
     92a:	401c      	ands	r4, r3

	struct _dma_resource *tmp_resource = &_resource[channel];
     92c:	00e3      	lsls	r3, r4, #3
     92e:	1b1b      	subs	r3, r3, r4
     930:	009b      	lsls	r3, r3, #2
     932:	4a29      	ldr	r2, [pc, #164]	; (9d8 <_dma_handler+0xd0>)
     934:	4698      	mov	r8, r3
     936:	4490      	add	r8, r2

	total_size = _descriptor_section[channel].BTCNT.reg;
     938:	0122      	lsls	r2, r4, #4
     93a:	4b28      	ldr	r3, [pc, #160]	; (9dc <_dma_handler+0xd4>)
     93c:	189b      	adds	r3, r3, r2
     93e:	885b      	ldrh	r3, [r3, #2]
	write_size = _write_back_section[channel].BTCNT.reg;
     940:	4927      	ldr	r1, [pc, #156]	; (9e0 <_dma_handler+0xd8>)
     942:	188a      	adds	r2, r1, r2
     944:	8852      	ldrh	r2, [r2, #2]
	tmp_resource->transfered_size = total_size - write_size;
     946:	1a9b      	subs	r3, r3, r2
     948:	4642      	mov	r2, r8
     94a:	6053      	str	r3, [r2, #4]

	hri_dmac_write_CHID_reg(( *dev )->hw, channel);
     94c:	682b      	ldr	r3, [r5, #0]
     94e:	689b      	ldr	r3, [r3, #8]
     950:	4699      	mov	r9, r3
	DMAC_CRITICAL_SECTION_LEAVE()
}

static inline void hri_dmac_write_CHID_reg(void *const hw, const hri_dmac_chid_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER()
     952:	a801      	add	r0, sp, #4
     954:	47b8      	blx	r7
	((Dmac *)hw)->CHID.reg = data;
     956:	233f      	movs	r3, #63	; 0x3f
     958:	464a      	mov	r2, r9
     95a:	54d4      	strb	r4, [r2, r3]
	DMAC_CRITICAL_SECTION_LEAVE()
     95c:	a801      	add	r0, sp, #4
     95e:	47b0      	blx	r6

	if (hri_dmac_get_interrupt_TERR_bit(( *dev )->hw)) {
     960:	682b      	ldr	r3, [r5, #0]
     962:	689b      	ldr	r3, [r3, #8]
	((Dmac *)hw)->CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
}

static inline bool hri_dmac_get_interrupt_TERR_bit(const void *const hw)
{
	return (((const Dmac *)hw)->CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
     964:	224e      	movs	r2, #78	; 0x4e
     966:	5c9a      	ldrb	r2, [r3, r2]
     968:	07d2      	lsls	r2, r2, #31
     96a:	d514      	bpl.n	996 <_dma_handler+0x8e>
		tmp_resource->status = ERR_IO;
     96c:	491a      	ldr	r1, [pc, #104]	; (9d8 <_dma_handler+0xd0>)
     96e:	00e3      	lsls	r3, r4, #3
     970:	1b1a      	subs	r2, r3, r4
     972:	0092      	lsls	r2, r2, #2
     974:	188a      	adds	r2, r1, r2
     976:	2006      	movs	r0, #6
     978:	4240      	negs	r0, r0
     97a:	6190      	str	r0, [r2, #24]
		hri_dmac_clear_interrupt_TERR_bit(( *dev )->hw);
     97c:	682a      	ldr	r2, [r5, #0]
     97e:	6890      	ldr	r0, [r2, #8]
	return (((const Dmac *)hw)->CHINTENSET.reg & DMAC_CHINTENSET_SUSP) >> DMAC_CHINTENSET_SUSP_Pos;
}

static inline void hri_dmac_clear_interrupt_TERR_bit(void *const hw)
{
	((Dmac *)hw)->CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
     980:	2601      	movs	r6, #1
     982:	224e      	movs	r2, #78	; 0x4e
     984:	5486      	strb	r6, [r0, r2]
		tmp_resource->_dma_cb.error(dev, tmp_resource);
     986:	1b1c      	subs	r4, r3, r4
     988:	00a4      	lsls	r4, r4, #2
     98a:	190c      	adds	r4, r1, r4
     98c:	68e3      	ldr	r3, [r4, #12]
     98e:	1c28      	adds	r0, r5, #0
     990:	4641      	mov	r1, r8
     992:	4798      	blx	r3
     994:	e016      	b.n	9c4 <_dma_handler+0xbc>
	((Dmac *)hw)->CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
}

static inline bool hri_dmac_get_interrupt_TCMPL_bit(const void *const hw)
{
	return (((const Dmac *)hw)->CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
     996:	224e      	movs	r2, #78	; 0x4e
     998:	5c9b      	ldrb	r3, [r3, r2]
	} else if (hri_dmac_get_interrupt_TCMPL_bit(( *dev )->hw)) {
     99a:	079b      	lsls	r3, r3, #30
     99c:	d512      	bpl.n	9c4 <_dma_handler+0xbc>
		tmp_resource->status = ERR_NONE;
     99e:	490e      	ldr	r1, [pc, #56]	; (9d8 <_dma_handler+0xd0>)
     9a0:	00e3      	lsls	r3, r4, #3
     9a2:	1b1a      	subs	r2, r3, r4
     9a4:	0092      	lsls	r2, r2, #2
     9a6:	188a      	adds	r2, r1, r2
     9a8:	2000      	movs	r0, #0
     9aa:	6190      	str	r0, [r2, #24]
		hri_dmac_clear_interrupt_TCMPL_bit(( *dev )->hw);
     9ac:	682a      	ldr	r2, [r5, #0]
     9ae:	6890      	ldr	r0, [r2, #8]
	return (((const Dmac *)hw)->CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
}

static inline void hri_dmac_clear_interrupt_TCMPL_bit(void *const hw)
{
	((Dmac *)hw)->CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
     9b0:	2602      	movs	r6, #2
     9b2:	224e      	movs	r2, #78	; 0x4e
     9b4:	5486      	strb	r6, [r0, r2]
		tmp_resource->_dma_cb.transfer_done(dev, tmp_resource);
     9b6:	1b1c      	subs	r4, r3, r4
     9b8:	00a4      	lsls	r4, r4, #2
     9ba:	190c      	adds	r4, r1, r4
     9bc:	68a3      	ldr	r3, [r4, #8]
     9be:	1c28      	adds	r0, r5, #0
     9c0:	4641      	mov	r1, r8
     9c2:	4798      	blx	r3
	}
}
     9c4:	b003      	add	sp, #12
     9c6:	bc0c      	pop	{r2, r3}
     9c8:	4690      	mov	r8, r2
     9ca:	4699      	mov	r9, r3
     9cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9ce:	46c0      	nop			; (mov r8, r8)
     9d0:	000025b9 	.word	0x000025b9
     9d4:	000025c9 	.word	0x000025c9
     9d8:	200005e0 	.word	0x200005e0
     9dc:	20000580 	.word	0x20000580
     9e0:	200005a0 	.word	0x200005a0

000009e4 <_dma_init>:

/**
 * \brief Initialize DMAC
 */
int32_t _dma_init(struct _dma_dev * *dev)
{
     9e4:	b5f0      	push	{r4, r5, r6, r7, lr}
     9e6:	4647      	mov	r7, r8
     9e8:	b480      	push	{r7}
     9ea:	b08a      	sub	sp, #40	; 0x28
     9ec:	1c05      	adds	r5, r0, #0
	void *hw;
	ASSERT(dev);
     9ee:	1e43      	subs	r3, r0, #1
     9f0:	4198      	sbcs	r0, r3
     9f2:	b2c0      	uxtb	r0, r0
     9f4:	4933      	ldr	r1, [pc, #204]	; (ac4 <_dma_init+0xe0>)
     9f6:	2275      	movs	r2, #117	; 0x75
     9f8:	4b33      	ldr	r3, [pc, #204]	; (ac8 <_dma_init+0xe4>)
     9fa:	4798      	blx	r3

	*dev = &device;
     9fc:	4b33      	ldr	r3, [pc, #204]	; (acc <_dma_init+0xe8>)
     9fe:	602b      	str	r3, [r5, #0]

	if (!initialized) {
     a00:	7b1b      	ldrb	r3, [r3, #12]
     a02:	2b00      	cmp	r3, #0
     a04:	d159      	bne.n	aba <_dma_init+0xd6>
		initialized = true;
     a06:	4b31      	ldr	r3, [pc, #196]	; (acc <_dma_init+0xe8>)
     a08:	2201      	movs	r2, #1
     a0a:	4690      	mov	r8, r2
     a0c:	731a      	strb	r2, [r3, #12]
		device.hw = DMAC;
     a0e:	4a30      	ldr	r2, [pc, #192]	; (ad0 <_dma_init+0xec>)
     a10:	609a      	str	r2, [r3, #8]
		device.irq.handler = _dma_handler;
     a12:	4a30      	ldr	r2, [pc, #192]	; (ad4 <_dma_init+0xf0>)
     a14:	601a      	str	r2, [r3, #0]
		device.irq.parameter = (void *)( dev );
     a16:	605d      	str	r5, [r3, #4]
		hw = ( *dev )->hw;
     a18:	682b      	ldr	r3, [r5, #0]
     a1a:	689c      	ldr	r4, [r3, #8]
	DMAC_CRITICAL_SECTION_LEAVE()
}

static inline void hri_dmac_clear_CTRL_DMAENABLE_bit(void *const hw)
{
	DMAC_CRITICAL_SECTION_ENTER()
     a1c:	a806      	add	r0, sp, #24
     a1e:	4f2e      	ldr	r7, [pc, #184]	; (ad8 <_dma_init+0xf4>)
     a20:	47b8      	blx	r7
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
     a22:	8823      	ldrh	r3, [r4, #0]
     a24:	2202      	movs	r2, #2
     a26:	4393      	bics	r3, r2
     a28:	8023      	strh	r3, [r4, #0]

	DMAC_CRITICAL_SECTION_LEAVE()
     a2a:	a806      	add	r0, sp, #24
     a2c:	4e2b      	ldr	r6, [pc, #172]	; (adc <_dma_init+0xf8>)
     a2e:	47b0      	blx	r6
	DMAC_CRITICAL_SECTION_LEAVE()
}

static inline void hri_dmac_clear_CTRL_CRCENABLE_bit(void *const hw)
{
	DMAC_CRITICAL_SECTION_ENTER()
     a30:	a807      	add	r0, sp, #28
     a32:	47b8      	blx	r7
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_CRCENABLE;
     a34:	8823      	ldrh	r3, [r4, #0]
     a36:	2204      	movs	r2, #4
     a38:	4393      	bics	r3, r2
     a3a:	8023      	strh	r3, [r4, #0]

	DMAC_CRITICAL_SECTION_LEAVE()
     a3c:	a807      	add	r0, sp, #28
     a3e:	47b0      	blx	r6
	return (bool)tmp;
}

static inline void hri_dmac_set_CHCTRLA_SWRST_bit(void *const hw)
{
	DMAC_CRITICAL_SECTION_ENTER()
     a40:	a808      	add	r0, sp, #32
     a42:	47b8      	blx	r7
	((Dmac *)hw)->CHCTRLA.reg |= DMAC_CHCTRLA_SWRST;
     a44:	2240      	movs	r2, #64	; 0x40
     a46:	5ca1      	ldrb	r1, [r4, r2]
     a48:	2301      	movs	r3, #1
     a4a:	430b      	orrs	r3, r1
     a4c:	54a3      	strb	r3, [r4, r2]

	DMAC_CRITICAL_SECTION_LEAVE()
     a4e:	a808      	add	r0, sp, #32
     a50:	47b0      	blx	r6
	DMAC_CRITICAL_SECTION_LEAVE()
}

static inline void hri_dmac_write_BASEADDR_reg(void *const hw, const hri_dmac_baseaddr_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER()
     a52:	a801      	add	r0, sp, #4
     a54:	47b8      	blx	r7
	((Dmac *)hw)->BASEADDR.reg = data;
     a56:	4b22      	ldr	r3, [pc, #136]	; (ae0 <_dma_init+0xfc>)
     a58:	6363      	str	r3, [r4, #52]	; 0x34
	DMAC_CRITICAL_SECTION_LEAVE()
     a5a:	a801      	add	r0, sp, #4
     a5c:	47b0      	blx	r6
	DMAC_CRITICAL_SECTION_LEAVE()
}

static inline void hri_dmac_write_WRBADDR_reg(void *const hw, const hri_dmac_wrbaddr_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER()
     a5e:	a802      	add	r0, sp, #8
     a60:	47b8      	blx	r7
	((Dmac *)hw)->WRBADDR.reg = data;
     a62:	4b20      	ldr	r3, [pc, #128]	; (ae4 <_dma_init+0x100>)
     a64:	63a3      	str	r3, [r4, #56]	; 0x38
	DMAC_CRITICAL_SECTION_LEAVE()
     a66:	a802      	add	r0, sp, #8
     a68:	47b0      	blx	r6
	DMAC_CRITICAL_SECTION_LEAVE()
}

static inline void hri_dmac_write_CTRL_reg(void *const hw, const hri_dmac_ctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER()
     a6a:	a803      	add	r0, sp, #12
     a6c:	47b8      	blx	r7
	((Dmac *)hw)->CTRL.reg = data;
     a6e:	23f0      	movs	r3, #240	; 0xf0
     a70:	011b      	lsls	r3, r3, #4
     a72:	8023      	strh	r3, [r4, #0]
	DMAC_CRITICAL_SECTION_LEAVE()
     a74:	a803      	add	r0, sp, #12
     a76:	47b0      	blx	r6
	DMAC_CRITICAL_SECTION_LEAVE()
}

static inline void hri_dmac_write_DBGCTRL_reg(void *const hw, const hri_dmac_dbgctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER()
     a78:	a804      	add	r0, sp, #16
     a7a:	47b8      	blx	r7
	((Dmac *)hw)->DBGCTRL.reg = data;
     a7c:	4643      	mov	r3, r8
     a7e:	7363      	strb	r3, [r4, #13]
	DMAC_CRITICAL_SECTION_LEAVE()
     a80:	a804      	add	r0, sp, #16
     a82:	47b0      	blx	r6
	DMAC_CRITICAL_SECTION_LEAVE()
}

static inline void hri_dmac_write_PRICTRL0_reg(void *const hw, const hri_dmac_prictrl0_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER()
     a84:	a805      	add	r0, sp, #20
     a86:	47b8      	blx	r7
	((Dmac *)hw)->PRICTRL0.reg = data;
     a88:	2300      	movs	r3, #0
     a8a:	6163      	str	r3, [r4, #20]
	DMAC_CRITICAL_SECTION_LEAVE()
     a8c:	a805      	add	r0, sp, #20
     a8e:	47b0      	blx	r6
	DMAC_CRITICAL_SECTION_LEAVE()
}

static inline void hri_dmac_set_CTRL_DMAENABLE_bit(void *const hw)
{
	DMAC_CRITICAL_SECTION_ENTER()
     a90:	a809      	add	r0, sp, #36	; 0x24
     a92:	47b8      	blx	r7
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
     a94:	8822      	ldrh	r2, [r4, #0]
     a96:	2302      	movs	r3, #2
     a98:	4313      	orrs	r3, r2
     a9a:	8023      	strh	r3, [r4, #0]

	DMAC_CRITICAL_SECTION_LEAVE()
     a9c:	a809      	add	r0, sp, #36	; 0x24
     a9e:	47b0      	blx	r6
				( 0x0 << DMAC_PRICTRL0_RRLVLEN2_Pos ) |
				( 0x0 << DMAC_PRICTRL0_RRLVLEN3_Pos ));

		hri_dmac_set_CTRL_DMAENABLE_bit(hw);

		_irq_disable(DMAC_IRQn);
     aa0:	2006      	movs	r0, #6
     aa2:	4b11      	ldr	r3, [pc, #68]	; (ae8 <_dma_init+0x104>)
     aa4:	4798      	blx	r3
		_irq_clear(DMAC_IRQn);
     aa6:	2006      	movs	r0, #6
     aa8:	4b10      	ldr	r3, [pc, #64]	; (aec <_dma_init+0x108>)
     aaa:	4798      	blx	r3
		_irq_register(DMAC_IRQn, &( *dev )->irq);
     aac:	6829      	ldr	r1, [r5, #0]
     aae:	2006      	movs	r0, #6
     ab0:	4b0f      	ldr	r3, [pc, #60]	; (af0 <_dma_init+0x10c>)
     ab2:	4798      	blx	r3
		_irq_enable(DMAC_IRQn);
     ab4:	2006      	movs	r0, #6
     ab6:	4b0f      	ldr	r3, [pc, #60]	; (af4 <_dma_init+0x110>)
     ab8:	4798      	blx	r3
	}

	return ERR_NONE;
}
     aba:	2000      	movs	r0, #0
     abc:	b00a      	add	sp, #40	; 0x28
     abe:	bc04      	pop	{r2}
     ac0:	4690      	mov	r8, r2
     ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ac4:	00002f70 	.word	0x00002f70
     ac8:	00002d79 	.word	0x00002d79
     acc:	2000003c 	.word	0x2000003c
     ad0:	41004800 	.word	0x41004800
     ad4:	00000909 	.word	0x00000909
     ad8:	000025b9 	.word	0x000025b9
     adc:	000025c9 	.word	0x000025c9
     ae0:	20000580 	.word	0x20000580
     ae4:	200005a0 	.word	0x200005a0
     ae8:	000007b9 	.word	0x000007b9
     aec:	000007d1 	.word	0x000007d1
     af0:	000007fd 	.word	0x000007fd
     af4:	000007e9 	.word	0x000007e9

00000af8 <_dma_allocate>:
 * \brief Allocate resource for DMAC
 */
int32_t _dma_allocate(struct _dma_dev *const dev,
		struct _dma_resource * *const resource,
		uint32_t num)
{
     af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     afa:	465f      	mov	r7, fp
     afc:	4656      	mov	r6, sl
     afe:	464d      	mov	r5, r9
     b00:	4644      	mov	r4, r8
     b02:	b4f0      	push	{r4, r5, r6, r7}
     b04:	4688      	mov	r8, r1
     b06:	1c14      	adds	r4, r2, #0
	uint8_t channel;
	uint8_t index = 0;
	DmacDescriptor *tmp_descriptor = NULL;

	ASSERT(dev);
     b08:	1e43      	subs	r3, r0, #1
     b0a:	4198      	sbcs	r0, r3
     b0c:	b2c0      	uxtb	r0, r0
     b0e:	4945      	ldr	r1, [pc, #276]	; (c24 <_dma_allocate+0x12c>)
     b10:	22c2      	movs	r2, #194	; 0xc2
     b12:	4b45      	ldr	r3, [pc, #276]	; (c28 <_dma_allocate+0x130>)
     b14:	4798      	blx	r3

	for (channel = 0; channel < dmac_ch_used; channel++) {
     b16:	4b45      	ldr	r3, [pc, #276]	; (c2c <_dma_allocate+0x134>)
     b18:	6818      	ldr	r0, [r3, #0]
     b1a:	2800      	cmp	r0, #0
     b1c:	d072      	beq.n	c04 <_dma_allocate+0x10c>
		if (!( channel_mask & ( 1 << channel ))) {
     b1e:	4b44      	ldr	r3, [pc, #272]	; (c30 <_dma_allocate+0x138>)
     b20:	6919      	ldr	r1, [r3, #16]
     b22:	2501      	movs	r5, #1
     b24:	400d      	ands	r5, r1
     b26:	d008      	beq.n	b3a <_dma_allocate+0x42>
     b28:	2300      	movs	r3, #0
     b2a:	2701      	movs	r7, #1
     b2c:	e01a      	b.n	b64 <_dma_allocate+0x6c>
     b2e:	1c1e      	adds	r6, r3, #0
     b30:	1c3a      	adds	r2, r7, #0
     b32:	409a      	lsls	r2, r3
     b34:	4211      	tst	r1, r2
     b36:	d115      	bne.n	b64 <_dma_allocate+0x6c>
     b38:	e001      	b.n	b3e <_dma_allocate+0x46>
     b3a:	2201      	movs	r2, #1
     b3c:	2600      	movs	r6, #0
			*resource = &_resource[channel];
     b3e:	00f3      	lsls	r3, r6, #3
     b40:	1b98      	subs	r0, r3, r6
     b42:	0080      	lsls	r0, r0, #2
     b44:	4f3b      	ldr	r7, [pc, #236]	; (c34 <_dma_allocate+0x13c>)
     b46:	46bc      	mov	ip, r7
     b48:	4460      	add	r0, ip
     b4a:	4647      	mov	r7, r8
     b4c:	6038      	str	r0, [r7, #0]
			(*resource)->id = channel;
     b4e:	1b9b      	subs	r3, r3, r6
     b50:	009b      	lsls	r3, r3, #2
     b52:	4660      	mov	r0, ip
     b54:	501d      	str	r5, [r3, r0]
			tmp_descriptor = &_descriptor_section[channel];
     b56:	0136      	lsls	r6, r6, #4
     b58:	4b37      	ldr	r3, [pc, #220]	; (c38 <_dma_allocate+0x140>)
     b5a:	18f6      	adds	r6, r6, r3
			channel_mask |= ( 1 << channel );
     b5c:	430a      	orrs	r2, r1
     b5e:	4b34      	ldr	r3, [pc, #208]	; (c30 <_dma_allocate+0x138>)
     b60:	611a      	str	r2, [r3, #16]
			break;
     b62:	e005      	b.n	b70 <_dma_allocate+0x78>
	uint8_t index = 0;
	DmacDescriptor *tmp_descriptor = NULL;

	ASSERT(dev);

	for (channel = 0; channel < dmac_ch_used; channel++) {
     b64:	3301      	adds	r3, #1
     b66:	b2db      	uxtb	r3, r3
     b68:	1e1d      	subs	r5, r3, #0
     b6a:	4285      	cmp	r5, r0
     b6c:	d3df      	bcc.n	b2e <_dma_allocate+0x36>
		struct _dma_resource * *const resource,
		uint32_t num)
{
	uint8_t channel;
	uint8_t index = 0;
	DmacDescriptor *tmp_descriptor = NULL;
     b6e:	2600      	movs	r6, #0
			channel_mask |= ( 1 << channel );
			break;
		}
	}

	if (num != 1)
     b70:	2c01      	cmp	r4, #1
     b72:	d02d      	beq.n	bd0 <_dma_allocate+0xd8>
	{
		for (;( index < ( num - 1 )) &&
     b74:	1e62      	subs	r2, r4, #1
     b76:	2a00      	cmp	r2, #0
     b78:	d02c      	beq.n	bd4 <_dma_allocate+0xdc>
				( index < ( dmac_resource_used - dmac_ch_used )); index++) {
     b7a:	4b30      	ldr	r3, [pc, #192]	; (c3c <_dma_allocate+0x144>)
     b7c:	681f      	ldr	r7, [r3, #0]
     b7e:	4b2b      	ldr	r3, [pc, #172]	; (c2c <_dma_allocate+0x134>)
     b80:	681b      	ldr	r3, [r3, #0]
     b82:	4698      	mov	r8, r3
		}
	}

	if (num != 1)
	{
		for (;( index < ( num - 1 )) &&
     b84:	429f      	cmp	r7, r3
     b86:	d031      	beq.n	bec <_dma_allocate+0xf4>
     b88:	4b29      	ldr	r3, [pc, #164]	; (c30 <_dma_allocate+0x138>)
     b8a:	695c      	ldr	r4, [r3, #20]
				( index < ( dmac_resource_used - dmac_ch_used )); index++) {
     b8c:	4643      	mov	r3, r8
     b8e:	1afb      	subs	r3, r7, r3
     b90:	469b      	mov	fp, r3
     b92:	2100      	movs	r1, #0
     b94:	2300      	movs	r3, #0
			if (!( memory_mask & ( 1 << index ))) {
     b96:	2001      	movs	r0, #1
     b98:	4684      	mov	ip, r0
				tmp_descriptor->DESCADDR.reg =
						(uint32_t)&_resource[dmac_ch_used + index];
     b9a:	4826      	ldr	r0, [pc, #152]	; (c34 <_dma_allocate+0x13c>)
     b9c:	4681      	mov	r9, r0

	if (num != 1)
	{
		for (;( index < ( num - 1 )) &&
				( index < ( dmac_resource_used - dmac_ch_used )); index++) {
			if (!( memory_mask & ( 1 << index ))) {
     b9e:	4660      	mov	r0, ip
     ba0:	4098      	lsls	r0, r3
     ba2:	4204      	tst	r4, r0
     ba4:	d107      	bne.n	bb6 <_dma_allocate+0xbe>
				tmp_descriptor->DESCADDR.reg =
						(uint32_t)&_resource[dmac_ch_used + index];
     ba6:	4441      	add	r1, r8
     ba8:	00cf      	lsls	r7, r1, #3
     baa:	1a79      	subs	r1, r7, r1
     bac:	0089      	lsls	r1, r1, #2
     bae:	4449      	add	r1, r9
	if (num != 1)
	{
		for (;( index < ( num - 1 )) &&
				( index < ( dmac_resource_used - dmac_ch_used )); index++) {
			if (!( memory_mask & ( 1 << index ))) {
				tmp_descriptor->DESCADDR.reg =
     bb0:	60f1      	str	r1, [r6, #12]
						(uint32_t)&_resource[dmac_ch_used + index];
				tmp_descriptor = (DmacDescriptor *)tmp_descriptor->DESCADDR.reg;
     bb2:	68f6      	ldr	r6, [r6, #12]
				memory_mask |= ( 1 << index );
     bb4:	4304      	orrs	r4, r0
	}

	if (num != 1)
	{
		for (;( index < ( num - 1 )) &&
				( index < ( dmac_resource_used - dmac_ch_used )); index++) {
     bb6:	3301      	adds	r3, #1
     bb8:	b2db      	uxtb	r3, r3
		}
	}

	if (num != 1)
	{
		for (;( index < ( num - 1 )) &&
     bba:	1e19      	subs	r1, r3, #0
     bbc:	4291      	cmp	r1, r2
     bbe:	d302      	bcc.n	bc6 <_dma_allocate+0xce>
     bc0:	4a1b      	ldr	r2, [pc, #108]	; (c30 <_dma_allocate+0x138>)
     bc2:	6154      	str	r4, [r2, #20]
     bc4:	e007      	b.n	bd6 <_dma_allocate+0xde>
     bc6:	455b      	cmp	r3, fp
     bc8:	d3e9      	bcc.n	b9e <_dma_allocate+0xa6>
     bca:	4a19      	ldr	r2, [pc, #100]	; (c30 <_dma_allocate+0x138>)
     bcc:	6154      	str	r4, [r2, #20]
     bce:	e002      	b.n	bd6 <_dma_allocate+0xde>
int32_t _dma_allocate(struct _dma_dev *const dev,
		struct _dma_resource * *const resource,
		uint32_t num)
{
	uint8_t channel;
	uint8_t index = 0;
     bd0:	2300      	movs	r3, #0
     bd2:	e000      	b.n	bd6 <_dma_allocate+0xde>
		}
	}

	if (num != 1)
	{
		for (;( index < ( num - 1 )) &&
     bd4:	2300      	movs	r3, #0
				memory_mask |= ( 1 << index );
			}
		}
	}

	if (( channel == dmac_ch_used ) ||
     bd6:	4a15      	ldr	r2, [pc, #84]	; (c2c <_dma_allocate+0x134>)
     bd8:	6811      	ldr	r1, [r2, #0]
     bda:	42a9      	cmp	r1, r5
     bdc:	d009      	beq.n	bf2 <_dma_allocate+0xfa>
			( index == ( dmac_resource_used - dmac_ch_used ))) {
     bde:	4a17      	ldr	r2, [pc, #92]	; (c3c <_dma_allocate+0x144>)
     be0:	6812      	ldr	r2, [r2, #0]
     be2:	1a52      	subs	r2, r2, r1
				memory_mask |= ( 1 << index );
			}
		}
	}

	if (( channel == dmac_ch_used ) ||
     be4:	4293      	cmp	r3, r2
     be6:	d007      	beq.n	bf8 <_dma_allocate+0x100>
			( index == ( dmac_resource_used - dmac_ch_used ))) {
		return ERR_NO_RESOURCE;
	}

	return ERR_NONE;
     be8:	2000      	movs	r0, #0
     bea:	e014      	b.n	c16 <_dma_allocate+0x11e>
		}
	}

	if (( channel == dmac_ch_used ) ||
			( index == ( dmac_resource_used - dmac_ch_used ))) {
		return ERR_NO_RESOURCE;
     bec:	201c      	movs	r0, #28
     bee:	4240      	negs	r0, r0
     bf0:	e011      	b.n	c16 <_dma_allocate+0x11e>
     bf2:	201c      	movs	r0, #28
     bf4:	4240      	negs	r0, r0
     bf6:	e00e      	b.n	c16 <_dma_allocate+0x11e>
     bf8:	201c      	movs	r0, #28
     bfa:	4240      	negs	r0, r0
     bfc:	e00b      	b.n	c16 <_dma_allocate+0x11e>
     bfe:	201c      	movs	r0, #28
     c00:	4240      	negs	r0, r0
     c02:	e008      	b.n	c16 <_dma_allocate+0x11e>
			channel_mask |= ( 1 << channel );
			break;
		}
	}

	if (num != 1)
     c04:	2c01      	cmp	r4, #1
     c06:	d0fa      	beq.n	bfe <_dma_allocate+0x106>
	{
		for (;( index < ( num - 1 )) &&
     c08:	1e62      	subs	r2, r4, #1
	uint8_t index = 0;
	DmacDescriptor *tmp_descriptor = NULL;

	ASSERT(dev);

	for (channel = 0; channel < dmac_ch_used; channel++) {
     c0a:	1c05      	adds	r5, r0, #0
		struct _dma_resource * *const resource,
		uint32_t num)
{
	uint8_t channel;
	uint8_t index = 0;
	DmacDescriptor *tmp_descriptor = NULL;
     c0c:	2600      	movs	r6, #0
		}
	}

	if (num != 1)
	{
		for (;( index < ( num - 1 )) &&
     c0e:	2a00      	cmp	r2, #0
     c10:	d1b3      	bne.n	b7a <_dma_allocate+0x82>
		}
	}

	if (( channel == dmac_ch_used ) ||
			( index == ( dmac_resource_used - dmac_ch_used ))) {
		return ERR_NO_RESOURCE;
     c12:	201c      	movs	r0, #28
     c14:	4240      	negs	r0, r0
	}

	return ERR_NONE;
}
     c16:	bc3c      	pop	{r2, r3, r4, r5}
     c18:	4690      	mov	r8, r2
     c1a:	4699      	mov	r9, r3
     c1c:	46a2      	mov	sl, r4
     c1e:	46ab      	mov	fp, r5
     c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c22:	46c0      	nop			; (mov r8, r8)
     c24:	00002f70 	.word	0x00002f70
     c28:	00002d79 	.word	0x00002d79
     c2c:	20000010 	.word	0x20000010
     c30:	2000003c 	.word	0x2000003c
     c34:	200005e0 	.word	0x200005e0
     c38:	20000580 	.word	0x20000580
     c3c:	2000000c 	.word	0x2000000c

00000c40 <_dma_config_resource>:
 */
int32_t _dma_config_resource(struct _dma_dev *const dev,
		struct _dma_resource *const resource,
		void *const peripheral_dev,
		uint32_t const trigger)
{
     c40:	b5f0      	push	{r4, r5, r6, r7, lr}
     c42:	465f      	mov	r7, fp
     c44:	4656      	mov	r6, sl
     c46:	b4c0      	push	{r6, r7}
     c48:	b08b      	sub	sp, #44	; 0x2c
     c4a:	1c0d      	adds	r5, r1, #0
     c4c:	9200      	str	r2, [sp, #0]
     c4e:	9301      	str	r3, [sp, #4]
	void *hw = dev->hw;
     c50:	6884      	ldr	r4, [r0, #8]
	struct dma_configuration *config;
	uint32_t channel = resource->id;
     c52:	680e      	ldr	r6, [r1, #0]
	struct _dma_resource *tmp_resource = &_resource[channel];

	ASSERT(dev);
     c54:	1e43      	subs	r3, r0, #1
     c56:	4198      	sbcs	r0, r3
     c58:	b2c0      	uxtb	r0, r0
     c5a:	4935      	ldr	r1, [pc, #212]	; (d30 <_dma_config_resource+0xf0>)
     c5c:	228a      	movs	r2, #138	; 0x8a
     c5e:	0052      	lsls	r2, r2, #1
     c60:	4b34      	ldr	r3, [pc, #208]	; (d34 <_dma_config_resource+0xf4>)
     c62:	4798      	blx	r3

	config = (struct dma_configuration *)resource->config;
     c64:	692d      	ldr	r5, [r5, #16]
     c66:	46aa      	mov	sl, r5

	hri_dmac_write_CHID_reg(hw, channel);
     c68:	b2f5      	uxtb	r5, r6
	DMAC_CRITICAL_SECTION_LEAVE()
}

static inline void hri_dmac_write_CHID_reg(void *const hw, const hri_dmac_chid_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER()
     c6a:	a803      	add	r0, sp, #12
     c6c:	4f32      	ldr	r7, [pc, #200]	; (d38 <_dma_config_resource+0xf8>)
     c6e:	47b8      	blx	r7
	((Dmac *)hw)->CHID.reg = data;
     c70:	233f      	movs	r3, #63	; 0x3f
     c72:	54e5      	strb	r5, [r4, r3]
	DMAC_CRITICAL_SECTION_LEAVE()
     c74:	a803      	add	r0, sp, #12
     c76:	4d31      	ldr	r5, [pc, #196]	; (d3c <_dma_config_resource+0xfc>)
     c78:	47a8      	blx	r5
	DMAC_CRITICAL_SECTION_LEAVE()
}

static inline void hri_dmac_clear_CHCTRLA_ENABLE_bit(void *const hw)
{
	DMAC_CRITICAL_SECTION_ENTER()
     c7a:	a804      	add	r0, sp, #16
     c7c:	47b8      	blx	r7
	((Dmac *)hw)->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
     c7e:	2340      	movs	r3, #64	; 0x40
     c80:	469b      	mov	fp, r3
     c82:	5ce3      	ldrb	r3, [r4, r3]
     c84:	2202      	movs	r2, #2
     c86:	4393      	bics	r3, r2
     c88:	465a      	mov	r2, fp
     c8a:	54a3      	strb	r3, [r4, r2]

	DMAC_CRITICAL_SECTION_LEAVE()
     c8c:	a804      	add	r0, sp, #16
     c8e:	47a8      	blx	r5
	return (bool)tmp;
}

static inline void hri_dmac_set_CHCTRLA_SWRST_bit(void *const hw)
{
	DMAC_CRITICAL_SECTION_ENTER()
     c90:	a805      	add	r0, sp, #20
     c92:	47b8      	blx	r7
	((Dmac *)hw)->CHCTRLA.reg |= DMAC_CHCTRLA_SWRST;
     c94:	465b      	mov	r3, fp
     c96:	5ce2      	ldrb	r2, [r4, r3]
     c98:	3b3f      	subs	r3, #63	; 0x3f
     c9a:	4313      	orrs	r3, r2
     c9c:	465a      	mov	r2, fp
     c9e:	54a3      	strb	r3, [r4, r2]

	DMAC_CRITICAL_SECTION_LEAVE()
     ca0:	a805      	add	r0, sp, #20
     ca2:	47a8      	blx	r5
	DMAC_CRITICAL_SECTION_LEAVE()
}

static inline void hri_dmac_clear_SWTRIGCTRL_reg(void *const hw, const hri_dmac_swtrigctrl_reg_t mask)
{
	DMAC_CRITICAL_SECTION_ENTER()
     ca4:	a806      	add	r0, sp, #24
     ca6:	47b8      	blx	r7
	((Dmac *)hw)->SWTRIGCTRL.reg &= ~mask;
     ca8:	6923      	ldr	r3, [r4, #16]
	hri_dmac_clear_CHCTRLA_ENABLE_bit(hw);
	hri_dmac_set_CHCTRLA_SWRST_bit(hw);
	hri_dmac_clear_SWTRIGCTRL_reg(hw, 1 << channel);
     caa:	2201      	movs	r2, #1
     cac:	40b2      	lsls	r2, r6
     cae:	4393      	bics	r3, r2
     cb0:	6123      	str	r3, [r4, #16]
	DMAC_CRITICAL_SECTION_LEAVE()
     cb2:	a806      	add	r0, sp, #24
     cb4:	47a8      	blx	r5

	hri_dmac_write_CHCTRLB_LVL_bf(hw, config->lvl);
     cb6:	4653      	mov	r3, sl
     cb8:	785b      	ldrb	r3, [r3, #1]
     cba:	469b      	mov	fp, r3

static inline void hri_dmac_write_CHCTRLB_LVL_bf(void *const hw, const hri_dmac_chctrlb_reg_t data)
{
	uint32_t tmp;

	DMAC_CRITICAL_SECTION_ENTER()
     cbc:	a807      	add	r0, sp, #28
     cbe:	47b8      	blx	r7
	tmp = ((Dmac *)hw)->CHCTRLB.reg;
     cc0:	6c62      	ldr	r2, [r4, #68]	; 0x44
	tmp &= ~DMAC_CHCTRLB_LVL_Msk;
     cc2:	2160      	movs	r1, #96	; 0x60
     cc4:	438a      	bics	r2, r1
	tmp |= DMAC_CHCTRLB_LVL(data);
     cc6:	465b      	mov	r3, fp
     cc8:	015b      	lsls	r3, r3, #5
     cca:	400b      	ands	r3, r1
     ccc:	4313      	orrs	r3, r2
	((Dmac *)hw)->CHCTRLB.reg = tmp;
     cce:	6463      	str	r3, [r4, #68]	; 0x44
	DMAC_CRITICAL_SECTION_LEAVE()
     cd0:	a807      	add	r0, sp, #28
     cd2:	47a8      	blx	r5
	hri_dmac_write_CHCTRLB_TRIGACT_bf(hw, config->trigact);
     cd4:	4653      	mov	r3, sl
     cd6:	789b      	ldrb	r3, [r3, #2]
     cd8:	469a      	mov	sl, r3

static inline void hri_dmac_write_CHCTRLB_TRIGACT_bf(void *const hw, const hri_dmac_chctrlb_reg_t data)
{
	uint32_t tmp;

	DMAC_CRITICAL_SECTION_ENTER()
     cda:	a808      	add	r0, sp, #32
     cdc:	47b8      	blx	r7
	tmp = ((Dmac *)hw)->CHCTRLB.reg;
     cde:	6c62      	ldr	r2, [r4, #68]	; 0x44
	tmp &= ~DMAC_CHCTRLB_TRIGACT_Msk;
     ce0:	4b17      	ldr	r3, [pc, #92]	; (d40 <_dma_config_resource+0x100>)
     ce2:	401a      	ands	r2, r3
	tmp |= DMAC_CHCTRLB_TRIGACT(data);
     ce4:	4653      	mov	r3, sl
     ce6:	059b      	lsls	r3, r3, #22
     ce8:	21c0      	movs	r1, #192	; 0xc0
     cea:	0409      	lsls	r1, r1, #16
     cec:	400b      	ands	r3, r1
     cee:	4313      	orrs	r3, r2
	((Dmac *)hw)->CHCTRLB.reg = tmp;
     cf0:	6463      	str	r3, [r4, #68]	; 0x44
	DMAC_CRITICAL_SECTION_LEAVE()
     cf2:	a808      	add	r0, sp, #32
     cf4:	47a8      	blx	r5

	hri_dmac_write_CHCTRLB_TRIGSRC_bf(hw,
			tmp_resource->get_trigger_num(peripheral_dev, trigger));
     cf6:	00f3      	lsls	r3, r6, #3
     cf8:	1b9b      	subs	r3, r3, r6
     cfa:	009b      	lsls	r3, r3, #2
     cfc:	4a11      	ldr	r2, [pc, #68]	; (d44 <_dma_config_resource+0x104>)
     cfe:	18d3      	adds	r3, r2, r3
     d00:	695b      	ldr	r3, [r3, #20]
     d02:	9800      	ldr	r0, [sp, #0]
     d04:	9901      	ldr	r1, [sp, #4]
     d06:	4798      	blx	r3
     d08:	1c06      	adds	r6, r0, #0

static inline void hri_dmac_write_CHCTRLB_TRIGSRC_bf(void *const hw, const hri_dmac_chctrlb_reg_t data)
{
	uint32_t tmp;

	DMAC_CRITICAL_SECTION_ENTER()
     d0a:	a809      	add	r0, sp, #36	; 0x24
     d0c:	47b8      	blx	r7
	tmp = ((Dmac *)hw)->CHCTRLB.reg;
     d0e:	6c60      	ldr	r0, [r4, #68]	; 0x44
	tmp &= ~DMAC_CHCTRLB_TRIGSRC_Msk;
     d10:	4b0d      	ldr	r3, [pc, #52]	; (d48 <_dma_config_resource+0x108>)
     d12:	4003      	ands	r3, r0
	tmp |= DMAC_CHCTRLB_TRIGSRC(data);
     d14:	0230      	lsls	r0, r6, #8
     d16:	22fc      	movs	r2, #252	; 0xfc
     d18:	0192      	lsls	r2, r2, #6
     d1a:	4010      	ands	r0, r2
     d1c:	4318      	orrs	r0, r3
	((Dmac *)hw)->CHCTRLB.reg = tmp;
     d1e:	6460      	str	r0, [r4, #68]	; 0x44
	DMAC_CRITICAL_SECTION_LEAVE()
     d20:	a809      	add	r0, sp, #36	; 0x24
     d22:	47a8      	blx	r5

	return ERR_NONE;
}
     d24:	2000      	movs	r0, #0
     d26:	b00b      	add	sp, #44	; 0x2c
     d28:	bc0c      	pop	{r2, r3}
     d2a:	4692      	mov	sl, r2
     d2c:	469b      	mov	fp, r3
     d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d30:	00002f70 	.word	0x00002f70
     d34:	00002d79 	.word	0x00002d79
     d38:	000025b9 	.word	0x000025b9
     d3c:	000025c9 	.word	0x000025c9
     d40:	ff3fffff 	.word	0xff3fffff
     d44:	200005e0 	.word	0x200005e0
     d48:	ffffc0ff 	.word	0xffffc0ff

00000d4c <_memory_fill_dma_pointer>:
/**
 * \brief fill function pointers for software triggher number retrieve
 */
void _memory_fill_dma_pointer(dma_get_trigger_number_t *get_trigger_num)
{
	*get_trigger_num = get_trigger_source;
     d4c:	4b01      	ldr	r3, [pc, #4]	; (d54 <_memory_fill_dma_pointer+0x8>)
     d4e:	6003      	str	r3, [r0, #0]
}
     d50:	4770      	bx	lr
     d52:	46c0      	nop			; (mov r8, r8)
     d54:	00000901 	.word	0x00000901

00000d58 <_memory_fill_dma_config_pointer>:
/**
 * \brief Retrieve pointers to memory dma configuration
 */
void _memory_fill_dma_config_pointer(void * *config)
{
	*config = _memory_config;
     d58:	4b01      	ldr	r3, [pc, #4]	; (d60 <_memory_fill_dma_config_pointer+0x8>)
     d5a:	6003      	str	r3, [r0, #0]
}
     d5c:	4770      	bx	lr
     d5e:	46c0      	nop			; (mov r8, r8)
     d60:	20000014 	.word	0x20000014

00000d64 <_ext_irq_handler>:

/**
 * \brief EIC interrupt handler
 */
static void _ext_irq_handler(void *p)
{
     d64:	b5f0      	push	{r4, r5, r6, r7, lr}
     d66:	4657      	mov	r7, sl
     d68:	464e      	mov	r6, r9
     d6a:	4645      	mov	r5, r8
     d6c:	b4e0      	push	{r5, r6, r7}
     d6e:	b082      	sub	sp, #8
        return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw) 
{
        return ((Eic *)hw)->INTFLAG.reg;
     d70:	4b2a      	ldr	r3, [pc, #168]	; (e1c <_ext_irq_handler+0xb8>)
     d72:	691a      	ldr	r2, [r3, #16]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
     d74:	9201      	str	r2, [sp, #4]
	int8_t pos;
	uint32_t pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
     d76:	9a01      	ldr	r2, [sp, #4]
}

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask) 
{
        ((Eic *)hw)->INTFLAG.reg = mask;
     d78:	611a      	str	r2, [r3, #16]

	ASSERT(callback);
     d7a:	4b29      	ldr	r3, [pc, #164]	; (e20 <_ext_irq_handler+0xbc>)
     d7c:	6818      	ldr	r0, [r3, #0]
     d7e:	1e43      	subs	r3, r0, #1
     d80:	4198      	sbcs	r0, r3
     d82:	b2c0      	uxtb	r0, r0
     d84:	4927      	ldr	r1, [pc, #156]	; (e24 <_ext_irq_handler+0xc0>)
     d86:	2287      	movs	r2, #135	; 0x87
     d88:	0052      	lsls	r2, r2, #1
     d8a:	4b27      	ldr	r3, [pc, #156]	; (e28 <_ext_irq_handler+0xc4>)
     d8c:	4798      	blx	r3

	while (flags) {
     d8e:	9b01      	ldr	r3, [sp, #4]
     d90:	2b00      	cmp	r3, #0
     d92:	d03d      	beq.n	e10 <_ext_irq_handler+0xac>
		pos = ffs(flags) - 1;
     d94:	4b25      	ldr	r3, [pc, #148]	; (e2c <_ext_irq_handler+0xc8>)
     d96:	469a      	mov	sl, r3
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;

			while (upper >= lower) {
				middle = ( upper + lower ) >> 1;

				if (_map[middle].extint == pos) {
     d98:	24ff      	movs	r4, #255	; 0xff
     d9a:	4d25      	ldr	r5, [pc, #148]	; (e30 <_ext_irq_handler+0xcc>)

			if (INVALID_PIN_NUMBER != pin) {
				callback(pin);
			}

			flags &= ~( 1ul << pos );
     d9c:	2601      	movs	r6, #1
			pos = ffs(flags) - 1;
     d9e:	4698      	mov	r8, r3
        return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw) 
{
        return ((Eic *)hw)->INTFLAG.reg;
     da0:	4b1e      	ldr	r3, [pc, #120]	; (e1c <_ext_irq_handler+0xb8>)
     da2:	4699      	mov	r9, r3
	hri_eic_clear_INTFLAG_reg(EIC, flags);

	ASSERT(callback);

	while (flags) {
		pos = ffs(flags) - 1;
     da4:	9801      	ldr	r0, [sp, #4]
     da6:	47d0      	blx	sl
     da8:	3801      	subs	r0, #1
     daa:	b2c0      	uxtb	r0, r0
		while (-1 != pos) {
     dac:	b243      	sxtb	r3, r0
     dae:	3301      	adds	r3, #1
     db0:	d11d      	bne.n	dee <_ext_irq_handler+0x8a>
     db2:	e024      	b.n	dfe <_ext_irq_handler+0x9a>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;

			while (upper >= lower) {
				middle = ( upper + lower ) >> 1;
     db4:	188b      	adds	r3, r1, r2
     db6:	105b      	asrs	r3, r3, #1
     db8:	b2df      	uxtb	r7, r3

				if (_map[middle].extint == pos) {
     dba:	4023      	ands	r3, r4
     dbc:	00db      	lsls	r3, r3, #3
     dbe:	5d5b      	ldrb	r3, [r3, r5]
     dc0:	4283      	cmp	r3, r0
     dc2:	d008      	beq.n	dd6 <_ext_irq_handler+0x72>
					pin = _map[middle].pin;
					break;
				}

				if (_map[middle].extint < pos) {
     dc4:	4298      	cmp	r0, r3
     dc6:	dd02      	ble.n	dce <_ext_irq_handler+0x6a>
					lower = middle + 1;
     dc8:	1c7a      	adds	r2, r7, #1
     dca:	b2d2      	uxtb	r2, r2
     dcc:	e001      	b.n	dd2 <_ext_irq_handler+0x6e>
				} else {
					upper = middle - 1;
     dce:	1e79      	subs	r1, r7, #1
     dd0:	b2c9      	uxtb	r1, r1
	while (flags) {
		pos = ffs(flags) - 1;
		while (-1 != pos) {
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;

			while (upper >= lower) {
     dd2:	4291      	cmp	r1, r2
     dd4:	d2ee      	bcs.n	db4 <_ext_irq_handler+0x50>

			if (INVALID_PIN_NUMBER != pin) {
				callback(pin);
			}

			flags &= ~( 1ul << pos );
     dd6:	9b01      	ldr	r3, [sp, #4]
     dd8:	1c32      	adds	r2, r6, #0
     dda:	4082      	lsls	r2, r0
     ddc:	4393      	bics	r3, r2
     dde:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
     de0:	9801      	ldr	r0, [sp, #4]
     de2:	47c0      	blx	r8
     de4:	3801      	subs	r0, #1
     de6:	b2c0      	uxtb	r0, r0

	ASSERT(callback);

	while (flags) {
		pos = ffs(flags) - 1;
		while (-1 != pos) {
     de8:	b243      	sxtb	r3, r0
     dea:	3301      	adds	r3, #1
     dec:	d007      	beq.n	dfe <_ext_irq_handler+0x9a>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;

			while (upper >= lower) {
				middle = ( upper + lower ) >> 1;

				if (_map[middle].extint == pos) {
     dee:	b240      	sxtb	r0, r0
     df0:	28ff      	cmp	r0, #255	; 0xff
     df2:	d0f0      	beq.n	dd6 <_ext_irq_handler+0x72>
     df4:	1c23      	adds	r3, r4, #0
     df6:	2700      	movs	r7, #0
     df8:	2100      	movs	r1, #0
     dfa:	2200      	movs	r2, #0
     dfc:	e7e2      	b.n	dc4 <_ext_irq_handler+0x60>
     dfe:	464b      	mov	r3, r9
     e00:	691b      	ldr	r3, [r3, #16]
			}

			flags &= ~( 1ul << pos );
			pos = ffs(flags) - 1;
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
     e02:	9301      	str	r3, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
     e04:	9b01      	ldr	r3, [sp, #4]
}

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask) 
{
        ((Eic *)hw)->INTFLAG.reg = mask;
     e06:	464a      	mov	r2, r9
     e08:	6113      	str	r3, [r2, #16]

	hri_eic_clear_INTFLAG_reg(EIC, flags);

	ASSERT(callback);

	while (flags) {
     e0a:	9b01      	ldr	r3, [sp, #4]
     e0c:	2b00      	cmp	r3, #0
     e0e:	d1c9      	bne.n	da4 <_ext_irq_handler+0x40>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
		hri_eic_clear_INTFLAG_reg(EIC, flags);
	}
	(void)p;
}
     e10:	b002      	add	sp, #8
     e12:	bc1c      	pop	{r2, r3, r4}
     e14:	4690      	mov	r8, r2
     e16:	4699      	mov	r9, r3
     e18:	46a2      	mov	sl, r4
     e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e1c:	40001800 	.word	0x40001800
     e20:	20000054 	.word	0x20000054
     e24:	00002fa0 	.word	0x00002fa0
     e28:	00002d79 	.word	0x00002d79
     e2c:	00002ded 	.word	0x00002ded
     e30:	00002f98 	.word	0x00002f98

00000e34 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void ( *cb )(const uint32_t pin))
{
     e34:	b538      	push	{r3, r4, r5, lr}
typedef uint8_t hri_eic_nmiflag_reg_t;
typedef uint8_t hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while(((const Eic *)hw)->STATUS.bit.SYNCBUSY);
     e36:	4a20      	ldr	r2, [pc, #128]	; (eb8 <_ext_irq_init+0x84>)
     e38:	7853      	ldrb	r3, [r2, #1]
     e3a:	09db      	lsrs	r3, r3, #7
     e3c:	d1fc      	bne.n	e38 <_ext_irq_init+0x4>
     e3e:	4a1e      	ldr	r2, [pc, #120]	; (eb8 <_ext_irq_init+0x84>)
     e40:	7853      	ldrb	r3, [r2, #1]
     e42:	09db      	lsrs	r3, r3, #7
     e44:	d1fc      	bne.n	e40 <_ext_irq_init+0xc>

static inline bool hri_eic_get_CTRL_ENABLE_bit(const void *const hw) 
{
        uint8_t tmp;
        hri_eic_wait_for_sync(hw);
        tmp = ((Eic *)hw)->CTRL.reg;
     e46:	4b1c      	ldr	r3, [pc, #112]	; (eb8 <_ext_irq_init+0x84>)
     e48:	781b      	ldrb	r3, [r3, #0]
	hri_eic_wait_for_sync(EIC);

	if (hri_eic_get_CTRL_ENABLE_bit(EIC)) {
     e4a:	079b      	lsls	r3, r3, #30
     e4c:	d431      	bmi.n	eb2 <_ext_irq_init+0x7e>
typedef uint8_t hri_eic_nmiflag_reg_t;
typedef uint8_t hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while(((const Eic *)hw)->STATUS.bit.SYNCBUSY);
     e4e:	4a1a      	ldr	r2, [pc, #104]	; (eb8 <_ext_irq_init+0x84>)
     e50:	7853      	ldrb	r3, [r2, #1]
     e52:	09db      	lsrs	r3, r3, #7
     e54:	d1fc      	bne.n	e50 <_ext_irq_init+0x1c>

static inline void hri_eic_set_CTRL_SWRST_bit(const void *const hw) 
{
        EIC_CRITICAL_SECTION_ENTER();
        hri_eic_wait_for_sync(hw);
        ((Eic *)hw)->CTRL.reg |= EIC_CTRL_SWRST;
     e56:	4a18      	ldr	r2, [pc, #96]	; (eb8 <_ext_irq_init+0x84>)
     e58:	7811      	ldrb	r1, [r2, #0]
     e5a:	3301      	adds	r3, #1
     e5c:	430b      	orrs	r3, r1
     e5e:	7013      	strb	r3, [r2, #0]
typedef uint8_t hri_eic_nmiflag_reg_t;
typedef uint8_t hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while(((const Eic *)hw)->STATUS.bit.SYNCBUSY);
     e60:	7853      	ldrb	r3, [r2, #1]
     e62:	09db      	lsrs	r3, r3, #7
     e64:	d1fc      	bne.n	e60 <_ext_irq_init+0x2c>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data) 
{
        EIC_CRITICAL_SECTION_ENTER();
        ((Eic *)hw)->NMICTRL.reg = data;
     e66:	4b14      	ldr	r3, [pc, #80]	; (eb8 <_ext_irq_init+0x84>)
     e68:	2200      	movs	r2, #0
     e6a:	709a      	strb	r2, [r3, #2]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data) 
{
        EIC_CRITICAL_SECTION_ENTER();
        ((Eic *)hw)->EVCTRL.reg = data;
     e6c:	605a      	str	r2, [r3, #4]
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data) 
{
        EIC_CRITICAL_SECTION_ENTER();
        ((Eic *)hw)->WAKEUP.reg = data;
     e6e:	615a      	str	r2, [r3, #20]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data) 
{
        EIC_CRITICAL_SECTION_ENTER();
        ((Eic *)hw)->CONFIG[index].reg = data;
     e70:	619a      	str	r2, [r3, #24]
     e72:	61da      	str	r2, [r3, #28]
typedef uint8_t hri_eic_nmiflag_reg_t;
typedef uint8_t hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while(((const Eic *)hw)->STATUS.bit.SYNCBUSY);
     e74:	1c1a      	adds	r2, r3, #0
     e76:	7853      	ldrb	r3, [r2, #1]
     e78:	09db      	lsrs	r3, r3, #7
     e7a:	d1fc      	bne.n	e76 <_ext_irq_init+0x42>
     e7c:	1c05      	adds	r5, r0, #0

static inline void hri_eic_set_CTRL_ENABLE_bit(const void *const hw) 
{
        EIC_CRITICAL_SECTION_ENTER();
        hri_eic_wait_for_sync(hw);
        ((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
     e7e:	4a0e      	ldr	r2, [pc, #56]	; (eb8 <_ext_irq_init+0x84>)
     e80:	7811      	ldrb	r1, [r2, #0]
     e82:	3302      	adds	r3, #2
     e84:	430b      	orrs	r3, r1
     e86:	7013      	strb	r3, [r2, #0]
			EIC_CONFIG_SENSE7(CONF_EIC_SENSE15) |
			0);

	hri_eic_set_CTRL_ENABLE_bit(EIC);

	_irq.handler = _ext_irq_handler;
     e88:	4c0c      	ldr	r4, [pc, #48]	; (ebc <_ext_irq_init+0x88>)
     e8a:	4b0d      	ldr	r3, [pc, #52]	; (ec0 <_ext_irq_init+0x8c>)
     e8c:	6063      	str	r3, [r4, #4]
	_irq.parameter = NULL;
     e8e:	2300      	movs	r3, #0
     e90:	60a3      	str	r3, [r4, #8]
	_irq_disable(EIC_IRQn);
     e92:	2004      	movs	r0, #4
     e94:	4b0b      	ldr	r3, [pc, #44]	; (ec4 <_ext_irq_init+0x90>)
     e96:	4798      	blx	r3
	_irq_clear(EIC_IRQn);
     e98:	2004      	movs	r0, #4
     e9a:	4b0b      	ldr	r3, [pc, #44]	; (ec8 <_ext_irq_init+0x94>)
     e9c:	4798      	blx	r3
	_irq_register(EIC_IRQn, &_irq);
     e9e:	1d21      	adds	r1, r4, #4
     ea0:	2004      	movs	r0, #4
     ea2:	4b0a      	ldr	r3, [pc, #40]	; (ecc <_ext_irq_init+0x98>)
     ea4:	4798      	blx	r3
	_irq_enable(EIC_IRQn);
     ea6:	2004      	movs	r0, #4
     ea8:	4b09      	ldr	r3, [pc, #36]	; (ed0 <_ext_irq_init+0x9c>)
     eaa:	4798      	blx	r3

	callback = cb;
     eac:	6025      	str	r5, [r4, #0]

	return ERR_NONE;
     eae:	2000      	movs	r0, #0
     eb0:	e001      	b.n	eb6 <_ext_irq_init+0x82>
int32_t _ext_irq_init(void ( *cb )(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC);

	if (hri_eic_get_CTRL_ENABLE_bit(EIC)) {
		return ERR_DENIED;
     eb2:	2011      	movs	r0, #17
     eb4:	4240      	negs	r0, r0
	_irq_enable(EIC_IRQn);

	callback = cb;

	return ERR_NONE;
}
     eb6:	bd38      	pop	{r3, r4, r5, pc}
     eb8:	40001800 	.word	0x40001800
     ebc:	20000054 	.word	0x20000054
     ec0:	00000d65 	.word	0x00000d65
     ec4:	000007b9 	.word	0x000007b9
     ec8:	000007d1 	.word	0x000007d1
     ecc:	000007fd 	.word	0x000007fd
     ed0:	000007e9 	.word	0x000007e9

00000ed4 <_gclk_init_generators>:
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data) 
{
        GCLK_CRITICAL_SECTION_ENTER();
        ((Gclk *)hw)->GENDIV.reg = data;
     ed4:	2280      	movs	r2, #128	; 0x80
     ed6:	0052      	lsls	r2, r2, #1
     ed8:	4b28      	ldr	r3, [pc, #160]	; (f7c <_gclk_init_generators+0xa8>)
     eda:	609a      	str	r2, [r3, #8]
typedef uint8_t hri_gclk_ctrl_reg_t;
typedef uint8_t hri_gclk_status_reg_t;

static inline void hri_gclk_wait_for_sync(const void *const hw)
{
	while(((const Gclk *)hw)->STATUS.bit.SYNCBUSY);
     edc:	1c1a      	adds	r2, r3, #0
     ede:	7853      	ldrb	r3, [r2, #1]
     ee0:	09db      	lsrs	r3, r3, #7
     ee2:	d1fc      	bne.n	ede <_gclk_init_generators+0xa>

static inline void hri_gclk_write_GENCTRL_reg(const void *const hw, hri_gclk_genctrl_reg_t data) 
{
        GCLK_CRITICAL_SECTION_ENTER();
        hri_gclk_wait_for_sync(hw);
        ((Gclk *)hw)->GENCTRL.reg = data;
     ee4:	4b25      	ldr	r3, [pc, #148]	; (f7c <_gclk_init_generators+0xa8>)
     ee6:	2283      	movs	r2, #131	; 0x83
     ee8:	0252      	lsls	r2, r2, #9
     eea:	605a      	str	r2, [r3, #4]
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data) 
{
        GCLK_CRITICAL_SECTION_ENTER();
        ((Gclk *)hw)->GENDIV.reg = data;
     eec:	2202      	movs	r2, #2
     eee:	32ff      	adds	r2, #255	; 0xff
     ef0:	609a      	str	r2, [r3, #8]
typedef uint8_t hri_gclk_ctrl_reg_t;
typedef uint8_t hri_gclk_status_reg_t;

static inline void hri_gclk_wait_for_sync(const void *const hw)
{
	while(((const Gclk *)hw)->STATUS.bit.SYNCBUSY);
     ef2:	1c1a      	adds	r2, r3, #0
     ef4:	7853      	ldrb	r3, [r2, #1]
     ef6:	09db      	lsrs	r3, r3, #7
     ef8:	d1fc      	bne.n	ef4 <_gclk_init_generators+0x20>

static inline void hri_gclk_write_GENCTRL_reg(const void *const hw, hri_gclk_genctrl_reg_t data) 
{
        GCLK_CRITICAL_SECTION_ENTER();
        hri_gclk_wait_for_sync(hw);
        ((Gclk *)hw)->GENCTRL.reg = data;
     efa:	4b20      	ldr	r3, [pc, #128]	; (f7c <_gclk_init_generators+0xa8>)
     efc:	4a20      	ldr	r2, [pc, #128]	; (f80 <_gclk_init_generators+0xac>)
     efe:	605a      	str	r2, [r3, #4]
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data) 
{
        GCLK_CRITICAL_SECTION_ENTER();
        ((Gclk *)hw)->GENDIV.reg = data;
     f00:	2281      	movs	r2, #129	; 0x81
     f02:	0052      	lsls	r2, r2, #1
     f04:	609a      	str	r2, [r3, #8]
typedef uint8_t hri_gclk_ctrl_reg_t;
typedef uint8_t hri_gclk_status_reg_t;

static inline void hri_gclk_wait_for_sync(const void *const hw)
{
	while(((const Gclk *)hw)->STATUS.bit.SYNCBUSY);
     f06:	1c1a      	adds	r2, r3, #0
     f08:	7853      	ldrb	r3, [r2, #1]
     f0a:	09db      	lsrs	r3, r3, #7
     f0c:	d1fc      	bne.n	f08 <_gclk_init_generators+0x34>

static inline void hri_gclk_write_GENCTRL_reg(const void *const hw, hri_gclk_genctrl_reg_t data) 
{
        GCLK_CRITICAL_SECTION_ENTER();
        hri_gclk_wait_for_sync(hw);
        ((Gclk *)hw)->GENCTRL.reg = data;
     f0e:	4b1b      	ldr	r3, [pc, #108]	; (f7c <_gclk_init_generators+0xa8>)
     f10:	4a1c      	ldr	r2, [pc, #112]	; (f84 <_gclk_init_generators+0xb0>)
     f12:	605a      	str	r2, [r3, #4]
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data) 
{
        GCLK_CRITICAL_SECTION_ENTER();
        ((Gclk *)hw)->GENDIV.reg = data;
     f14:	2204      	movs	r2, #4
     f16:	32ff      	adds	r2, #255	; 0xff
     f18:	609a      	str	r2, [r3, #8]
typedef uint8_t hri_gclk_ctrl_reg_t;
typedef uint8_t hri_gclk_status_reg_t;

static inline void hri_gclk_wait_for_sync(const void *const hw)
{
	while(((const Gclk *)hw)->STATUS.bit.SYNCBUSY);
     f1a:	1c1a      	adds	r2, r3, #0
     f1c:	7853      	ldrb	r3, [r2, #1]
     f1e:	09db      	lsrs	r3, r3, #7
     f20:	d1fc      	bne.n	f1c <_gclk_init_generators+0x48>

static inline void hri_gclk_write_GENCTRL_reg(const void *const hw, hri_gclk_genctrl_reg_t data) 
{
        GCLK_CRITICAL_SECTION_ENTER();
        hri_gclk_wait_for_sync(hw);
        ((Gclk *)hw)->GENCTRL.reg = data;
     f22:	4b16      	ldr	r3, [pc, #88]	; (f7c <_gclk_init_generators+0xa8>)
     f24:	4a18      	ldr	r2, [pc, #96]	; (f88 <_gclk_init_generators+0xb4>)
     f26:	605a      	str	r2, [r3, #4]
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data) 
{
        GCLK_CRITICAL_SECTION_ENTER();
        ((Gclk *)hw)->GENDIV.reg = data;
     f28:	2282      	movs	r2, #130	; 0x82
     f2a:	0052      	lsls	r2, r2, #1
     f2c:	609a      	str	r2, [r3, #8]
typedef uint8_t hri_gclk_ctrl_reg_t;
typedef uint8_t hri_gclk_status_reg_t;

static inline void hri_gclk_wait_for_sync(const void *const hw)
{
	while(((const Gclk *)hw)->STATUS.bit.SYNCBUSY);
     f2e:	1c1a      	adds	r2, r3, #0
     f30:	7853      	ldrb	r3, [r2, #1]
     f32:	09db      	lsrs	r3, r3, #7
     f34:	d1fc      	bne.n	f30 <_gclk_init_generators+0x5c>

static inline void hri_gclk_write_GENCTRL_reg(const void *const hw, hri_gclk_genctrl_reg_t data) 
{
        GCLK_CRITICAL_SECTION_ENTER();
        hri_gclk_wait_for_sync(hw);
        ((Gclk *)hw)->GENCTRL.reg = data;
     f36:	4b11      	ldr	r3, [pc, #68]	; (f7c <_gclk_init_generators+0xa8>)
     f38:	4a14      	ldr	r2, [pc, #80]	; (f8c <_gclk_init_generators+0xb8>)
     f3a:	605a      	str	r2, [r3, #4]
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data) 
{
        GCLK_CRITICAL_SECTION_ENTER();
        ((Gclk *)hw)->GENDIV.reg = data;
     f3c:	2206      	movs	r2, #6
     f3e:	32ff      	adds	r2, #255	; 0xff
     f40:	609a      	str	r2, [r3, #8]
typedef uint8_t hri_gclk_ctrl_reg_t;
typedef uint8_t hri_gclk_status_reg_t;

static inline void hri_gclk_wait_for_sync(const void *const hw)
{
	while(((const Gclk *)hw)->STATUS.bit.SYNCBUSY);
     f42:	1c1a      	adds	r2, r3, #0
     f44:	7853      	ldrb	r3, [r2, #1]
     f46:	09db      	lsrs	r3, r3, #7
     f48:	d1fc      	bne.n	f44 <_gclk_init_generators+0x70>

static inline void hri_gclk_write_GENCTRL_reg(const void *const hw, hri_gclk_genctrl_reg_t data) 
{
        GCLK_CRITICAL_SECTION_ENTER();
        hri_gclk_wait_for_sync(hw);
        ((Gclk *)hw)->GENCTRL.reg = data;
     f4a:	4b0c      	ldr	r3, [pc, #48]	; (f7c <_gclk_init_generators+0xa8>)
     f4c:	4a10      	ldr	r2, [pc, #64]	; (f90 <_gclk_init_generators+0xbc>)
     f4e:	605a      	str	r2, [r3, #4]
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data) 
{
        GCLK_CRITICAL_SECTION_ENTER();
        ((Gclk *)hw)->GENDIV.reg = data;
     f50:	2283      	movs	r2, #131	; 0x83
     f52:	0052      	lsls	r2, r2, #1
     f54:	609a      	str	r2, [r3, #8]
typedef uint8_t hri_gclk_ctrl_reg_t;
typedef uint8_t hri_gclk_status_reg_t;

static inline void hri_gclk_wait_for_sync(const void *const hw)
{
	while(((const Gclk *)hw)->STATUS.bit.SYNCBUSY);
     f56:	1c1a      	adds	r2, r3, #0
     f58:	7853      	ldrb	r3, [r2, #1]
     f5a:	09db      	lsrs	r3, r3, #7
     f5c:	d1fc      	bne.n	f58 <_gclk_init_generators+0x84>

static inline void hri_gclk_write_GENCTRL_reg(const void *const hw, hri_gclk_genctrl_reg_t data) 
{
        GCLK_CRITICAL_SECTION_ENTER();
        hri_gclk_wait_for_sync(hw);
        ((Gclk *)hw)->GENCTRL.reg = data;
     f5e:	4b07      	ldr	r3, [pc, #28]	; (f7c <_gclk_init_generators+0xa8>)
     f60:	4a0c      	ldr	r2, [pc, #48]	; (f94 <_gclk_init_generators+0xc0>)
     f62:	605a      	str	r2, [r3, #4]
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data) 
{
        GCLK_CRITICAL_SECTION_ENTER();
        ((Gclk *)hw)->GENDIV.reg = data;
     f64:	2208      	movs	r2, #8
     f66:	32ff      	adds	r2, #255	; 0xff
     f68:	609a      	str	r2, [r3, #8]
typedef uint8_t hri_gclk_ctrl_reg_t;
typedef uint8_t hri_gclk_status_reg_t;

static inline void hri_gclk_wait_for_sync(const void *const hw)
{
	while(((const Gclk *)hw)->STATUS.bit.SYNCBUSY);
     f6a:	1c1a      	adds	r2, r3, #0
     f6c:	7853      	ldrb	r3, [r2, #1]
     f6e:	09db      	lsrs	r3, r3, #7
     f70:	d1fc      	bne.n	f6c <_gclk_init_generators+0x98>

static inline void hri_gclk_write_GENCTRL_reg(const void *const hw, hri_gclk_genctrl_reg_t data) 
{
        GCLK_CRITICAL_SECTION_ENTER();
        hri_gclk_wait_for_sync(hw);
        ((Gclk *)hw)->GENCTRL.reg = data;
     f72:	4a09      	ldr	r2, [pc, #36]	; (f98 <_gclk_init_generators+0xc4>)
     f74:	4b01      	ldr	r3, [pc, #4]	; (f7c <_gclk_init_generators+0xa8>)
     f76:	605a      	str	r2, [r3, #4]
			(CONF_GCLK_GEN_7_IDC << GCLK_GENCTRL_IDC_Pos) |
			(CONF_GCLK_GEN_7_GENEN << GCLK_GENCTRL_GENEN_Pos) |
			CONF_GCLK_GEN_7_SRC |
			GCLK_GENCTRL_ID(7));
# endif
}
     f78:	4770      	bx	lr
     f7a:	46c0      	nop			; (mov r8, r8)
     f7c:	40000c00 	.word	0x40000c00
     f80:	00010601 	.word	0x00010601
     f84:	00110602 	.word	0x00110602
     f88:	00010303 	.word	0x00010303
     f8c:	00010604 	.word	0x00010604
     f90:	00010605 	.word	0x00010605
     f94:	00010606 	.word	0x00010606
     f98:	00010607 	.word	0x00010607

00000f9c <_pm_get_ahb_index>:
 *
 * \return index of the given module if succeeds, ERR_INVALID_ARG otherwise
 */
static int32_t _pm_get_ahb_index(const void *const module)
{
	if ((uint32_t)module == (uint32_t)PM_BUS_APBA) {
     f9c:	2801      	cmp	r0, #1
     f9e:	d016      	beq.n	fce <_pm_get_ahb_index+0x32>
		return 0;
	}
	else if ((uint32_t)module == (uint32_t)PM_BUS_APBB) {
     fa0:	2802      	cmp	r0, #2
     fa2:	d016      	beq.n	fd2 <_pm_get_ahb_index+0x36>
		return 1;
	}
	else if ((uint32_t)module == (uint32_t)PM_BUS_APBC) {
		return 2;
     fa4:	2302      	movs	r3, #2
		return 0;
	}
	else if ((uint32_t)module == (uint32_t)PM_BUS_APBB) {
		return 1;
	}
	else if ((uint32_t)module == (uint32_t)PM_BUS_APBC) {
     fa6:	2803      	cmp	r0, #3
     fa8:	d014      	beq.n	fd4 <_pm_get_ahb_index+0x38>
		return 2;
	}

	if ((uint32_t)module == (uint32_t)DSU) {
		return 3;
     faa:	3301      	adds	r3, #1
	}
	else if ((uint32_t)module == (uint32_t)PM_BUS_APBC) {
		return 2;
	}

	if ((uint32_t)module == (uint32_t)DSU) {
     fac:	4a0a      	ldr	r2, [pc, #40]	; (fd8 <_pm_get_ahb_index+0x3c>)
     fae:	4290      	cmp	r0, r2
     fb0:	d010      	beq.n	fd4 <_pm_get_ahb_index+0x38>
		return 3;
	}
	else if ((uint32_t)module == (uint32_t)NVMCTRL) {
		return 4;
     fb2:	3301      	adds	r3, #1
	}

	if ((uint32_t)module == (uint32_t)DSU) {
		return 3;
	}
	else if ((uint32_t)module == (uint32_t)NVMCTRL) {
     fb4:	4a09      	ldr	r2, [pc, #36]	; (fdc <_pm_get_ahb_index+0x40>)
     fb6:	4290      	cmp	r0, r2
     fb8:	d00c      	beq.n	fd4 <_pm_get_ahb_index+0x38>
		return 4;
	}
	else if ((uint32_t)module == (uint32_t)DMAC) {
		return 5;
     fba:	3301      	adds	r3, #1
		return 3;
	}
	else if ((uint32_t)module == (uint32_t)NVMCTRL) {
		return 4;
	}
	else if ((uint32_t)module == (uint32_t)DMAC) {
     fbc:	4a08      	ldr	r2, [pc, #32]	; (fe0 <_pm_get_ahb_index+0x44>)
     fbe:	4290      	cmp	r0, r2
     fc0:	d008      	beq.n	fd4 <_pm_get_ahb_index+0x38>
		return 5;
	}
	else if ((uint32_t)module == (uint32_t)USB) {
		return 6;
     fc2:	3301      	adds	r3, #1
		return 4;
	}
	else if ((uint32_t)module == (uint32_t)DMAC) {
		return 5;
	}
	else if ((uint32_t)module == (uint32_t)USB) {
     fc4:	4a07      	ldr	r2, [pc, #28]	; (fe4 <_pm_get_ahb_index+0x48>)
     fc6:	4290      	cmp	r0, r2
     fc8:	d004      	beq.n	fd4 <_pm_get_ahb_index+0x38>
		return 6;
	}

	return ERR_INVALID_ARG;
     fca:	3b13      	subs	r3, #19
     fcc:	e002      	b.n	fd4 <_pm_get_ahb_index+0x38>
 * \return index of the given module if succeeds, ERR_INVALID_ARG otherwise
 */
static int32_t _pm_get_ahb_index(const void *const module)
{
	if ((uint32_t)module == (uint32_t)PM_BUS_APBA) {
		return 0;
     fce:	2300      	movs	r3, #0
     fd0:	e000      	b.n	fd4 <_pm_get_ahb_index+0x38>
	}
	else if ((uint32_t)module == (uint32_t)PM_BUS_APBB) {
		return 1;
     fd2:	2301      	movs	r3, #1
	else if ((uint32_t)module == (uint32_t)USB) {
		return 6;
	}

	return ERR_INVALID_ARG;
}
     fd4:	1c18      	adds	r0, r3, #0
     fd6:	4770      	bx	lr
     fd8:	41002000 	.word	0x41002000
     fdc:	41004000 	.word	0x41004000
     fe0:	41004800 	.word	0x41004800
     fe4:	41005000 	.word	0x41005000

00000fe8 <_pm_get_apbb_index>:
 *
 * \return index of the given module if succeeds, ERR_INVALID_ARG otherwise
 */
static int32_t _pm_get_apbb_index(const void *const module)
{
	if ((uint32_t)module == (uint32_t)PAC1) {
     fe8:	2382      	movs	r3, #130	; 0x82
     fea:	05db      	lsls	r3, r3, #23
     fec:	4298      	cmp	r0, r3
     fee:	d014      	beq.n	101a <_pm_get_apbb_index+0x32>
		return 0;
	}
	else if ((uint32_t)module == (uint32_t)DSU) {
     ff0:	4b0c      	ldr	r3, [pc, #48]	; (1024 <_pm_get_apbb_index+0x3c>)
     ff2:	4298      	cmp	r0, r3
     ff4:	d013      	beq.n	101e <_pm_get_apbb_index+0x36>
		return 1;
	}
	else if ((uint32_t)module == (uint32_t)NVMCTRL) {
		return 2;
     ff6:	2302      	movs	r3, #2
		return 0;
	}
	else if ((uint32_t)module == (uint32_t)DSU) {
		return 1;
	}
	else if ((uint32_t)module == (uint32_t)NVMCTRL) {
     ff8:	4a0b      	ldr	r2, [pc, #44]	; (1028 <_pm_get_apbb_index+0x40>)
     ffa:	4290      	cmp	r0, r2
     ffc:	d010      	beq.n	1020 <_pm_get_apbb_index+0x38>
		return 2;
	}

	if ((uint32_t)module == (uint32_t)PORT) {
		return 3;
     ffe:	3301      	adds	r3, #1
	}
	else if ((uint32_t)module == (uint32_t)NVMCTRL) {
		return 2;
	}

	if ((uint32_t)module == (uint32_t)PORT) {
    1000:	4a0a      	ldr	r2, [pc, #40]	; (102c <_pm_get_apbb_index+0x44>)
    1002:	4290      	cmp	r0, r2
    1004:	d00c      	beq.n	1020 <_pm_get_apbb_index+0x38>
		return 3;
	}
	else if ((uint32_t)module == (uint32_t)DMAC) {
		return 4;
    1006:	3301      	adds	r3, #1
	}

	if ((uint32_t)module == (uint32_t)PORT) {
		return 3;
	}
	else if ((uint32_t)module == (uint32_t)DMAC) {
    1008:	4a09      	ldr	r2, [pc, #36]	; (1030 <_pm_get_apbb_index+0x48>)
    100a:	4290      	cmp	r0, r2
    100c:	d008      	beq.n	1020 <_pm_get_apbb_index+0x38>
		return 4;
	}
	else if ((uint32_t)module == (uint32_t)USB) {
		return 5;
    100e:	3301      	adds	r3, #1
		return 3;
	}
	else if ((uint32_t)module == (uint32_t)DMAC) {
		return 4;
	}
	else if ((uint32_t)module == (uint32_t)USB) {
    1010:	4a08      	ldr	r2, [pc, #32]	; (1034 <_pm_get_apbb_index+0x4c>)
    1012:	4290      	cmp	r0, r2
    1014:	d004      	beq.n	1020 <_pm_get_apbb_index+0x38>
		return 5;
	}

	return ERR_INVALID_ARG;
    1016:	3b12      	subs	r3, #18
    1018:	e002      	b.n	1020 <_pm_get_apbb_index+0x38>
 * \return index of the given module if succeeds, ERR_INVALID_ARG otherwise
 */
static int32_t _pm_get_apbb_index(const void *const module)
{
	if ((uint32_t)module == (uint32_t)PAC1) {
		return 0;
    101a:	2300      	movs	r3, #0
    101c:	e000      	b.n	1020 <_pm_get_apbb_index+0x38>
	}
	else if ((uint32_t)module == (uint32_t)DSU) {
		return 1;
    101e:	2301      	movs	r3, #1
	else if ((uint32_t)module == (uint32_t)USB) {
		return 5;
	}

	return ERR_INVALID_ARG;
}
    1020:	1c18      	adds	r0, r3, #0
    1022:	4770      	bx	lr
    1024:	41002000 	.word	0x41002000
    1028:	41004000 	.word	0x41004000
    102c:	41004400 	.word	0x41004400
    1030:	41004800 	.word	0x41004800
    1034:	41005000 	.word	0x41005000

00001038 <_pm_enable_bus_clock>:

/**
 * \brief Enable clock on the given bus for the given hardware module
 */
void _pm_enable_bus_clock(const enum _pm_bus bus, const void *const module)
{
    1038:	b508      	push	{r3, lr}
	uint32_t peripheral = ((uint32_t)module & 0x0000ff00 ) >> 10;
    103a:	040b      	lsls	r3, r1, #16
    103c:	0e9b      	lsrs	r3, r3, #26

	switch(bus) {
    103e:	2801      	cmp	r0, #1
    1040:	d013      	beq.n	106a <_pm_enable_bus_clock+0x32>
    1042:	2800      	cmp	r0, #0
    1044:	d004      	beq.n	1050 <_pm_enable_bus_clock+0x18>
    1046:	2802      	cmp	r0, #2
    1048:	d017      	beq.n	107a <_pm_enable_bus_clock+0x42>
    104a:	2803      	cmp	r0, #3
    104c:	d022      	beq.n	1094 <_pm_enable_bus_clock+0x5c>
    104e:	e029      	b.n	10a4 <_pm_enable_bus_clock+0x6c>
	case PM_BUS_AHB:

		if (_pm_get_ahb_index(module) >= 0) {
    1050:	1c08      	adds	r0, r1, #0
    1052:	4b17      	ldr	r3, [pc, #92]	; (10b0 <_pm_enable_bus_clock+0x78>)
    1054:	4798      	blx	r3
    1056:	2800      	cmp	r0, #0
    1058:	db29      	blt.n	10ae <_pm_enable_bus_clock+0x76>
			peripheral = (uint32_t) _pm_get_ahb_index(module);
			PM->AHBMASK.reg |= 1 << peripheral;
    105a:	4916      	ldr	r1, [pc, #88]	; (10b4 <_pm_enable_bus_clock+0x7c>)
    105c:	694b      	ldr	r3, [r1, #20]
    105e:	2201      	movs	r2, #1
    1060:	4082      	lsls	r2, r0
    1062:	1c10      	adds	r0, r2, #0
    1064:	4318      	orrs	r0, r3
    1066:	6148      	str	r0, [r1, #20]
    1068:	e021      	b.n	10ae <_pm_enable_bus_clock+0x76>
		}

		break;
	case PM_BUS_APBA:
		PM->APBAMASK.reg |= 1 << peripheral;
    106a:	4812      	ldr	r0, [pc, #72]	; (10b4 <_pm_enable_bus_clock+0x7c>)
    106c:	6982      	ldr	r2, [r0, #24]
    106e:	2101      	movs	r1, #1
    1070:	4099      	lsls	r1, r3
    1072:	1c0b      	adds	r3, r1, #0
    1074:	4313      	orrs	r3, r2
    1076:	6183      	str	r3, [r0, #24]
		break;
    1078:	e019      	b.n	10ae <_pm_enable_bus_clock+0x76>
	case PM_BUS_APBB:

		if (_pm_get_apbb_index(module) >= 0) {
    107a:	1c08      	adds	r0, r1, #0
    107c:	4b0e      	ldr	r3, [pc, #56]	; (10b8 <_pm_enable_bus_clock+0x80>)
    107e:	4798      	blx	r3
    1080:	2800      	cmp	r0, #0
    1082:	db14      	blt.n	10ae <_pm_enable_bus_clock+0x76>
			peripheral = (uint32_t) _pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
    1084:	490b      	ldr	r1, [pc, #44]	; (10b4 <_pm_enable_bus_clock+0x7c>)
    1086:	69cb      	ldr	r3, [r1, #28]
    1088:	2201      	movs	r2, #1
    108a:	4082      	lsls	r2, r0
    108c:	1c10      	adds	r0, r2, #0
    108e:	4318      	orrs	r0, r3
    1090:	61c8      	str	r0, [r1, #28]
    1092:	e00c      	b.n	10ae <_pm_enable_bus_clock+0x76>
		}

		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
    1094:	4807      	ldr	r0, [pc, #28]	; (10b4 <_pm_enable_bus_clock+0x7c>)
    1096:	6a02      	ldr	r2, [r0, #32]
    1098:	2101      	movs	r1, #1
    109a:	4099      	lsls	r1, r3
    109c:	1c0b      	adds	r3, r1, #0
    109e:	4313      	orrs	r3, r2
    10a0:	6203      	str	r3, [r0, #32]
		break;
    10a2:	e004      	b.n	10ae <_pm_enable_bus_clock+0x76>
	default:
		ASSERT(false);
    10a4:	2000      	movs	r0, #0
    10a6:	4905      	ldr	r1, [pc, #20]	; (10bc <_pm_enable_bus_clock+0x84>)
    10a8:	22af      	movs	r2, #175	; 0xaf
    10aa:	4b05      	ldr	r3, [pc, #20]	; (10c0 <_pm_enable_bus_clock+0x88>)
    10ac:	4798      	blx	r3
		break;
	}
}
    10ae:	bd08      	pop	{r3, pc}
    10b0:	00000f9d 	.word	0x00000f9d
    10b4:	40000400 	.word	0x40000400
    10b8:	00000fe9 	.word	0x00000fe9
    10bc:	00002fc0 	.word	0x00002fc0
    10c0:	00002d79 	.word	0x00002d79

000010c4 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
        PM_CRITICAL_SECTION_ENTER();
        ((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    10c4:	4b06      	ldr	r3, [pc, #24]	; (10e0 <_pm_init+0x1c>)
    10c6:	7a1a      	ldrb	r2, [r3, #8]
    10c8:	b2d2      	uxtb	r2, r2
    10ca:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
        PM_CRITICAL_SECTION_ENTER();
        ((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    10cc:	7a5a      	ldrb	r2, [r3, #9]
    10ce:	b2d2      	uxtb	r2, r2
    10d0:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
        PM_CRITICAL_SECTION_ENTER();
        ((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    10d2:	7a9a      	ldrb	r2, [r3, #10]
    10d4:	b2d2      	uxtb	r2, r2
    10d6:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
        PM_CRITICAL_SECTION_ENTER();
        ((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    10d8:	7ada      	ldrb	r2, [r3, #11]
    10da:	b2d2      	uxtb	r2, r2
    10dc:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    10de:	4770      	bx	lr
    10e0:	40000400 	.word	0x40000400

000010e4 <_gpio_set_direction>:
 * \brief Set direction on port with mask
 */
void _gpio_set_direction(const enum gpio_port port,
		const uint32_t mask,
		const enum gpio_direction direction)
{
    10e4:	b508      	push	{r3, lr}
	switch (direction) {
    10e6:	2a01      	cmp	r2, #1
    10e8:	d018      	beq.n	111c <_gpio_set_direction+0x38>
    10ea:	2a00      	cmp	r2, #0
    10ec:	d002      	beq.n	10f4 <_gpio_set_direction+0x10>
    10ee:	2a02      	cmp	r2, #2
    10f0:	d026      	beq.n	1140 <_gpio_set_direction+0x5c>
    10f2:	e039      	b.n	1168 <_gpio_set_direction+0x84>
        ((Port *)hw)->Group[submodule_index].DIRTGL.reg = mask;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
        ((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    10f4:	01c0      	lsls	r0, r0, #7
    10f6:	23c0      	movs	r3, #192	; 0xc0
    10f8:	05db      	lsls	r3, r3, #23
    10fa:	18c3      	adds	r3, r0, r3
    10fc:	6059      	str	r1, [r3, #4]
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG |
				( mask & 0xffff ));
    10fe:	040b      	lsls	r3, r1, #16
    1100:	0c1b      	lsrs	r3, r3, #16
		const enum gpio_direction direction)
{
	switch (direction) {
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG |
    1102:	2280      	movs	r2, #128	; 0x80
    1104:	05d2      	lsls	r2, r2, #23
    1106:	4313      	orrs	r3, r2
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index, hri_port_wrconfig_reg_t data)
{
        PORT_CRITICAL_SECTION_ENTER();
        ((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1108:	4a1a      	ldr	r2, [pc, #104]	; (1174 <_gpio_set_direction+0x90>)
    110a:	4694      	mov	ip, r2
    110c:	4460      	add	r0, ip
    110e:	6283      	str	r3, [r0, #40]	; 0x28
				( mask & 0xffff ));
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_HWSEL |
				PORT_WRCONFIG_WRPINCFG | (( mask & 0xffff0000 ) >> 16 ));
    1110:	0c09      	lsrs	r1, r1, #16
	switch (direction) {
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG |
				( mask & 0xffff ));
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_HWSEL |
    1112:	23c0      	movs	r3, #192	; 0xc0
    1114:	061b      	lsls	r3, r3, #24
    1116:	4319      	orrs	r1, r3
    1118:	6281      	str	r1, [r0, #40]	; 0x28
    111a:	e02a      	b.n	1172 <_gpio_set_direction+0x8e>
        ((Port *)hw)->Group[submodule_index].DIRTGL.reg = mask;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
        ((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    111c:	01c0      	lsls	r0, r0, #7
    111e:	23c0      	movs	r3, #192	; 0xc0
    1120:	05db      	lsls	r3, r3, #23
    1122:	18c3      	adds	r3, r0, r3
    1124:	6059      	str	r1, [r3, #4]
		break;

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG |
				PORT_WRCONFIG_INEN | ( mask & 0xffff ));
    1126:	040b      	lsls	r3, r1, #16
    1128:	0c1b      	lsrs	r3, r3, #16
				PORT_WRCONFIG_WRPINCFG | (( mask & 0xffff0000 ) >> 16 ));
		break;

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG |
    112a:	4a13      	ldr	r2, [pc, #76]	; (1178 <_gpio_set_direction+0x94>)
    112c:	4313      	orrs	r3, r2
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index, hri_port_wrconfig_reg_t data)
{
        PORT_CRITICAL_SECTION_ENTER();
        ((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    112e:	4a11      	ldr	r2, [pc, #68]	; (1174 <_gpio_set_direction+0x90>)
    1130:	4694      	mov	ip, r2
    1132:	4460      	add	r0, ip
    1134:	6283      	str	r3, [r0, #40]	; 0x28
				PORT_WRCONFIG_INEN | ( mask & 0xffff ));
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_HWSEL |
				PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN |
				(( mask & 0xffff0000 ) >> 16 ));
    1136:	0c09      	lsrs	r1, r1, #16

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG |
				PORT_WRCONFIG_INEN | ( mask & 0xffff ));
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_HWSEL |
    1138:	4b10      	ldr	r3, [pc, #64]	; (117c <_gpio_set_direction+0x98>)
    113a:	4319      	orrs	r1, r3
    113c:	6281      	str	r1, [r0, #40]	; 0x28
    113e:	e018      	b.n	1172 <_gpio_set_direction+0x8e>
        return ((Port *)hw)->Group[submodule_index].DIR.reg & mask;
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
        ((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1140:	01c0      	lsls	r0, r0, #7
    1142:	23c0      	movs	r3, #192	; 0xc0
    1144:	05db      	lsls	r3, r3, #23
    1146:	18c3      	adds	r3, r0, r3
    1148:	6099      	str	r1, [r3, #8]
		break;

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT_IOBUS, port, mask);
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG |
				( mask & 0xffff ));
    114a:	040b      	lsls	r3, r1, #16
    114c:	0c1b      	lsrs	r3, r3, #16
				(( mask & 0xffff0000 ) >> 16 ));
		break;

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT_IOBUS, port, mask);
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG |
    114e:	2280      	movs	r2, #128	; 0x80
    1150:	05d2      	lsls	r2, r2, #23
    1152:	4313      	orrs	r3, r2
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index, hri_port_wrconfig_reg_t data)
{
        PORT_CRITICAL_SECTION_ENTER();
        ((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1154:	4a07      	ldr	r2, [pc, #28]	; (1174 <_gpio_set_direction+0x90>)
    1156:	4694      	mov	ip, r2
    1158:	4460      	add	r0, ip
    115a:	6283      	str	r3, [r0, #40]	; 0x28
				( mask & 0xffff ));
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_HWSEL |
				PORT_WRCONFIG_WRPINCFG |(( mask & 0xffff0000 ) >> 16 ));
    115c:	0c09      	lsrs	r1, r1, #16

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT_IOBUS, port, mask);
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG |
				( mask & 0xffff ));
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_HWSEL |
    115e:	23c0      	movs	r3, #192	; 0xc0
    1160:	061b      	lsls	r3, r3, #24
    1162:	4319      	orrs	r1, r3
    1164:	6281      	str	r1, [r0, #40]	; 0x28
    1166:	e004      	b.n	1172 <_gpio_set_direction+0x8e>
				PORT_WRCONFIG_WRPINCFG |(( mask & 0xffff0000 ) >> 16 ));
		break;

	default:
		ASSERT(false);
    1168:	2000      	movs	r0, #0
    116a:	4905      	ldr	r1, [pc, #20]	; (1180 <_gpio_set_direction+0x9c>)
    116c:	2253      	movs	r2, #83	; 0x53
    116e:	4b05      	ldr	r3, [pc, #20]	; (1184 <_gpio_set_direction+0xa0>)
    1170:	4798      	blx	r3
	}
}
    1172:	bd08      	pop	{r3, pc}
    1174:	41004400 	.word	0x41004400
    1178:	40020000 	.word	0x40020000
    117c:	c0020000 	.word	0xc0020000
    1180:	00002fe0 	.word	0x00002fe0
    1184:	00002d79 	.word	0x00002d79

00001188 <_gpio_set_level>:
 */
void _gpio_set_level(const enum gpio_port port,
		const uint32_t mask,
		const bool level)
{
	if(level) {
    1188:	2a00      	cmp	r2, #0
    118a:	d006      	beq.n	119a <_gpio_set_level+0x12>
        return ((Port *)hw)->Group[submodule_index].OUT.reg & mask;
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
        ((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    118c:	01c0      	lsls	r0, r0, #7
    118e:	23c0      	movs	r3, #192	; 0xc0
    1190:	05db      	lsls	r3, r3, #23
    1192:	469c      	mov	ip, r3
    1194:	4460      	add	r0, ip
    1196:	6181      	str	r1, [r0, #24]
    1198:	e004      	b.n	11a4 <_gpio_set_level+0x1c>
        ((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
        ((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    119a:	01c0      	lsls	r0, r0, #7
    119c:	4b02      	ldr	r3, [pc, #8]	; (11a8 <_gpio_set_level+0x20>)
    119e:	469c      	mov	ip, r3
    11a0:	4460      	add	r0, ip
    11a2:	6041      	str	r1, [r0, #4]
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
	} else {
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
	}
}
    11a4:	4770      	bx	lr
    11a6:	46c0      	nop			; (mov r8, r8)
    11a8:	60000010 	.word	0x60000010

000011ac <_gpio_set_pin_pull_mode>:
 * \brief Set pin pull mode
 */
void _gpio_set_pin_pull_mode(const enum gpio_port port,
		const uint8_t pin,
		const enum gpio_pull_mode pull_mode)
{
    11ac:	b510      	push	{r4, lr}
	switch(pull_mode) {
    11ae:	2a01      	cmp	r2, #1
    11b0:	d00e      	beq.n	11d0 <_gpio_set_pin_pull_mode+0x24>
    11b2:	2a00      	cmp	r2, #0
    11b4:	d002      	beq.n	11bc <_gpio_set_pin_pull_mode+0x10>
    11b6:	2a02      	cmp	r2, #2
    11b8:	d01b      	beq.n	11f2 <_gpio_set_pin_pull_mode+0x46>
    11ba:	e02b      	b.n	1214 <_gpio_set_pin_pull_mode+0x68>
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
        PORT_CRITICAL_SECTION_ENTER();
        ((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    11bc:	01c0      	lsls	r0, r0, #7
    11be:	1808      	adds	r0, r1, r0
    11c0:	4b17      	ldr	r3, [pc, #92]	; (1220 <_gpio_set_pin_pull_mode+0x74>)
    11c2:	469c      	mov	ip, r3
    11c4:	4460      	add	r0, ip
    11c6:	7803      	ldrb	r3, [r0, #0]
    11c8:	2204      	movs	r2, #4
    11ca:	4393      	bics	r3, r2
    11cc:	7003      	strb	r3, [r0, #0]
    11ce:	e026      	b.n	121e <_gpio_set_pin_pull_mode+0x72>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
		break;

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
    11d0:	2301      	movs	r3, #1
    11d2:	408b      	lsls	r3, r1
        ((Port *)hw)->Group[submodule_index].DIRTGL.reg = mask;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
        ((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    11d4:	01c0      	lsls	r0, r0, #7
    11d6:	22c0      	movs	r2, #192	; 0xc0
    11d8:	05d2      	lsls	r2, r2, #23
    11da:	1884      	adds	r4, r0, r2
    11dc:	6063      	str	r3, [r4, #4]
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
        PORT_CRITICAL_SECTION_ENTER();
        ((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    11de:	1808      	adds	r0, r1, r0
    11e0:	4a0f      	ldr	r2, [pc, #60]	; (1220 <_gpio_set_pin_pull_mode+0x74>)
    11e2:	4694      	mov	ip, r2
    11e4:	4460      	add	r0, ip
    11e6:	7801      	ldrb	r1, [r0, #0]
    11e8:	2204      	movs	r2, #4
    11ea:	430a      	orrs	r2, r1
    11ec:	7002      	strb	r2, [r0, #0]
        return ((Port *)hw)->Group[submodule_index].OUT.reg & mask;
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
        ((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    11ee:	61a3      	str	r3, [r4, #24]
    11f0:	e015      	b.n	121e <_gpio_set_pin_pull_mode+0x72>
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
		hri_port_set_OUT_reg(PORT_IOBUS, port, 1U << pin);
		break;

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
    11f2:	2201      	movs	r2, #1
    11f4:	408a      	lsls	r2, r1
        ((Port *)hw)->Group[submodule_index].DIRTGL.reg = mask;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
        ((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    11f6:	01c0      	lsls	r0, r0, #7
    11f8:	23c0      	movs	r3, #192	; 0xc0
    11fa:	05db      	lsls	r3, r3, #23
    11fc:	18c3      	adds	r3, r0, r3
    11fe:	605a      	str	r2, [r3, #4]
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
        PORT_CRITICAL_SECTION_ENTER();
        ((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    1200:	1808      	adds	r0, r1, r0
    1202:	4907      	ldr	r1, [pc, #28]	; (1220 <_gpio_set_pin_pull_mode+0x74>)
    1204:	468c      	mov	ip, r1
    1206:	4460      	add	r0, ip
    1208:	7804      	ldrb	r4, [r0, #0]
    120a:	2104      	movs	r1, #4
    120c:	4321      	orrs	r1, r4
    120e:	7001      	strb	r1, [r0, #0]
        ((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
        ((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1210:	615a      	str	r2, [r3, #20]
    1212:	e004      	b.n	121e <_gpio_set_pin_pull_mode+0x72>
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
		hri_port_clear_OUT_reg(PORT_IOBUS, port, 1U << pin);
		break;

	default:
		ASSERT(false);
    1214:	2000      	movs	r0, #0
    1216:	4903      	ldr	r1, [pc, #12]	; (1224 <_gpio_set_pin_pull_mode+0x78>)
    1218:	2299      	movs	r2, #153	; 0x99
    121a:	4b03      	ldr	r3, [pc, #12]	; (1228 <_gpio_set_pin_pull_mode+0x7c>)
    121c:	4798      	blx	r3
		break;
	}
}
    121e:	bd10      	pop	{r4, pc}
    1220:	41004440 	.word	0x41004440
    1224:	00002fe0 	.word	0x00002fe0
    1228:	00002d79 	.word	0x00002d79

0000122c <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    122c:	b570      	push	{r4, r5, r6, lr}
	uint8_t port = GPIO_PORT(gpio);
    122e:	0942      	lsrs	r2, r0, #5
	uint8_t pin  = GPIO_PIN(gpio);
    1230:	b2c0      	uxtb	r0, r0
    1232:	231f      	movs	r3, #31
    1234:	4003      	ands	r3, r0
    1236:	1c1e      	adds	r6, r3, #0

	if(function == GPIO_PIN_FUNCTION_OFF) {
    1238:	1c4b      	adds	r3, r1, #1
    123a:	d10b      	bne.n	1254 <_gpio_set_pin_function+0x28>
    123c:	23ff      	movs	r3, #255	; 0xff
    123e:	401a      	ands	r2, r3

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index, bool value)
{
        uint8_t tmp;
        PORT_CRITICAL_SECTION_ENTER();
        tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1240:	01d2      	lsls	r2, r2, #7
    1242:	18b3      	adds	r3, r6, r2
    1244:	4a18      	ldr	r2, [pc, #96]	; (12a8 <_gpio_set_pin_function+0x7c>)
    1246:	4694      	mov	ip, r2
    1248:	4463      	add	r3, ip
    124a:	781a      	ldrb	r2, [r3, #0]
        tmp &= ~PORT_PINCFG_PMUXEN;
    124c:	3102      	adds	r1, #2
    124e:	438a      	bics	r2, r1
        tmp |= value << PORT_PINCFG_PMUXEN_Pos;
        ((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1250:	701a      	strb	r2, [r3, #0]
    1252:	e027      	b.n	12a4 <_gpio_set_pin_function+0x78>
    1254:	23ff      	movs	r3, #255	; 0xff
    1256:	4013      	ands	r3, r2

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index, bool value)
{
        uint8_t tmp;
        PORT_CRITICAL_SECTION_ENTER();
        tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1258:	01da      	lsls	r2, r3, #7
    125a:	18b2      	adds	r2, r6, r2
    125c:	4c12      	ldr	r4, [pc, #72]	; (12a8 <_gpio_set_pin_function+0x7c>)
    125e:	46a4      	mov	ip, r4
    1260:	4462      	add	r2, ip
    1262:	7814      	ldrb	r4, [r2, #0]
        tmp &= ~PORT_PINCFG_PMUXEN;
    1264:	2501      	movs	r5, #1
    1266:	43ac      	bics	r4, r5
        tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1268:	432c      	orrs	r4, r5
        ((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    126a:	7014      	strb	r4, [r2, #0]
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
	} else {
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);

		if (pin & 1) {
    126c:	07c2      	lsls	r2, r0, #31
    126e:	d50d      	bpl.n	128c <_gpio_set_pin_function+0x60>

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index, hri_port_pmux_reg_t data)
{
        uint8_t tmp;
        PORT_CRITICAL_SECTION_ENTER();
        tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1270:	0872      	lsrs	r2, r6, #1
    1272:	01db      	lsls	r3, r3, #7
    1274:	18d3      	adds	r3, r2, r3
    1276:	4a0d      	ldr	r2, [pc, #52]	; (12ac <_gpio_set_pin_function+0x80>)
    1278:	4694      	mov	ip, r2
    127a:	4463      	add	r3, ip
    127c:	7818      	ldrb	r0, [r3, #0]
        tmp &= ~PORT_PMUX_PMUXO_Msk;
    127e:	220f      	movs	r2, #15
    1280:	4002      	ands	r2, r0
        tmp |= PORT_PMUX_PMUXO(data);
    1282:	0109      	lsls	r1, r1, #4
    1284:	4311      	orrs	r1, r2
    1286:	b2c9      	uxtb	r1, r1
        ((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1288:	7019      	strb	r1, [r3, #0]
    128a:	e00b      	b.n	12a4 <_gpio_set_pin_function+0x78>

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index, hri_port_pmux_reg_t data)
{
        uint8_t tmp;
        PORT_CRITICAL_SECTION_ENTER();
        tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    128c:	0872      	lsrs	r2, r6, #1
    128e:	01db      	lsls	r3, r3, #7
    1290:	18d3      	adds	r3, r2, r3
    1292:	4a06      	ldr	r2, [pc, #24]	; (12ac <_gpio_set_pin_function+0x80>)
    1294:	4694      	mov	ip, r2
    1296:	4463      	add	r3, ip
    1298:	781a      	ldrb	r2, [r3, #0]
        tmp &= ~PORT_PMUX_PMUXE_Msk;
    129a:	200f      	movs	r0, #15
    129c:	4382      	bics	r2, r0
        tmp |= PORT_PMUX_PMUXE(data);
    129e:	4001      	ands	r1, r0
    12a0:	4311      	orrs	r1, r2
        ((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    12a2:	7019      	strb	r1, [r3, #0]
					port,
					pin >> 1,
					function & 0xffff);
		}
	}
}
    12a4:	bd70      	pop	{r4, r5, r6, pc}
    12a6:	46c0      	nop			; (mov r8, r8)
    12a8:	41004440 	.word	0x41004440
    12ac:	41004430 	.word	0x41004430

000012b0 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    12b0:	b510      	push	{r4, lr}
    12b2:	1c04      	adds	r4, r0, #0
	if ((uint32_t)SERCOM5 == (uint32_t)hw) {
		return 5;
	}
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    12b4:	4b1b      	ldr	r3, [pc, #108]	; (1324 <_usart_init+0x74>)
    12b6:	18c3      	adds	r3, r0, r3
    12b8:	0a9b      	lsrs	r3, r3, #10
{
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
		if (_usarts[i].number == sercom_offset) {
    12ba:	b2db      	uxtb	r3, r3
    12bc:	2b01      	cmp	r3, #1
    12be:	d12a      	bne.n	1316 <_usart_init+0x66>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
}

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	while(((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {};
    12c0:	2201      	movs	r2, #1
    12c2:	69e3      	ldr	r3, [r4, #28]
    12c4:	421a      	tst	r2, r3
    12c6:	d1fc      	bne.n	12c2 <_usart_init+0x12>
    12c8:	2203      	movs	r2, #3
    12ca:	69e3      	ldr	r3, [r4, #28]
    12cc:	421a      	tst	r2, r3
    12ce:	d1fc      	bne.n	12ca <_usart_init+0x1a>

static inline bool hri_sercomusart_get_CTRLA_ENABLE_bit(const void *const hw) 
{
        uint32_t tmp;
        hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST|SERCOM_USART_SYNCBUSY_ENABLE);
        tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    12d0:	6823      	ldr	r3, [r4, #0]
static int32_t _usart_init(void *const hw)
{
	uint8_t i = _get_sercom_index(hw);

	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);
	if (hri_sercomusart_get_CTRLA_ENABLE_bit(hw)) {
    12d2:	079b      	lsls	r3, r3, #30
    12d4:	d41c      	bmi.n	1310 <_usart_init+0x60>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
}

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	while(((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {};
    12d6:	2201      	movs	r2, #1
    12d8:	69e3      	ldr	r3, [r4, #28]
    12da:	421a      	tst	r2, r3
    12dc:	d1fc      	bne.n	12d8 <_usart_init+0x28>

static inline void hri_sercomusart_set_CTRLA_SWRST_bit(const void *const hw) 
{
        SERCOM_CRITICAL_SECTION_ENTER();
        hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);
        ((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_SWRST;
    12de:	6822      	ldr	r2, [r4, #0]
    12e0:	2301      	movs	r3, #1
    12e2:	4313      	orrs	r3, r2
    12e4:	6023      	str	r3, [r4, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
}

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	while(((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {};
    12e6:	2201      	movs	r2, #1
    12e8:	69e3      	ldr	r3, [r4, #28]
    12ea:	421a      	tst	r2, r3
    12ec:	d1fc      	bne.n	12e8 <_usart_init+0x38>
    12ee:	2203      	movs	r2, #3
    12f0:	69e3      	ldr	r3, [r4, #28]
    12f2:	421a      	tst	r2, r3
    12f4:	d1fc      	bne.n	12f0 <_usart_init+0x40>

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data) 
{
        SERCOM_CRITICAL_SECTION_ENTER();
        hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST|SERCOM_USART_SYNCBUSY_ENABLE);
        ((Sercom *)hw)->USART.CTRLA.reg = data;
    12f6:	4b0c      	ldr	r3, [pc, #48]	; (1328 <_usart_init+0x78>)
    12f8:	6023      	str	r3, [r4, #0]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data) 
{
        SERCOM_CRITICAL_SECTION_ENTER();
        ((Sercom *)hw)->USART.CTRLB.reg = data;
    12fa:	23c0      	movs	r3, #192	; 0xc0
    12fc:	029b      	lsls	r3, r3, #10
    12fe:	6063      	str	r3, [r4, #4]
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data) 
{
        SERCOM_CRITICAL_SECTION_ENTER();
        ((Sercom *)hw)->USART.BAUD.reg = data;
    1300:	4b0a      	ldr	r3, [pc, #40]	; (132c <_usart_init+0x7c>)
    1302:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data) 
{
        SERCOM_CRITICAL_SECTION_ENTER();
        ((Sercom *)hw)->USART.RXPL.reg = data;
    1304:	2300      	movs	r3, #0
    1306:	73a3      	strb	r3, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data) 
{
        SERCOM_CRITICAL_SECTION_ENTER();
        ((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1308:	2230      	movs	r2, #48	; 0x30
    130a:	54a3      	strb	r3, [r4, r2]
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);

	return ERR_NONE;
    130c:	2000      	movs	r0, #0
    130e:	e008      	b.n	1322 <_usart_init+0x72>
{
	uint8_t i = _get_sercom_index(hw);

	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);
	if (hri_sercomusart_get_CTRLA_ENABLE_bit(hw)) {
		return ERR_DENIED;
    1310:	2011      	movs	r0, #17
    1312:	4240      	negs	r0, r0
    1314:	e005      	b.n	1322 <_usart_init+0x72>
		if (_usarts[i].number == sercom_offset) {
			return i;
		}
	}

	ASSERT(false);
    1316:	2000      	movs	r0, #0
    1318:	4905      	ldr	r1, [pc, #20]	; (1330 <_usart_init+0x80>)
    131a:	4a06      	ldr	r2, [pc, #24]	; (1334 <_usart_init+0x84>)
    131c:	4b06      	ldr	r3, [pc, #24]	; (1338 <_usart_init+0x88>)
    131e:	4798      	blx	r3
    1320:	e7ce      	b.n	12c0 <_usart_init+0x10>

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);

	return ERR_NONE;
}
    1322:	bd10      	pop	{r4, pc}
    1324:	bdfff800 	.word	0xbdfff800
    1328:	40100004 	.word	0x40100004
    132c:	fffffb15 	.word	0xfffffb15
    1330:	00003028 	.word	0x00003028
    1334:	00000292 	.word	0x00000292
    1338:	00002d79 	.word	0x00002d79

0000133c <_usart_sync_init>:
/**
 * \brief Initialize synchronous SERCOM USART
 */
int32_t _usart_sync_init(struct _usart_sync_device *const device,
		void *const hw)
{
    133c:	b538      	push	{r3, r4, r5, lr}
    133e:	1c05      	adds	r5, r0, #0
    1340:	1c0c      	adds	r4, r1, #0
	ASSERT(device);
    1342:	1e43      	subs	r3, r0, #1
    1344:	4198      	sbcs	r0, r3
    1346:	b2c0      	uxtb	r0, r0
    1348:	4904      	ldr	r1, [pc, #16]	; (135c <_usart_sync_init+0x20>)
    134a:	22c5      	movs	r2, #197	; 0xc5
    134c:	4b04      	ldr	r3, [pc, #16]	; (1360 <_usart_sync_init+0x24>)
    134e:	4798      	blx	r3

	device->hw = hw;
    1350:	602c      	str	r4, [r5, #0]

	return _usart_init(hw);
    1352:	1c20      	adds	r0, r4, #0
    1354:	4b03      	ldr	r3, [pc, #12]	; (1364 <_usart_sync_init+0x28>)
    1356:	4798      	blx	r3
}
    1358:	bd38      	pop	{r3, r4, r5, pc}
    135a:	46c0      	nop			; (mov r8, r8)
    135c:	00003028 	.word	0x00003028
    1360:	00002d79 	.word	0x00002d79
    1364:	000012b1 	.word	0x000012b1

00001368 <_usart_sync_write_byte>:
 * \brief Write a byte to the given SERCOM USART instance
 */
void _usart_sync_write_byte(struct _usart_sync_device *const device,
		uint8_t data)
{
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1368:	6803      	ldr	r3, [r0, #0]
    136a:	b289      	uxth	r1, r1
}

static inline void hri_sercomusart_write_DATA_reg(const void *const hw, hri_sercomusart_data_reg_t data) 
{
        SERCOM_CRITICAL_SECTION_ENTER();
        ((Sercom *)hw)->USART.DATA.reg = data;
    136c:	8519      	strh	r1, [r3, #40]	; 0x28
}
    136e:	4770      	bx	lr

00001370 <_usart_sync_read_byte>:
/**
 * \brief Read a byte from the given SERCOM USART instance
 */
uint8_t _usart_sync_read_byte(const struct _usart_sync_device *const device)
{
	return hri_sercomusart_read_DATA_reg(device->hw);
    1370:	6803      	ldr	r3, [r0, #0]
        return ((Sercom *)hw)->USART.RXPL.reg;
}

static inline hri_sercomusart_data_reg_t hri_sercomusart_read_DATA_reg(const void *const hw) 
{
        return ((Sercom *)hw)->USART.DATA.reg;
    1372:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    1374:	b2c0      	uxtb	r0, r0
}
    1376:	4770      	bx	lr

00001378 <_usart_sync_is_byte_sent>:
/**
 * \brief Check if USART is ready to send next byte
 */
bool _usart_sync_is_byte_sent(const struct _usart_sync_device *const device)
{
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    1378:	6803      	ldr	r3, [r0, #0]
        ((Sercom *)hw)->USART.INTENCLR.reg = mask;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw) 
{
        return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    137a:	7e18      	ldrb	r0, [r3, #24]
    137c:	2301      	movs	r3, #1
    137e:	4018      	ands	r0, r3
}
    1380:	4770      	bx	lr
    1382:	46c0      	nop			; (mov r8, r8)

00001384 <_usart_sync_is_byte_received>:
/**
 * \brief Check if there is data received by USART
 */
bool _usart_sync_is_byte_received(const struct _usart_sync_device *const device)
{
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    1384:	6803      	ldr	r3, [r0, #0]
        ((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
}

static inline bool hri_sercomusart_get_interrupt_RXC_bit(const void *const hw) 
{
        return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1386:	7e18      	ldrb	r0, [r3, #24]
    1388:	0740      	lsls	r0, r0, #29
    138a:	0fc0      	lsrs	r0, r0, #31
}
    138c:	4770      	bx	lr
    138e:	46c0      	nop			; (mov r8, r8)

00001390 <_spi_m_sync_init>:
		dev->callbacks.complete(dev, ERR_OVERFLOW);
	}
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    1390:	b570      	push	{r4, r5, r6, lr}
    1392:	1c06      	adds	r6, r0, #0
    1394:	1c0c      	adds	r4, r1, #0
	if ((uint32_t)SERCOM5 == (uint32_t)hw) {
		return 5;
	}
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1396:	4b4f      	ldr	r3, [pc, #316]	; (14d4 <_spi_m_sync_init+0x144>)
    1398:	18cb      	adds	r3, r1, r3
    139a:	0a9b      	lsrs	r3, r3, #10
	uint8_t i;

	for (i = 0;
		i < sizeof( sercomspi_regs )/sizeof( struct sercomspi_regs_cfg );
		i++) {
		if (sercomspi_regs[i].n == n) {
    139c:	b2db      	uxtb	r3, r3
    139e:	2b00      	cmp	r3, #0
    13a0:	d000      	beq.n	13a4 <_spi_m_sync_init+0x14>
    13a2:	e085      	b.n	14b0 <_spi_m_sync_init+0x120>

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    13a4:	2800      	cmp	r0, #0
    13a6:	d004      	beq.n	13b2 <_spi_m_sync_init+0x22>
    13a8:	2900      	cmp	r1, #0
    13aa:	d106      	bne.n	13ba <_spi_m_sync_init+0x2a>

	for (i = 0;
		i < sizeof( sercomspi_regs )/sizeof( struct sercomspi_regs_cfg );
		i++) {
		if (sercomspi_regs[i].n == n) {
			return &sercomspi_regs[i];
    13ac:	4d4a      	ldr	r5, [pc, #296]	; (14d8 <_spi_m_sync_init+0x148>)
    13ae:	3514      	adds	r5, #20
    13b0:	e001      	b.n	13b6 <_spi_m_sync_init+0x26>
    13b2:	4d49      	ldr	r5, [pc, #292]	; (14d8 <_spi_m_sync_init+0x148>)
    13b4:	3514      	adds	r5, #20

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    13b6:	2000      	movs	r0, #0
    13b8:	e002      	b.n	13c0 <_spi_m_sync_init+0x30>

	for (i = 0;
		i < sizeof( sercomspi_regs )/sizeof( struct sercomspi_regs_cfg );
		i++) {
		if (sercomspi_regs[i].n == n) {
			return &sercomspi_regs[i];
    13ba:	4d47      	ldr	r5, [pc, #284]	; (14d8 <_spi_m_sync_init+0x148>)
    13bc:	3514      	adds	r5, #20

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    13be:	2001      	movs	r0, #1
    13c0:	4946      	ldr	r1, [pc, #280]	; (14dc <_spi_m_sync_init+0x14c>)
    13c2:	4a47      	ldr	r2, [pc, #284]	; (14e0 <_spi_m_sync_init+0x150>)
    13c4:	4b47      	ldr	r3, [pc, #284]	; (14e4 <_spi_m_sync_init+0x154>)
    13c6:	4798      	blx	r3

	if (regs == NULL) {
    13c8:	2d00      	cmp	r5, #0
    13ca:	d063      	beq.n	1494 <_spi_m_sync_init+0x104>
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	while(((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {};
    13cc:	2201      	movs	r2, #1
    13ce:	69e3      	ldr	r3, [r4, #28]
    13d0:	421a      	tst	r2, r3
    13d2:	d1fc      	bne.n	13ce <_spi_m_sync_init+0x3e>
    13d4:	2203      	movs	r2, #3
    13d6:	69e3      	ldr	r3, [r4, #28]
    13d8:	421a      	tst	r2, r3
    13da:	d1fc      	bne.n	13d6 <_spi_m_sync_init+0x46>

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw) 
{
        uint32_t tmp;
        hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST|SERCOM_SPI_SYNCBUSY_ENABLE);
        tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    13dc:	6823      	ldr	r3, [r4, #0]
		return ERR_INVALID_ARG;
	}

	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
	if (hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    13de:	079b      	lsls	r3, r3, #30
    13e0:	d45b      	bmi.n	149a <_spi_m_sync_init+0x10a>
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	while(((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {};
    13e2:	2201      	movs	r2, #1
    13e4:	69e3      	ldr	r3, [r4, #28]
    13e6:	421a      	tst	r2, r3
    13e8:	d1fc      	bne.n	13e4 <_spi_m_sync_init+0x54>

static inline void hri_sercomspi_set_CTRLA_SWRST_bit(const void *const hw) 
{
        SERCOM_CRITICAL_SECTION_ENTER();
        hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
        ((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_SWRST;
    13ea:	6822      	ldr	r2, [r4, #0]
    13ec:	2301      	movs	r3, #1
    13ee:	4313      	orrs	r3, r2
    13f0:	6023      	str	r3, [r4, #0]
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	while(((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {};
    13f2:	2201      	movs	r2, #1
    13f4:	69e3      	ldr	r3, [r4, #28]
    13f6:	421a      	tst	r2, r3
    13f8:	d1fc      	bne.n	13f4 <_spi_m_sync_init+0x64>
		return ERR_DENIED;
	}
	hri_sercomspi_set_CTRLA_SWRST_bit(hw);
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
	dev->prvt = hw;
    13fa:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) ==
    13fc:	231c      	movs	r3, #28
    13fe:	682a      	ldr	r2, [r5, #0]
    1400:	4013      	ands	r3, r2
    1402:	2b08      	cmp	r3, #8
    1404:	d11e      	bne.n	1444 <_spi_m_sync_init+0xb4>
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw,
		const struct sercomspi_regs_cfg *regs)
{
	ASSERT(hw && regs);
    1406:	1c20      	adds	r0, r4, #0
    1408:	1e43      	subs	r3, r0, #1
    140a:	4198      	sbcs	r0, r3
    140c:	b2c0      	uxtb	r0, r0
    140e:	4933      	ldr	r1, [pc, #204]	; (14dc <_spi_m_sync_init+0x14c>)
    1410:	4a35      	ldr	r2, [pc, #212]	; (14e8 <_spi_m_sync_init+0x158>)
    1412:	4b34      	ldr	r3, [pc, #208]	; (14e4 <_spi_m_sync_init+0x154>)
    1414:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(hw, regs->ctrla
    1416:	4935      	ldr	r1, [pc, #212]	; (14ec <_spi_m_sync_init+0x15c>)
    1418:	682b      	ldr	r3, [r5, #0]
    141a:	4019      	ands	r1, r3
    141c:	2203      	movs	r2, #3
    141e:	69e3      	ldr	r3, [r4, #28]
    1420:	421a      	tst	r2, r3
    1422:	d1fc      	bne.n	141e <_spi_m_sync_init+0x8e>

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data) 
{
        SERCOM_CRITICAL_SECTION_ENTER();
        hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST|SERCOM_SPI_SYNCBUSY_ENABLE);
        ((Sercom *)hw)->SPI.CTRLA.reg = data;
    1424:	6021      	str	r1, [r4, #0]
			& ~(SERCOM_SPI_CTRLA_IBON|
					SERCOM_SPI_CTRLA_ENABLE|
					SERCOM_SPI_CTRLA_SWRST));
	hri_sercomspi_write_CTRLB_reg(hw, (regs->ctrlb
			& ~(SERCOM_SPI_CTRLB_MSSEN))
			| (SERCOM_SPI_CTRLB_RXEN|
    1426:	4b32      	ldr	r3, [pc, #200]	; (14f0 <_spi_m_sync_init+0x160>)
    1428:	686a      	ldr	r2, [r5, #4]
    142a:	4013      	ands	r3, r2
	ASSERT(hw && regs);
	hri_sercomspi_write_CTRLA_reg(hw, regs->ctrla
			& ~(SERCOM_SPI_CTRLA_IBON|
					SERCOM_SPI_CTRLA_ENABLE|
					SERCOM_SPI_CTRLA_SWRST));
	hri_sercomspi_write_CTRLB_reg(hw, (regs->ctrlb
    142c:	4a31      	ldr	r2, [pc, #196]	; (14f4 <_spi_m_sync_init+0x164>)
    142e:	4313      	orrs	r3, r2
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data) 
{
        SERCOM_CRITICAL_SECTION_ENTER();
        ((Sercom *)hw)->SPI.CTRLB.reg = data;
    1430:	6063      	str	r3, [r4, #4]
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data) 
{
        SERCOM_CRITICAL_SECTION_ENTER();
        ((Sercom *)hw)->SPI.ADDR.reg = data;
    1432:	68ab      	ldr	r3, [r5, #8]
    1434:	6263      	str	r3, [r4, #36]	; 0x24
			& ~(SERCOM_SPI_CTRLB_MSSEN))
			| (SERCOM_SPI_CTRLB_RXEN|
					SERCOM_SPI_CTRLB_SSDE|
					SERCOM_SPI_CTRLB_PLOADEN));
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    1436:	7b6a      	ldrb	r2, [r5, #13]
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data) 
{
        SERCOM_CRITICAL_SECTION_ENTER();
        ((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1438:	2330      	movs	r3, #48	; 0x30
    143a:	54e2      	strb	r2, [r4, r3]
	while(((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    143c:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF));
    143e:	2b00      	cmp	r3, #0
    1440:	d1fc      	bne.n	143c <_spi_m_sync_init+0xac>
    1442:	e01b      	b.n	147c <_spi_m_sync_init+0xec>
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw,
		const struct sercomspi_regs_cfg *regs)
{
	ASSERT(hw && regs);
    1444:	1c20      	adds	r0, r4, #0
    1446:	1e43      	subs	r3, r0, #1
    1448:	4198      	sbcs	r0, r3
    144a:	b2c0      	uxtb	r0, r0
    144c:	4923      	ldr	r1, [pc, #140]	; (14dc <_spi_m_sync_init+0x14c>)
    144e:	4a2a      	ldr	r2, [pc, #168]	; (14f8 <_spi_m_sync_init+0x168>)
    1450:	4b24      	ldr	r3, [pc, #144]	; (14e4 <_spi_m_sync_init+0x154>)
    1452:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(hw, regs->ctrla
    1454:	4925      	ldr	r1, [pc, #148]	; (14ec <_spi_m_sync_init+0x15c>)
    1456:	682b      	ldr	r3, [r5, #0]
    1458:	4019      	ands	r1, r3
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	while(((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {};
    145a:	2203      	movs	r2, #3
    145c:	69e3      	ldr	r3, [r4, #28]
    145e:	421a      	tst	r2, r3
    1460:	d1fc      	bne.n	145c <_spi_m_sync_init+0xcc>

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data) 
{
        SERCOM_CRITICAL_SECTION_ENTER();
        hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST|SERCOM_SPI_SYNCBUSY_ENABLE);
        ((Sercom *)hw)->SPI.CTRLA.reg = data;
    1462:	6021      	str	r1, [r4, #0]
	hri_sercomspi_write_CTRLB_reg(hw, ( regs->ctrlb
				& ~( SERCOM_SPI_CTRLB_MSSEN|
					SERCOM_SPI_CTRLB_AMODE_Msk|
					SERCOM_SPI_CTRLB_SSDE|
					SERCOM_SPI_CTRLB_PLOADEN ))
			| ( SERCOM_SPI_CTRLB_RXEN ));
    1464:	4b25      	ldr	r3, [pc, #148]	; (14fc <_spi_m_sync_init+0x16c>)
    1466:	686a      	ldr	r2, [r5, #4]
    1468:	4013      	ands	r3, r2
	ASSERT(hw && regs);
	hri_sercomspi_write_CTRLA_reg(hw, regs->ctrla
			& ~( SERCOM_SPI_CTRLA_IBON|
				SERCOM_SPI_CTRLA_ENABLE|
				SERCOM_SPI_CTRLA_SWRST ));
	hri_sercomspi_write_CTRLB_reg(hw, ( regs->ctrlb
    146a:	2280      	movs	r2, #128	; 0x80
    146c:	0292      	lsls	r2, r2, #10
    146e:	4313      	orrs	r3, r2
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data) 
{
        SERCOM_CRITICAL_SECTION_ENTER();
        ((Sercom *)hw)->SPI.CTRLB.reg = data;
    1470:	6063      	str	r3, [r4, #4]
				& ~( SERCOM_SPI_CTRLB_MSSEN|
					SERCOM_SPI_CTRLB_AMODE_Msk|
					SERCOM_SPI_CTRLB_SSDE|
					SERCOM_SPI_CTRLB_PLOADEN ))
			| ( SERCOM_SPI_CTRLB_RXEN ));
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    1472:	7b2b      	ldrb	r3, [r5, #12]
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data) 
{
        SERCOM_CRITICAL_SECTION_ENTER();
        ((Sercom *)hw)->SPI.BAUD.reg = data;
    1474:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    1476:	7b6a      	ldrb	r2, [r5, #13]
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data) 
{
        SERCOM_CRITICAL_SECTION_ENTER();
        ((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1478:	2330      	movs	r3, #48	; 0x30
    147a:	54e2      	strb	r2, [r4, r3]
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size =
			(( regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk ) == 0 ) ? 1 : 2;
    147c:	2307      	movs	r3, #7
    147e:	686a      	ldr	r2, [r5, #4]
    1480:	401a      	ands	r2, r3
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size =
    1482:	4253      	negs	r3, r2
    1484:	4153      	adcs	r3, r2
    1486:	2202      	movs	r2, #2
    1488:	1ad3      	subs	r3, r2, r3
    148a:	7133      	strb	r3, [r6, #4]
			(( regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk ) == 0 ) ? 1 : 2;

	dev->dummy_byte = regs->dummy_byte;
    148c:	89eb      	ldrh	r3, [r5, #14]
    148e:	80f3      	strh	r3, [r6, #6]

	return ERR_NONE;
    1490:	2000      	movs	r0, #0
    1492:	e01d      	b.n	14d0 <_spi_m_sync_init+0x140>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    1494:	200d      	movs	r0, #13
    1496:	4240      	negs	r0, r0
    1498:	e01a      	b.n	14d0 <_spi_m_sync_init+0x140>
	}

	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
	if (hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
		return ERR_DENIED;
    149a:	2011      	movs	r0, #17
    149c:	4240      	negs	r0, r0
    149e:	e017      	b.n	14d0 <_spi_m_sync_init+0x140>

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    14a0:	2000      	movs	r0, #0
    14a2:	490e      	ldr	r1, [pc, #56]	; (14dc <_spi_m_sync_init+0x14c>)
    14a4:	4a0e      	ldr	r2, [pc, #56]	; (14e0 <_spi_m_sync_init+0x150>)
    14a6:	4b0f      	ldr	r3, [pc, #60]	; (14e4 <_spi_m_sync_init+0x154>)
    14a8:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    14aa:	200d      	movs	r0, #13
    14ac:	4240      	negs	r0, r0
    14ae:	e00f      	b.n	14d0 <_spi_m_sync_init+0x140>

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    14b0:	2800      	cmp	r0, #0
    14b2:	d108      	bne.n	14c6 <_spi_m_sync_init+0x136>
    14b4:	e7f4      	b.n	14a0 <_spi_m_sync_init+0x110>
    14b6:	2001      	movs	r0, #1
    14b8:	4908      	ldr	r1, [pc, #32]	; (14dc <_spi_m_sync_init+0x14c>)
    14ba:	4a09      	ldr	r2, [pc, #36]	; (14e0 <_spi_m_sync_init+0x150>)
    14bc:	4b09      	ldr	r3, [pc, #36]	; (14e4 <_spi_m_sync_init+0x154>)
    14be:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    14c0:	200d      	movs	r0, #13
    14c2:	4240      	negs	r0, r0
    14c4:	e004      	b.n	14d0 <_spi_m_sync_init+0x140>
		if (sercomspi_regs[i].n == n) {
			return &sercomspi_regs[i];
		}
	}

	return NULL;
    14c6:	2500      	movs	r5, #0

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    14c8:	2900      	cmp	r1, #0
    14ca:	d100      	bne.n	14ce <_spi_m_sync_init+0x13e>
    14cc:	e773      	b.n	13b6 <_spi_m_sync_init+0x26>
    14ce:	e7f2      	b.n	14b6 <_spi_m_sync_init+0x126>
			(( regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk ) == 0 ) ? 1 : 2;

	dev->dummy_byte = regs->dummy_byte;

	return ERR_NONE;
}
    14d0:	bd70      	pop	{r4, r5, r6, pc}
    14d2:	46c0      	nop			; (mov r8, r8)
    14d4:	bdfff800 	.word	0xbdfff800
    14d8:	00003000 	.word	0x00003000
    14dc:	00003028 	.word	0x00003028
    14e0:	000009df 	.word	0x000009df
    14e4:	00002d79 	.word	0x00002d79
    14e8:	0000099c 	.word	0x0000099c
    14ec:	fffffefc 	.word	0xfffffefc
    14f0:	fffdddbf 	.word	0xfffdddbf
    14f4:	00020240 	.word	0x00020240
    14f8:	00000984 	.word	0x00000984
    14fc:	fffd1dbf 	.word	0xfffd1dbf

00001500 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    1500:	b5f0      	push	{r4, r5, r6, r7, lr}
    1502:	465f      	mov	r7, fp
    1504:	4656      	mov	r6, sl
    1506:	464d      	mov	r5, r9
    1508:	4644      	mov	r4, r8
    150a:	b4f0      	push	{r4, r5, r6, r7}
    150c:	b083      	sub	sp, #12
    150e:	4681      	mov	r9, r0
    1510:	1c0e      	adds	r6, r1, #0
	void *hw = dev->prvt;
    1512:	6804      	ldr	r4, [r0, #0]
	int32_t rc = 0;
	struct _spi_trans_ctrl ctrl = {
		msg->txbuf, msg->rxbuf,
    1514:	680b      	ldr	r3, [r1, #0]
    1516:	4698      	mov	r8, r3
    1518:	684d      	ldr	r5, [r1, #4]
		0, 0,
		dev->char_size
    151a:	7903      	ldrb	r3, [r0, #4]
    151c:	469b      	mov	fp, r3
	};

	ASSERT(dev && hw);
    151e:	2800      	cmp	r0, #0
    1520:	d003      	beq.n	152a <_spi_m_sync_trans+0x2a>
    1522:	1c20      	adds	r0, r4, #0
    1524:	1e43      	subs	r3, r0, #1
    1526:	4198      	sbcs	r0, r3
    1528:	e000      	b.n	152c <_spi_m_sync_trans+0x2c>
    152a:	2000      	movs	r0, #0
    152c:	4933      	ldr	r1, [pc, #204]	; (15fc <_spi_m_sync_trans+0xfc>)
    152e:	4a34      	ldr	r2, [pc, #208]	; (1600 <_spi_m_sync_trans+0x100>)
    1530:	4b34      	ldr	r3, [pc, #208]	; (1604 <_spi_m_sync_trans+0x104>)
    1532:	4798      	blx	r3
	while(((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1534:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(hw, ( SERCOM_SPI_SYNCBUSY_SWRST |
    1536:	075b      	lsls	r3, r3, #29
    1538:	d14b      	bne.n	15d2 <_spi_m_sync_trans+0xd2>
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	while(((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {};
    153a:	2203      	movs	r2, #3
    153c:	69e3      	ldr	r3, [r4, #28]
    153e:	421a      	tst	r2, r3
    1540:	d1fc      	bne.n	153c <_spi_m_sync_trans+0x3c>

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw) 
{
        uint32_t tmp;
        hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST|SERCOM_SPI_SYNCBUSY_ENABLE);
        tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1542:	6823      	ldr	r3, [r4, #0]
			SERCOM_SPI_SYNCBUSY_CTRLB ))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    1544:	079b      	lsls	r3, r3, #30
    1546:	d547      	bpl.n	15d8 <_spi_m_sync_trans+0xd8>
    1548:	2200      	movs	r2, #0
    154a:	2000      	movs	r0, #0
		const uint32_t iflag,
		struct _spi_trans_ctrl *ctrl)
{
	uint32_t data;

	if (!( iflag & SERCOM_SPI_INTFLAG_RXC )) {
    154c:	2304      	movs	r3, #4
    154e:	469c      	mov	ip, r3
}

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    1550:	217f      	movs	r1, #127	; 0x7f
    1552:	9601      	str	r6, [sp, #4]
        return tmp;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw) 
{
        return ((Sercom *)hw)->SPI.INTFLAG.reg;
    1554:	7e23      	ldrb	r3, [r4, #24]
    1556:	b2db      	uxtb	r3, r3
		const uint32_t iflag,
		struct _spi_trans_ctrl *ctrl)
{
	uint32_t data;

	if (!( iflag & SERCOM_SPI_INTFLAG_RXC )) {
    1558:	4667      	mov	r7, ip
    155a:	421f      	tst	r7, r3
    155c:	d03f      	beq.n	15de <_spi_m_sync_trans+0xde>
        return ((Sercom *)hw)->SPI.ADDR.reg;
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw) 
{
        return ((Sercom *)hw)->SPI.DATA.reg;
    155e:	6aa7      	ldr	r7, [r4, #40]	; 0x28
		return false;
	}

	data = hri_sercomspi_read_DATA_reg(hw);

	if (ctrl->rxbuf) {
    1560:	2d00      	cmp	r5, #0
    1562:	d008      	beq.n	1576 <_spi_m_sync_trans+0x76>
		*ctrl->rxbuf++ = (uint8_t)data;
    1564:	702f      	strb	r7, [r5, #0]

		if (ctrl->char_size > 1) {
    1566:	465e      	mov	r6, fp
    1568:	2e01      	cmp	r6, #1
    156a:	d801      	bhi.n	1570 <_spi_m_sync_trans+0x70>
	}

	data = hri_sercomspi_read_DATA_reg(hw);

	if (ctrl->rxbuf) {
		*ctrl->rxbuf++ = (uint8_t)data;
    156c:	3501      	adds	r5, #1
    156e:	e002      	b.n	1576 <_spi_m_sync_trans+0x76>

		if (ctrl->char_size > 1) {
			*ctrl->rxbuf++ = (uint8_t)( data >> 8 );
    1570:	0a3f      	lsrs	r7, r7, #8
    1572:	706f      	strb	r7, [r5, #1]
    1574:	3502      	adds	r5, #2
		}
	}

	ctrl->rxcnt++;
    1576:	3201      	adds	r2, #1
    1578:	e018      	b.n	15ac <_spi_m_sync_trans+0xac>

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    157a:	464e      	mov	r6, r9
    157c:	88f7      	ldrh	r7, [r6, #6]
		struct _spi_trans_ctrl *ctrl,
		uint16_t dummy)
{
	uint32_t data;

	if (!( SERCOM_SPI_INTFLAG_DRE & iflag )) {
    157e:	2601      	movs	r6, #1
    1580:	421e      	tst	r6, r3
    1582:	d013      	beq.n	15ac <_spi_m_sync_trans+0xac>
		return;
	}

	if (ctrl->txbuf) {
    1584:	4646      	mov	r6, r8
    1586:	2e00      	cmp	r6, #0
    1588:	d00e      	beq.n	15a8 <_spi_m_sync_trans+0xa8>
		data = *ctrl->txbuf++;
    158a:	7837      	ldrb	r7, [r6, #0]

		if (ctrl->char_size > 1) {
    158c:	465e      	mov	r6, fp
    158e:	2e01      	cmp	r6, #1
    1590:	d803      	bhi.n	159a <_spi_m_sync_trans+0x9a>
	if (!( SERCOM_SPI_INTFLAG_DRE & iflag )) {
		return;
	}

	if (ctrl->txbuf) {
		data = *ctrl->txbuf++;
    1592:	2601      	movs	r6, #1
    1594:	46b2      	mov	sl, r6
    1596:	44d0      	add	r8, sl
    1598:	e006      	b.n	15a8 <_spi_m_sync_trans+0xa8>

		if (ctrl->char_size > 1) {
			data |= ( *ctrl->txbuf ) << 8;
    159a:	4646      	mov	r6, r8
    159c:	7876      	ldrb	r6, [r6, #1]
    159e:	0236      	lsls	r6, r6, #8
    15a0:	4337      	orrs	r7, r6
			ctrl->txbuf++;
    15a2:	2602      	movs	r6, #2
    15a4:	46b2      	mov	sl, r6
    15a6:	44d0      	add	r8, sl
		}
	} else {
		data = dummy;
	}

	ctrl->txcnt++;
    15a8:	3001      	adds	r0, #1
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data) 
{
        SERCOM_CRITICAL_SECTION_ENTER();
        ((Sercom *)hw)->SPI.DATA.reg = data;
    15aa:	62a7      	str	r7, [r4, #40]	; 0x28
}

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    15ac:	438b      	bics	r3, r1
    15ae:	d019      	beq.n	15e4 <_spi_m_sync_trans+0xe4>
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask) 
{
        SERCOM_CRITICAL_SECTION_ENTER();
        ((Sercom *)hw)->SPI.STATUS.reg = mask;
    15b0:	2301      	movs	r3, #1
    15b2:	425b      	negs	r3, r3
    15b4:	8363      	strh	r3, [r4, #26]
        return ((Sercom *)hw)->SPI.INTFLAG.reg;
}

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask) 
{
        ((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    15b6:	3381      	adds	r3, #129	; 0x81
    15b8:	7623      	strb	r3, [r4, #24]
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		return ERR_OVERFLOW;
    15ba:	2013      	movs	r0, #19
    15bc:	4240      	negs	r0, r0
    15be:	e001      	b.n	15c4 <_spi_m_sync_trans+0xc4>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    15c0:	4293      	cmp	r3, r2
    15c2:	d8c7      	bhi.n	1554 <_spi_m_sync_trans+0x54>

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask) 
{
    uint8_t tmp; 
        tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
        tmp &= mask;
    15c4:	2203      	movs	r2, #3
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask) 
{
    uint8_t tmp; 
        tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    15c6:	7e23      	ldrb	r3, [r4, #24]
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
	while(!( hri_sercomspi_get_INTFLAG_reg(hw,
    15c8:	4213      	tst	r3, r2
    15ca:	d0fc      	beq.n	15c6 <_spi_m_sync_trans+0xc6>
        return ((Sercom *)hw)->SPI.INTFLAG.reg;
}

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask) 
{
        ((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    15cc:	2303      	movs	r3, #3
    15ce:	7623      	strb	r3, [r4, #24]
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
    15d0:	e00d      	b.n	15ee <_spi_m_sync_trans+0xee>

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(hw, ( SERCOM_SPI_SYNCBUSY_SWRST |
			SERCOM_SPI_SYNCBUSY_ENABLE |
			SERCOM_SPI_SYNCBUSY_CTRLB ))) {
		return ERR_BUSY;
    15d2:	2004      	movs	r0, #4
    15d4:	4240      	negs	r0, r0
    15d6:	e00a      	b.n	15ee <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
		return ERR_NOT_INITIALIZED;
    15d8:	2014      	movs	r0, #20
    15da:	4240      	negs	r0, r0
    15dc:	e007      	b.n	15ee <_spi_m_sync_trans+0xee>
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    15de:	4282      	cmp	r2, r0
    15e0:	d3e4      	bcc.n	15ac <_spi_m_sync_trans+0xac>
    15e2:	e7ca      	b.n	157a <_spi_m_sync_trans+0x7a>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    15e4:	9b01      	ldr	r3, [sp, #4]
    15e6:	689b      	ldr	r3, [r3, #8]
    15e8:	4298      	cmp	r0, r3
    15ea:	d2e9      	bcs.n	15c0 <_spi_m_sync_trans+0xc0>
    15ec:	e7b2      	b.n	1554 <_spi_m_sync_trans+0x54>
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    15ee:	b003      	add	sp, #12
    15f0:	bc3c      	pop	{r2, r3, r4, r5}
    15f2:	4690      	mov	r8, r2
    15f4:	4699      	mov	r9, r3
    15f6:	46a2      	mov	sl, r4
    15f8:	46ab      	mov	fp, r5
    15fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    15fc:	00003028 	.word	0x00003028
    1600:	00000b5a 	.word	0x00000b5a
    1604:	00002d79 	.word	0x00002d79

00001608 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw) 
{
        uint32_t tmp;
        tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1608:	4b11      	ldr	r3, [pc, #68]	; (1650 <_sysctrl_init_sources+0x48>)
    160a:	6a1a      	ldr	r2, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw) 
{
        uint32_t tmp;
        tmp = ((Sysctrl *)hw)->OSC8M.reg;
    160c:	6a19      	ldr	r1, [r3, #32]
        tmp = (tmp & SYSCTRL_OSC8M_FRANGE_Msk) >> SYSCTRL_OSC8M_FRANGE_Pos;
    160e:	0f89      	lsrs	r1, r1, #30

#if CONF_OSC8M_CONFIG == 1
		calib = hri_sysctrl_read_OSC8M_CALIB_bf(hw);

		hri_sysctrl_write_OSC8M_reg(hw,
			SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    1610:	0789      	lsls	r1, r1, #30
    1612:	2002      	movs	r0, #2
    1614:	4308      	orrs	r0, r1
#    if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
				SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#    else
					SYSCTRL_OSC8M_CALIB(calib) |
    1616:	490f      	ldr	r1, [pc, #60]	; (1654 <_sysctrl_init_sources+0x4c>)
    1618:	400a      	ands	r2, r1
#endif

#if CONF_OSC8M_CONFIG == 1
		calib = hri_sysctrl_read_OSC8M_CALIB_bf(hw);

		hri_sysctrl_write_OSC8M_reg(hw,
    161a:	4302      	orrs	r2, r0
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data) 
{
        SYSCTRL_CRITICAL_SECTION_ENTER();
        ((Sysctrl *)hw)->OSC8M.reg = data;
    161c:	621a      	str	r2, [r3, #32]
				( CONF_OSC8M_RUNSTDBY << SYSCTRL_OSC8M_RUNSTDBY_Pos ) |
				( CONF_OSC8M_ENABLE << SYSCTRL_OSC8M_ENABLE_Pos ));
#endif

#if CONF_OSC32K_CONFIG == 1
				calib = SYSCTRL->OSC32K.bit.CALIB;
    161e:	699a      	ldr	r2, [r3, #24]
    1620:	0252      	lsls	r2, r2, #9
    1622:	0e52      	lsrs	r2, r2, #25

				hri_sysctrl_write_OSC32K_reg(hw,
#    if CONF_OSC32K_OVERWRITE_CALIBRATION == 1
				SYSCTRL_OSC32K_CALIB(CONF_OSC32K_CALIB) |
#    else
					SYSCTRL_OSC32K_CALIB(calib) |
    1624:	0411      	lsls	r1, r2, #16
#endif

#if CONF_OSC32K_CONFIG == 1
				calib = SYSCTRL->OSC32K.bit.CALIB;

				hri_sysctrl_write_OSC32K_reg(hw,
    1626:	480c      	ldr	r0, [pc, #48]	; (1658 <_sysctrl_init_sources+0x50>)
    1628:	4301      	orrs	r1, r0
}

static inline void hri_sysctrl_write_OSC32K_reg(const void *const hw, hri_sysctrl_osc32k_reg_t data) 
{
        SYSCTRL_CRITICAL_SECTION_ENTER();
        ((Sysctrl *)hw)->OSC32K.reg = data;
    162a:	6199      	str	r1, [r3, #24]
				    /* Enable OSC32K anyway since GCLK configuration may need it to sync */
					hri_sysctrl_set_OSC32K_ENABLE_bit(hw);
#endif

#if CONF_OSCULP32K_CONFIG == 1
					hri_sysctrl_write_OSCULP32K_reg(hw,
    162c:	211f      	movs	r1, #31
    162e:	400a      	ands	r2, r1
}

static inline void hri_sysctrl_write_OSCULP32K_reg(const void *const hw, hri_sysctrl_osculp32k_reg_t data) 
{
        SYSCTRL_CRITICAL_SECTION_ENTER();
        ((Sysctrl *)hw)->OSCULP32K.reg = data;
    1630:	771a      	strb	r2, [r3, #28]
}

static inline void hri_sysctrl_set_OSC32K_ONDEMAND_bit(const void *const hw) 
{
        SYSCTRL_CRITICAL_SECTION_ENTER();
        ((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ONDEMAND;
    1632:	6999      	ldr	r1, [r3, #24]
    1634:	2280      	movs	r2, #128	; 0x80
    1636:	430a      	orrs	r2, r1
    1638:	619a      	str	r2, [r3, #24]
        return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) >> SYSCTRL_PCLKSR_OSC32KRDY_Pos;
}

static inline bool hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(const void *const hw) 
{
        return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    163a:	1c19      	adds	r1, r3, #0
    163c:	2208      	movs	r2, #8
    163e:	68cb      	ldr	r3, [r1, #12]
#    endif
#endif

#if CONF_OSC8M_CONFIG == 1
#    if CONF_OSC8M_ENABLE == 1
					while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw)) {;
    1640:	421a      	tst	r2, r3
    1642:	d0fc      	beq.n	163e <_sysctrl_init_sources+0x36>
}

static inline void hri_sysctrl_set_OSC8M_ONDEMAND_bit(const void *const hw) 
{
        SYSCTRL_CRITICAL_SECTION_ENTER();
        ((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    1644:	4a02      	ldr	r2, [pc, #8]	; (1650 <_sysctrl_init_sources+0x48>)
    1646:	6a11      	ldr	r1, [r2, #32]
    1648:	2380      	movs	r3, #128	; 0x80
    164a:	430b      	orrs	r3, r1
    164c:	6213      	str	r3, [r2, #32]
					hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#    endif
#endif

			(void)calib, (void)hw;
}
    164e:	4770      	bx	lr
    1650:	40000800 	.word	0x40000800
    1654:	0fff0000 	.word	0x0fff0000
    1658:	0000030e 	.word	0x0000030e

0000165c <_sysctrl_init_referenced_generators>:
}

static inline void hri_sysctrl_clear_OSC32K_ENABLE_bit(const void *const hw) 
{
        SYSCTRL_CRITICAL_SECTION_ENTER();
        ((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    165c:	4a02      	ldr	r2, [pc, #8]	; (1668 <_sysctrl_init_referenced_generators+0xc>)
    165e:	6993      	ldr	r3, [r2, #24]
    1660:	2102      	movs	r1, #2
    1662:	438b      	bics	r3, r1
    1664:	6193      	str	r3, [r2, #24]
		    /* Disable after all possible configurations needs sync written. */
			hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

		(void)hw;
}
    1666:	4770      	bx	lr
    1668:	40000800 	.word	0x40000800

0000166c <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(void *p)
{
    166c:	b508      	push	{r3, lr}
	struct _timer_device *device = (struct _timer_device *)p;
	void *const hw = device->hw;
    166e:	68c3      	ldr	r3, [r0, #12]
        ((Tc *)hw)->COUNT8.INTENCLR.reg = mask;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw) 
{
        return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    1670:	7b9a      	ldrb	r2, [r3, #14]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    1672:	07d2      	lsls	r2, r2, #31
    1674:	d503      	bpl.n	167e <tc_interrupt_handler+0x12>
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw) 
{
        ((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1676:	2201      	movs	r2, #1
    1678:	739a      	strb	r2, [r3, #14]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    167a:	6803      	ldr	r3, [r0, #0]
    167c:	4798      	blx	r3
	}
}
    167e:	bd08      	pop	{r3, pc}

00001680 <_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _timer_init(struct _timer_device *const device, void *const hw)
{
    1680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1682:	1c07      	adds	r7, r0, #0
    1684:	1c0d      	adds	r5, r1, #0
 * \param[in] hw The pointer to hardware instance
 */
static uint8_t tc_get_hardware_index(const void *const hw)
{
#ifndef _UNIT_TEST_
		return ((uint32_t)hw - TC_HW_BASE_ADDR ) >> 10;
    1686:	4b39      	ldr	r3, [pc, #228]	; (176c <_timer_init+0xec>)
    1688:	18ce      	adds	r6, r1, r3
    168a:	0ab6      	lsrs	r6, r6, #10
    168c:	b2f6      	uxtb	r6, r6
{
	uint8_t tc_offset = tc_get_hardware_index(hw) + TC_NUMBER_OFFSET;
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
		if (_tcs[i].number == tc_offset) {
    168e:	2e00      	cmp	r6, #0
    1690:	d162      	bne.n	1758 <_timer_init+0xd8>
			return i;
    1692:	2400      	movs	r4, #0
 */
int32_t _timer_init(struct _timer_device *const device, void *const hw)
{
	int8_t i = get_tc_index(hw);

	device->hw = hw;
    1694:	60fd      	str	r5, [r7, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    1696:	2001      	movs	r0, #1
    1698:	4935      	ldr	r1, [pc, #212]	; (1770 <_timer_init+0xf0>)
    169a:	2295      	movs	r2, #149	; 0x95
    169c:	4b35      	ldr	r3, [pc, #212]	; (1774 <_timer_init+0xf4>)
    169e:	4798      	blx	r3
typedef uint8_t hri_tc_per_reg_t;
typedef uint8_t hri_tc_status_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw)
{
	while(((const Tc *)hw)->COUNT8.STATUS.bit.SYNCBUSY);
    16a0:	7beb      	ldrb	r3, [r5, #15]
    16a2:	09db      	lsrs	r3, r3, #7
    16a4:	d1fc      	bne.n	16a0 <_timer_init+0x20>
}

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw) 
{
        uint16_t tmp;
        tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    16a6:	882b      	ldrh	r3, [r5, #0]

	hri_tc_wait_for_sync(hw);

	if (hri_tc_get_CTRLA_ENABLE_bit(hw)) {
    16a8:	079b      	lsls	r3, r3, #30
    16aa:	d452      	bmi.n	1752 <_timer_init+0xd2>
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw) 
{
        TC_CRITICAL_SECTION_ENTER();
        ((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    16ac:	882a      	ldrh	r2, [r5, #0]
    16ae:	2301      	movs	r3, #1
    16b0:	4313      	orrs	r3, r2
    16b2:	802b      	strh	r3, [r5, #0]
typedef uint8_t hri_tc_per_reg_t;
typedef uint8_t hri_tc_status_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw)
{
	while(((const Tc *)hw)->COUNT8.STATUS.bit.SYNCBUSY);
    16b4:	7beb      	ldrb	r3, [r5, #15]
    16b6:	09db      	lsrs	r3, r3, #7
    16b8:	d1fc      	bne.n	16b4 <_timer_init+0x34>
	}

	hri_tc_set_CTRLA_SWRST_bit(hw);
	hri_tc_wait_for_sync(hw);

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    16ba:	b264      	sxtb	r4, r4
    16bc:	00a3      	lsls	r3, r4, #2
    16be:	191b      	adds	r3, r3, r4
    16c0:	009b      	lsls	r3, r3, #2
    16c2:	4a2d      	ldr	r2, [pc, #180]	; (1778 <_timer_init+0xf8>)
    16c4:	18d3      	adds	r3, r2, r3
    16c6:	885a      	ldrh	r2, [r3, #2]
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data) 
{
        TC_CRITICAL_SECTION_ENTER();
        ((Tc *)hw)->COUNT8.CTRLA.reg = data;
    16c8:	802a      	strh	r2, [r5, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    16ca:	7919      	ldrb	r1, [r3, #4]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data) 
{
        TC_CRITICAL_SECTION_ENTER();
        ((Tc *)hw)->COUNT8.DBGCTRL.reg = data;
    16cc:	7229      	strb	r1, [r5, #8]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    16ce:	88db      	ldrh	r3, [r3, #6]
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data) 
{
        TC_CRITICAL_SECTION_ENTER();
        ((Tc *)hw)->COUNT8.EVCTRL.reg = data;
    16d0:	816b      	strh	r3, [r5, #10]

	if (( _tcs[i].ctrl_a & TC_CTRLA_MODE_Msk ) == TC_CTRLA_MODE_COUNT32) {
    16d2:	230c      	movs	r3, #12
    16d4:	4013      	ands	r3, r2
    16d6:	2b08      	cmp	r3, #8
    16d8:	d109      	bne.n	16ee <_timer_init+0x6e>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    16da:	00a3      	lsls	r3, r4, #2
    16dc:	191c      	adds	r4, r3, r4
    16de:	00a4      	lsls	r4, r4, #2
    16e0:	4b25      	ldr	r3, [pc, #148]	; (1778 <_timer_init+0xf8>)
    16e2:	191b      	adds	r3, r3, r4
    16e4:	68db      	ldr	r3, [r3, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tc_cc32_reg_t data) 
{
        TC_CRITICAL_SECTION_ENTER();
        ((Tc *)hw)->COUNT32.CC[index].reg = data;
    16e6:	61ab      	str	r3, [r5, #24]
    16e8:	2300      	movs	r3, #0
    16ea:	61eb      	str	r3, [r5, #28]
    16ec:	e01b      	b.n	1726 <_timer_init+0xa6>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
	} else if (( _tcs[i].ctrl_a & TC_CTRLA_MODE_Msk ) ==
    16ee:	2b00      	cmp	r3, #0
    16f0:	d109      	bne.n	1706 <_timer_init+0x86>
			TC_CTRLA_MODE_COUNT16) {
		hri_tccount16_write_CC_reg(hw, 0, (hri_tc_count16_reg_t)_tcs[i].cc0);
    16f2:	00a3      	lsls	r3, r4, #2
    16f4:	191c      	adds	r4, r3, r4
    16f6:	00a4      	lsls	r4, r4, #2
    16f8:	4b1f      	ldr	r3, [pc, #124]	; (1778 <_timer_init+0xf8>)
    16fa:	191b      	adds	r3, r3, r4
    16fc:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tc_cc16_reg_t data) 
{
        TC_CRITICAL_SECTION_ENTER();
        ((Tc *)hw)->COUNT16.CC[index].reg = data;
    16fe:	832b      	strh	r3, [r5, #24]
    1700:	2300      	movs	r3, #0
    1702:	836b      	strh	r3, [r5, #26]
    1704:	e00f      	b.n	1726 <_timer_init+0xa6>
		hri_tccount16_write_CC_reg(hw, 1, (hri_tc_count16_reg_t)_tcs[i].cc1);
	} else if (( _tcs[i].ctrl_a & TC_CTRLA_MODE_Msk ) ==
    1706:	2b04      	cmp	r3, #4
    1708:	d10d      	bne.n	1726 <_timer_init+0xa6>
			TC_CTRLA_MODE_COUNT8) {
		hri_tccount8_write_CC_reg(hw, 0, (hri_tc_count8_reg_t)_tcs[i].cc0);
    170a:	4b1b      	ldr	r3, [pc, #108]	; (1778 <_timer_init+0xf8>)
    170c:	00a1      	lsls	r1, r4, #2
    170e:	190a      	adds	r2, r1, r4
    1710:	0092      	lsls	r2, r2, #2
    1712:	189a      	adds	r2, r3, r2
    1714:	7b12      	ldrb	r2, [r2, #12]
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tc_cc8_reg_t data) 
{
        TC_CRITICAL_SECTION_ENTER();
        ((Tc *)hw)->COUNT8.CC[index].reg = data;
    1716:	762a      	strb	r2, [r5, #24]
    1718:	2200      	movs	r2, #0
    171a:	766a      	strb	r2, [r5, #25]
		hri_tccount8_write_CC_reg(hw, 1, (hri_tc_count8_reg_t)_tcs[i].cc1);
		hri_tc_write_PER_reg(hw, _tcs[i].per);
    171c:	190c      	adds	r4, r1, r4
    171e:	00a4      	lsls	r4, r4, #2
    1720:	191b      	adds	r3, r3, r4
    1722:	7a1b      	ldrb	r3, [r3, #8]
}

static inline void hri_tc_write_PER_reg(const void *const hw, hri_tc_per_reg_t data) 
{
        TC_CRITICAL_SECTION_ENTER();
        ((Tc *)hw)->COUNT8.PER.reg = data;
    1724:	752b      	strb	r3, [r5, #20]
	return ((const Tc *)hw)->COUNT8.STATUS.bit.SYNCBUSY;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw) 
{
        ((Tc *)hw)->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    1726:	2301      	movs	r3, #1
    1728:	736b      	strb	r3, [r5, #13]
	}

	hri_tc_set_INTEN_OVF_bit(hw);

	device->irq.handler = tc_interrupt_handler;
    172a:	4b14      	ldr	r3, [pc, #80]	; (177c <_timer_init+0xfc>)
    172c:	607b      	str	r3, [r7, #4]
	device->irq.parameter = (void *)device;
    172e:	60bf      	str	r7, [r7, #8]
	_irq_disable((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX +
    1730:	3612      	adds	r6, #18
    1732:	b2f6      	uxtb	r6, r6
    1734:	1c30      	adds	r0, r6, #0
    1736:	4b12      	ldr	r3, [pc, #72]	; (1780 <_timer_init+0x100>)
    1738:	4798      	blx	r3
				tc_get_hardware_index(hw)));
	_irq_clear((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX +
    173a:	1c30      	adds	r0, r6, #0
    173c:	4b11      	ldr	r3, [pc, #68]	; (1784 <_timer_init+0x104>)
    173e:	4798      	blx	r3
				tc_get_hardware_index(hw)));
	_irq_register((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX +
    1740:	1d39      	adds	r1, r7, #4
    1742:	1c30      	adds	r0, r6, #0
    1744:	4b10      	ldr	r3, [pc, #64]	; (1788 <_timer_init+0x108>)
    1746:	4798      	blx	r3
				tc_get_hardware_index(hw)),
			&device->irq);
	_irq_enable((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX +
    1748:	1c30      	adds	r0, r6, #0
    174a:	4b10      	ldr	r3, [pc, #64]	; (178c <_timer_init+0x10c>)
    174c:	4798      	blx	r3
				tc_get_hardware_index(hw)));

	return ERR_NONE;
    174e:	2000      	movs	r0, #0
    1750:	e00a      	b.n	1768 <_timer_init+0xe8>
	ASSERT(ARRAY_SIZE(_tcs));

	hri_tc_wait_for_sync(hw);

	if (hri_tc_get_CTRLA_ENABLE_bit(hw)) {
		return ERR_DENIED;
    1752:	2011      	movs	r0, #17
    1754:	4240      	negs	r0, r0
    1756:	e007      	b.n	1768 <_timer_init+0xe8>
		if (_tcs[i].number == tc_offset) {
			return i;
		}
	}

	ASSERT(false);
    1758:	2000      	movs	r0, #0
    175a:	4905      	ldr	r1, [pc, #20]	; (1770 <_timer_init+0xf0>)
    175c:	22aa      	movs	r2, #170	; 0xaa
    175e:	0052      	lsls	r2, r2, #1
    1760:	4b04      	ldr	r3, [pc, #16]	; (1774 <_timer_init+0xf4>)
    1762:	4798      	blx	r3
	return -1;
    1764:	24ff      	movs	r4, #255	; 0xff
    1766:	e795      	b.n	1694 <_timer_init+0x14>
			&device->irq);
	_irq_enable((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX +
				tc_get_hardware_index(hw)));

	return ERR_NONE;
}
    1768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    176a:	46c0      	nop			; (mov r8, r8)
    176c:	bdffd400 	.word	0xbdffd400
    1770:	00003060 	.word	0x00003060
    1774:	00002d79 	.word	0x00002d79
    1778:	0000304c 	.word	0x0000304c
    177c:	0000166d 	.word	0x0000166d
    1780:	000007b9 	.word	0x000007b9
    1784:	000007d1 	.word	0x000007d1
    1788:	000007fd 	.word	0x000007fd
    178c:	000007e9 	.word	0x000007e9

00001790 <_tc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
	return NULL;
}
    1790:	2000      	movs	r0, #0
    1792:	4770      	bx	lr

00001794 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    1794:	b570      	push	{r4, r5, r6, lr}
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1796:	7c83      	ldrb	r3, [r0, #18]
    1798:	220f      	movs	r2, #15
    179a:	4013      	ands	r3, r2
	bool is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    179c:	7cc1      	ldrb	r1, [r0, #19]

	if (!is_ctrl) {
    179e:	3a08      	subs	r2, #8
    17a0:	400a      	ands	r2, r1
    17a2:	2a01      	cmp	r2, #1
    17a4:	d00b      	beq.n	17be <_usb_d_dev_handle_setup+0x2a>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    17a6:	015a      	lsls	r2, r3, #5
    17a8:	4919      	ldr	r1, [pc, #100]	; (1810 <_usb_d_dev_handle_setup+0x7c>)
    17aa:	468c      	mov	ip, r1
    17ac:	4462      	add	r2, ip
    17ae:	2110      	movs	r1, #16
    17b0:	71d1      	strb	r1, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = value << USB_DEVICE_EPINTENSET_RXSTP_Pos;
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    17b2:	015b      	lsls	r3, r3, #5
    17b4:	4a17      	ldr	r2, [pc, #92]	; (1814 <_usb_d_dev_handle_setup+0x80>)
    17b6:	4694      	mov	ip, r2
    17b8:	4463      	add	r3, ip
    17ba:	7019      	strb	r1, [r3, #0]
    17bc:	e027      	b.n	180e <_usb_d_dev_handle_setup+0x7a>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    17be:	064a      	lsls	r2, r1, #25
    17c0:	d50e      	bpl.n	17e0 <_usb_d_dev_handle_setup+0x4c>
		ept->flags.bits.is_busy = 0;
    17c2:	7cc2      	ldrb	r2, [r0, #19]
    17c4:	2140      	movs	r1, #64	; 0x40
    17c6:	438a      	bics	r2, r1
    17c8:	74c2      	strb	r2, [r0, #19]
    17ca:	015a      	lsls	r2, r3, #5
    17cc:	4c12      	ldr	r4, [pc, #72]	; (1818 <_usb_d_dev_handle_setup+0x84>)
    17ce:	46a4      	mov	ip, r4
    17d0:	4462      	add	r2, ip
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epstatus_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    17d2:	2580      	movs	r5, #128	; 0x80
    17d4:	2482      	movs	r4, #130	; 0x82
    17d6:	0064      	lsls	r4, r4, #1
    17d8:	5515      	strb	r5, [r2, r4]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg & mask;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epstatus_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    17da:	2406      	movs	r4, #6
    17dc:	34ff      	adds	r4, #255	; 0xff
    17de:	5511      	strb	r1, [r2, r4]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    17e0:	7cc2      	ldrb	r2, [r0, #19]
    17e2:	2108      	movs	r1, #8
    17e4:	438a      	bics	r2, r1
    17e6:	74c2      	strb	r2, [r0, #19]
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
	bank->STATUS_BK.reg = 0;
    17e8:	4c0c      	ldr	r4, [pc, #48]	; (181c <_usb_d_dev_handle_setup+0x88>)
    17ea:	015a      	lsls	r2, r3, #5
    17ec:	18a1      	adds	r1, r4, r2
    17ee:	2500      	movs	r5, #0
    17f0:	728d      	strb	r5, [r1, #10]
    17f2:	768d      	strb	r5, [r1, #26]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    17f4:	1c13      	adds	r3, r2, #0
    17f6:	4906      	ldr	r1, [pc, #24]	; (1810 <_usb_d_dev_handle_setup+0x7c>)
    17f8:	468c      	mov	ip, r1
    17fa:	4463      	add	r3, ip
    17fc:	216f      	movs	r1, #111	; 0x6f
    17fe:	71d9      	strb	r1, [r3, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epinten_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1800:	4b04      	ldr	r3, [pc, #16]	; (1814 <_usb_d_dev_handle_setup+0x80>)
    1802:	469c      	mov	ip, r3
    1804:	4462      	add	r2, ip
    1806:	7011      	strb	r1, [r2, #0]
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    1808:	7c80      	ldrb	r0, [r0, #18]
    180a:	6f23      	ldr	r3, [r4, #112]	; 0x70
    180c:	4798      	blx	r3
}
    180e:	bd70      	pop	{r4, r5, r6, pc}
    1810:	41005100 	.word	0x41005100
    1814:	41005108 	.word	0x41005108
    1818:	41005000 	.word	0x41005000
    181c:	20000060 	.word	0x20000060

00001820 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    1820:	2000      	movs	r0, #0
    1822:	4770      	bx	lr

00001824 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    1824:	b510      	push	{r4, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    1826:	7c84      	ldrb	r4, [r0, #18]
    1828:	2cff      	cmp	r4, #255	; 0xff
    182a:	d00c      	beq.n	1846 <_usb_d_dev_trans_done+0x22>
    182c:	7cc3      	ldrb	r3, [r0, #19]
    182e:	065b      	lsls	r3, r3, #25
    1830:	d509      	bpl.n	1846 <_usb_d_dev_trans_done+0x22>
    1832:	1c03      	adds	r3, r0, #0
		return;
	}
	ept->flags.bits.is_busy = 0;
    1834:	7cc2      	ldrb	r2, [r0, #19]
    1836:	2040      	movs	r0, #64	; 0x40
    1838:	4382      	bics	r2, r0
    183a:	74da      	strb	r2, [r3, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    183c:	689a      	ldr	r2, [r3, #8]
    183e:	4b02      	ldr	r3, [pc, #8]	; (1848 <_usb_d_dev_trans_done+0x24>)
    1840:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    1842:	1c20      	adds	r0, r4, #0
    1844:	4798      	blx	r3
}
    1846:	bd10      	pop	{r4, pc}
    1848:	20000060 	.word	0x20000060

0000184c <_usb_d_dev_handle_stall>:
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept,
		const uint8_t bank_n)
{
    184c:	b508      	push	{r3, lr}
		const bool en)
{
	if (en) {
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    184e:	2320      	movs	r3, #32
    1850:	408b      	lsls	r3, r1
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    1852:	b2d9      	uxtb	r1, r3
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept,
		const uint8_t bank_n)
{
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1854:	7c83      	ldrb	r3, [r0, #18]
    1856:	220f      	movs	r2, #15
    1858:	4013      	ands	r3, r2
    185a:	015b      	lsls	r3, r3, #5
    185c:	4a03      	ldr	r2, [pc, #12]	; (186c <_usb_d_dev_handle_stall+0x20>)
    185e:	4694      	mov	ip, r2
    1860:	4463      	add	r3, ip
    1862:	7019      	strb	r1, [r3, #0]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	_usb_d_dev_trans_done(ept, USB_TRANS_STALL);
    1864:	2101      	movs	r1, #1
    1866:	4b02      	ldr	r3, [pc, #8]	; (1870 <_usb_d_dev_handle_stall+0x24>)
    1868:	4798      	blx	r3
}
    186a:	bd08      	pop	{r3, pc}
    186c:	41005108 	.word	0x41005108
    1870:	00001825 	.word	0x00001825

00001874 <_usb_d_dev_trans_stop>:
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir,
		const int32_t code)
{
    1874:	b5f0      	push	{r4, r5, r6, r7, lr}
    1876:	b083      	sub	sp, #12
    1878:	1c07      	adds	r7, r0, #0
    187a:	1c0e      	adds	r6, r1, #0
    187c:	1c15      	adds	r5, r2, #0
	uint8_t epn = USB_EP_GET_N(ept->ep);;
    187e:	7c84      	ldrb	r4, [r0, #18]
	const uint8_t intflags[2] = {
    1880:	a801      	add	r0, sp, #4
    1882:	4916      	ldr	r1, [pc, #88]	; (18dc <_usb_d_dev_trans_stop+0x68>)
    1884:	2202      	movs	r2, #2
    1886:	4b16      	ldr	r3, [pc, #88]	; (18e0 <_usb_d_dev_trans_stop+0x6c>)
    1888:	4798      	blx	r3
		USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS
	};
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    188a:	2cff      	cmp	r4, #255	; 0xff
    188c:	d023      	beq.n	18d6 <_usb_d_dev_trans_stop+0x62>
    188e:	7cfb      	ldrb	r3, [r7, #19]
    1890:	065b      	lsls	r3, r3, #25
    1892:	d520      	bpl.n	18d6 <_usb_d_dev_trans_stop+0x62>
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir,
		const int32_t code)
{
	uint8_t epn = USB_EP_GET_N(ept->ep);;
    1894:	230f      	movs	r3, #15
    1896:	4023      	ands	r3, r4
	};
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
		return;
	}
	/* Stop transfer */
	if (dir) {
    1898:	2e00      	cmp	r6, #0
    189a:	d006      	beq.n	18aa <_usb_d_dev_trans_stop+0x36>
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epstatus_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    189c:	015a      	lsls	r2, r3, #5
    189e:	4911      	ldr	r1, [pc, #68]	; (18e4 <_usb_d_dev_trans_stop+0x70>)
    18a0:	468c      	mov	ip, r1
    18a2:	4462      	add	r2, ip
    18a4:	2180      	movs	r1, #128	; 0x80
    18a6:	7111      	strb	r1, [r2, #4]
    18a8:	e005      	b.n	18b6 <_usb_d_dev_trans_stop+0x42>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg & mask;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epstatus_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    18aa:	015a      	lsls	r2, r3, #5
    18ac:	490d      	ldr	r1, [pc, #52]	; (18e4 <_usb_d_dev_trans_stop+0x70>)
    18ae:	468c      	mov	ip, r1
    18b0:	4462      	add	r2, ip
    18b2:	2140      	movs	r1, #64	; 0x40
    18b4:	7151      	strb	r1, [r2, #5]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    18b6:	aa01      	add	r2, sp, #4
    18b8:	5d91      	ldrb	r1, [r2, r6]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    18ba:	015a      	lsls	r2, r3, #5
    18bc:	4809      	ldr	r0, [pc, #36]	; (18e4 <_usb_d_dev_trans_stop+0x70>)
    18be:	4684      	mov	ip, r0
    18c0:	4462      	add	r2, ip
    18c2:	71d1      	strb	r1, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epinten_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    18c4:	015b      	lsls	r3, r3, #5
    18c6:	4a08      	ldr	r2, [pc, #32]	; (18e8 <_usb_d_dev_trans_stop+0x74>)
    18c8:	4694      	mov	ip, r2
    18ca:	4463      	add	r3, ip
    18cc:	7019      	strb	r1, [r3, #0]
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    18ce:	1c38      	adds	r0, r7, #0
    18d0:	1c29      	adds	r1, r5, #0
    18d2:	4b06      	ldr	r3, [pc, #24]	; (18ec <_usb_d_dev_trans_stop+0x78>)
    18d4:	4798      	blx	r3
}
    18d6:	b003      	add	sp, #12
    18d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    18da:	46c0      	nop			; (mov r8, r8)
    18dc:	00003080 	.word	0x00003080
    18e0:	00002e8d 	.word	0x00002e8d
    18e4:	41005100 	.word	0x41005100
    18e8:	41005108 	.word	0x41005108
    18ec:	00001825 	.word	0x00001825

000018f0 <_usb_d_dev_handle_trfail>:
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept,
		const uint8_t bank_n)
{
    18f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    18f2:	b083      	sub	sp, #12
    18f4:	1c06      	adds	r6, r0, #0
    18f6:	1c0d      	adds	r5, r1, #0
	Usb *hw = USB;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    18f8:	7c83      	ldrb	r3, [r0, #18]
    18fa:	240f      	movs	r4, #15
    18fc:	401c      	ands	r4, r3
	const uint8_t fail[2] = {
    18fe:	a801      	add	r0, sp, #4
    1900:	4939      	ldr	r1, [pc, #228]	; (19e8 <_usb_d_dev_handle_trfail+0xf8>)
    1902:	3104      	adds	r1, #4
    1904:	2202      	movs	r2, #2
    1906:	4b39      	ldr	r3, [pc, #228]	; (19ec <_usb_d_dev_handle_trfail+0xfc>)
    1908:	4798      	blx	r3
		USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1
	};
	UsbDeviceDescBank *bank = prvt_inst.desc_table[epn].DeviceDescBank;
    190a:	0163      	lsls	r3, r4, #5
    190c:	4838      	ldr	r0, [pc, #224]	; (19f0 <_usb_d_dev_handle_trfail+0x100>)
    190e:	18c0      	adds	r0, r0, r3
	uint8_t eptype = bank_n ?
    1910:	2d00      	cmp	r5, #0
    1912:	d007      	beq.n	1924 <_usb_d_dev_handle_trfail+0x34>
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw, uint8_t submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1914:	1c23      	adds	r3, r4, #0
    1916:	3308      	adds	r3, #8
    1918:	015b      	lsls	r3, r3, #5
    191a:	4a36      	ldr	r2, [pc, #216]	; (19f4 <_usb_d_dev_handle_trfail+0x104>)
    191c:	5c9a      	ldrb	r2, [r3, r2]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    191e:	0652      	lsls	r2, r2, #25
    1920:	0f52      	lsrs	r2, r2, #29
    1922:	e006      	b.n	1932 <_usb_d_dev_handle_trfail+0x42>
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw, uint8_t submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1924:	1c23      	adds	r3, r4, #0
    1926:	3308      	adds	r3, #8
    1928:	015b      	lsls	r3, r3, #5
    192a:	4a32      	ldr	r2, [pc, #200]	; (19f4 <_usb_d_dev_handle_trfail+0x104>)
    192c:	5c9b      	ldrb	r3, [r3, r2]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    192e:	2207      	movs	r2, #7
    1930:	401a      	ands	r2, r3
			hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) :
			hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1932:	7cf7      	ldrb	r7, [r6, #19]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    1934:	0129      	lsls	r1, r5, #4
    1936:	1843      	adds	r3, r0, r1
    1938:	7a99      	ldrb	r1, [r3, #10]
    193a:	b2c9      	uxtb	r1, r1

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    193c:	2a02      	cmp	r2, #2
    193e:	d119      	bne.n	1974 <_usb_d_dev_handle_trfail+0x84>
    1940:	07ca      	lsls	r2, r1, #31
    1942:	d517      	bpl.n	1974 <_usb_d_dev_handle_trfail+0x84>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    1944:	7a9a      	ldrb	r2, [r3, #10]
    1946:	2101      	movs	r1, #1
    1948:	438a      	bics	r2, r1
    194a:	729a      	strb	r2, [r3, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    194c:	ab01      	add	r3, sp, #4
    194e:	5d5a      	ldrb	r2, [r3, r5]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1950:	0163      	lsls	r3, r4, #5
    1952:	4929      	ldr	r1, [pc, #164]	; (19f8 <_usb_d_dev_handle_trfail+0x108>)
    1954:	468c      	mov	ip, r1
    1956:	4463      	add	r3, ip
    1958:	71da      	strb	r2, [r3, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epinten_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    195a:	0164      	lsls	r4, r4, #5
    195c:	4b27      	ldr	r3, [pc, #156]	; (19fc <_usb_d_dev_handle_trfail+0x10c>)
    195e:	469c      	mov	ip, r3
    1960:	4464      	add	r4, ip
    1962:	7022      	strb	r2, [r4, #0]
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    1964:	1e69      	subs	r1, r5, #1
    1966:	418d      	sbcs	r5, r1
    1968:	b2e9      	uxtb	r1, r5
    196a:	1c30      	adds	r0, r6, #0
    196c:	2204      	movs	r2, #4
    196e:	4b24      	ldr	r3, [pc, #144]	; (1a00 <_usb_d_dev_handle_trfail+0x110>)
    1970:	4798      	blx	r3
    1972:	e036      	b.n	19e2 <_usb_d_dev_handle_trfail+0xf2>
	} else if (st.bit.ERRORFLOW) {
    1974:	078a      	lsls	r2, r1, #30
    1976:	d520      	bpl.n	19ba <_usb_d_dev_handle_trfail+0xca>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    1978:	7a9a      	ldrb	r2, [r3, #10]
    197a:	2102      	movs	r1, #2
    197c:	438a      	bics	r2, r1
    197e:	729a      	strb	r2, [r3, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1980:	aa01      	add	r2, sp, #4
    1982:	5d51      	ldrb	r1, [r2, r5]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1984:	0163      	lsls	r3, r4, #5
    1986:	481c      	ldr	r0, [pc, #112]	; (19f8 <_usb_d_dev_handle_trfail+0x108>)
    1988:	4684      	mov	ip, r0
    198a:	4463      	add	r3, ip
    198c:	71d9      	strb	r1, [r3, #7]
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    198e:	5d53      	ldrb	r3, [r2, r5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epinten_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1990:	0164      	lsls	r4, r4, #5
    1992:	4a1a      	ldr	r2, [pc, #104]	; (19fc <_usb_d_dev_handle_trfail+0x10c>)
    1994:	4694      	mov	ip, r2
    1996:	4464      	add	r4, ip
    1998:	7023      	strb	r3, [r4, #0]
		/* Abort control transfer. */
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    199a:	2307      	movs	r3, #7
    199c:	403b      	ands	r3, r7
    199e:	2b01      	cmp	r3, #1
    19a0:	d11f      	bne.n	19e2 <_usb_d_dev_handle_trfail+0xf2>
    19a2:	7cf3      	ldrb	r3, [r6, #19]
    19a4:	065b      	lsls	r3, r3, #25
    19a6:	d51c      	bpl.n	19e2 <_usb_d_dev_handle_trfail+0xf2>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    19a8:	7cf1      	ldrb	r1, [r6, #19]
    19aa:	09c9      	lsrs	r1, r1, #7
    19ac:	42a9      	cmp	r1, r5
    19ae:	d018      	beq.n	19e2 <_usb_d_dev_handle_trfail+0xf2>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept),
    19b0:	1c30      	adds	r0, r6, #0
    19b2:	2200      	movs	r2, #0
    19b4:	4b12      	ldr	r3, [pc, #72]	; (1a00 <_usb_d_dev_handle_trfail+0x110>)
    19b6:	4798      	blx	r3
    19b8:	e013      	b.n	19e2 <_usb_d_dev_handle_trfail+0xf2>
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
	bank->STATUS_BK.reg = 0;
    19ba:	0063      	lsls	r3, r4, #1
    19bc:	195b      	adds	r3, r3, r5
    19be:	011b      	lsls	r3, r3, #4
    19c0:	4a0b      	ldr	r2, [pc, #44]	; (19f0 <_usb_d_dev_handle_trfail+0x100>)
    19c2:	18d3      	adds	r3, r2, r3
    19c4:	2200      	movs	r2, #0
    19c6:	729a      	strb	r2, [r3, #10]
						USB_TRANS_DONE);
			}
		}
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    19c8:	aa01      	add	r2, sp, #4
    19ca:	5d51      	ldrb	r1, [r2, r5]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    19cc:	0163      	lsls	r3, r4, #5
    19ce:	480a      	ldr	r0, [pc, #40]	; (19f8 <_usb_d_dev_handle_trfail+0x108>)
    19d0:	4684      	mov	ip, r0
    19d2:	4463      	add	r3, ip
    19d4:	71d9      	strb	r1, [r3, #7]
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    19d6:	5d53      	ldrb	r3, [r2, r5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epinten_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    19d8:	0164      	lsls	r4, r4, #5
    19da:	4a08      	ldr	r2, [pc, #32]	; (19fc <_usb_d_dev_handle_trfail+0x10c>)
    19dc:	4694      	mov	ip, r2
    19de:	4464      	add	r4, ip
    19e0:	7023      	strb	r3, [r4, #0]
	}
}
    19e2:	b003      	add	sp, #12
    19e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19e6:	46c0      	nop			; (mov r8, r8)
    19e8:	00003080 	.word	0x00003080
    19ec:	00002e8d 	.word	0x00002e8d
    19f0:	20000060 	.word	0x20000060
    19f4:	41005000 	.word	0x41005000
    19f8:	41005100 	.word	0x41005100
    19fc:	41005108 	.word	0x41005108
    1a00:	00001875 	.word	0x00001875

00001a04 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    1a04:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a06:	4647      	mov	r7, r8
    1a08:	b480      	push	{r7}
    1a0a:	1c05      	adds	r5, r0, #0
    1a0c:	1c0f      	adds	r7, r1, #0
	Usb *hw = USB;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1a0e:	7c83      	ldrb	r3, [r0, #18]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    1a10:	240f      	movs	r4, #15
    1a12:	401c      	ands	r4, r3
	uint16_t trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    1a14:	2900      	cmp	r1, #0
    1a16:	d100      	bne.n	1a1a <_usb_d_dev_in_next+0x16>
    1a18:	e0ba      	b.n	1b90 <_usb_d_dev_in_next+0x18c>
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
	Usb *hw = USB;
	uint8_t epn = USB_EP_GET_N(ept->ep);
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    1a1a:	0163      	lsls	r3, r4, #5
    1a1c:	4a61      	ldr	r2, [pc, #388]	; (1ba4 <_usb_d_dev_in_next+0x1a0>)
    1a1e:	18d3      	adds	r3, r2, r3
	uint16_t trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    1a20:	695a      	ldr	r2, [r3, #20]
    1a22:	0492      	lsls	r2, r2, #18
    1a24:	0c92      	lsrs	r2, r2, #18
	uint16_t trans_next;
	uint16_t last_pkt = trans_count & ((ept->size == 1023) ?
    1a26:	8a03      	ldrh	r3, [r0, #16]
    1a28:	495f      	ldr	r1, [pc, #380]	; (1ba8 <_usb_d_dev_in_next+0x1a4>)
    1a2a:	428b      	cmp	r3, r1
    1a2c:	d100      	bne.n	1a30 <_usb_d_dev_in_next+0x2c>
    1a2e:	e09a      	b.n	1b66 <_usb_d_dev_in_next+0x162>
    1a30:	3b01      	subs	r3, #1
    1a32:	b298      	uxth	r0, r3
			ept->size : (ept->size - 1));
	uint8_t inten = 0;
	bool is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1a34:	7ceb      	ldrb	r3, [r5, #19]
    1a36:	2107      	movs	r1, #7
    1a38:	400b      	ands	r3, r1
    1a3a:	3b01      	subs	r3, #1
    1a3c:	425e      	negs	r6, r3
    1a3e:	415e      	adcs	r6, r3
    1a40:	b2f3      	uxtb	r3, r6
    1a42:	4698      	mov	r8, r3

	if (isr) {
    1a44:	2f00      	cmp	r7, #0
    1a46:	d005      	beq.n	1a54 <_usb_d_dev_in_next+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1a48:	0163      	lsls	r3, r4, #5
    1a4a:	4958      	ldr	r1, [pc, #352]	; (1bac <_usb_d_dev_in_next+0x1a8>)
    1a4c:	468c      	mov	ip, r1
    1a4e:	4463      	add	r3, ip
    1a50:	2102      	movs	r1, #2
    1a52:	71d9      	strb	r1, [r3, #7]
		_usbd_ep_ack_io_cpt(epn, 1);
	}

	ept->trans_count += trans_count;
    1a54:	68ab      	ldr	r3, [r5, #8]
    1a56:	18d1      	adds	r1, r2, r3
    1a58:	60a9      	str	r1, [r5, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    1a5a:	686b      	ldr	r3, [r5, #4]
    1a5c:	4299      	cmp	r1, r3
    1a5e:	d233      	bcs.n	1ac8 <_usb_d_dev_in_next+0xc4>
		trans_next = ept->trans_size - ept->trans_count;
    1a60:	1a5b      	subs	r3, r3, r1
    1a62:	b29b      	uxth	r3, r3
		if (ept->flags.bits.use_cache) {
    1a64:	7cea      	ldrb	r2, [r5, #19]
    1a66:	0692      	lsls	r2, r2, #26
    1a68:	d512      	bpl.n	1a90 <_usb_d_dev_in_next+0x8c>
			if (trans_next > ept->size) {
    1a6a:	8a2a      	ldrh	r2, [r5, #16]
    1a6c:	1c1e      	adds	r6, r3, #0
    1a6e:	4293      	cmp	r3, r2
    1a70:	d900      	bls.n	1a74 <_usb_d_dev_in_next+0x70>
    1a72:	1c16      	adds	r6, r2, #0
    1a74:	b2b6      	uxth	r6, r6
				trans_next = ept->size;
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    1a76:	682b      	ldr	r3, [r5, #0]
    1a78:	469c      	mov	ip, r3
    1a7a:	4461      	add	r1, ip
    1a7c:	68e8      	ldr	r0, [r5, #12]
    1a7e:	1c32      	adds	r2, r6, #0
    1a80:	4b4b      	ldr	r3, [pc, #300]	; (1bb0 <_usb_d_dev_in_next+0x1ac>)
    1a82:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    1a84:	68ea      	ldr	r2, [r5, #12]
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n,
		uint32_t addr)
{
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
	bank->ADDR.reg = addr;
    1a86:	0163      	lsls	r3, r4, #5
    1a88:	4946      	ldr	r1, [pc, #280]	; (1ba4 <_usb_d_dev_in_next+0x1a0>)
    1a8a:	18cb      	adds	r3, r1, r3
    1a8c:	611a      	str	r2, [r3, #16]
    1a8e:	e00d      	b.n	1aac <_usb_d_dev_in_next+0xa8>
    1a90:	1c1e      	adds	r6, r3, #0
    1a92:	2280      	movs	r2, #128	; 0x80
    1a94:	0192      	lsls	r2, r2, #6
    1a96:	4293      	cmp	r3, r2
    1a98:	d901      	bls.n	1a9e <_usb_d_dev_in_next+0x9a>
    1a9a:	4b46      	ldr	r3, [pc, #280]	; (1bb4 <_usb_d_dev_in_next+0x1b0>)
    1a9c:	881e      	ldrh	r6, [r3, #0]
    1a9e:	b2b6      	uxth	r6, r6
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
				trans_next = USB_D_DEV_TRANS_MAX;
			}
			_usbd_ep_set_buf(epn, 1,
					(uint32_t)&ept->trans_buf[ept->trans_count]);
    1aa0:	682b      	ldr	r3, [r5, #0]
    1aa2:	1859      	adds	r1, r3, r1
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n,
		uint32_t addr)
{
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
	bank->ADDR.reg = addr;
    1aa4:	0163      	lsls	r3, r4, #5
    1aa6:	4a3f      	ldr	r2, [pc, #252]	; (1ba4 <_usb_d_dev_in_next+0x1a0>)
    1aa8:	18d3      	adds	r3, r2, r3
    1aaa:	6119      	str	r1, [r3, #16]
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n,
		uint8_t size)
{
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    1aac:	0162      	lsls	r2, r4, #5
    1aae:	4b3d      	ldr	r3, [pc, #244]	; (1ba4 <_usb_d_dev_in_next+0x1a0>)
    1ab0:	189b      	adds	r3, r3, r2
    1ab2:	b2f2      	uxtb	r2, r6
    1ab4:	695e      	ldr	r6, [r3, #20]
    1ab6:	0bb6      	lsrs	r6, r6, #14
    1ab8:	03b6      	lsls	r6, r6, #14
    1aba:	4316      	orrs	r6, r2
    1abc:	615e      	str	r6, [r3, #20]
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n,
		uint8_t count)
{
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    1abe:	6959      	ldr	r1, [r3, #20]
    1ac0:	4a3d      	ldr	r2, [pc, #244]	; (1bb8 <_usb_d_dev_in_next+0x1b4>)
    1ac2:	400a      	ands	r2, r1
    1ac4:	615a      	str	r2, [r3, #20]
    1ac6:	e03b      	b.n	1b40 <_usb_d_dev_in_next+0x13c>
			_usbd_ep_set_buf(epn, 1,
					(uint32_t)&ept->trans_buf[ept->trans_count]);
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
		goto _in_tx_exec;
	} else if (ept->flags.bits.need_zlp) {
    1ac8:	7ceb      	ldrb	r3, [r5, #19]
    1aca:	06db      	lsls	r3, r3, #27
    1acc:	d50f      	bpl.n	1aee <_usb_d_dev_in_next+0xea>
		ept->flags.bits.need_zlp = 0;
    1ace:	7ceb      	ldrb	r3, [r5, #19]
    1ad0:	2210      	movs	r2, #16
    1ad2:	4393      	bics	r3, r2
    1ad4:	74eb      	strb	r3, [r5, #19]
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n,
		uint8_t size)
{
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    1ad6:	0162      	lsls	r2, r4, #5
    1ad8:	4b32      	ldr	r3, [pc, #200]	; (1ba4 <_usb_d_dev_in_next+0x1a0>)
    1ada:	189b      	adds	r3, r3, r2
    1adc:	695a      	ldr	r2, [r3, #20]
    1ade:	0b92      	lsrs	r2, r2, #14
    1ae0:	0392      	lsls	r2, r2, #14
    1ae2:	615a      	str	r2, [r3, #20]
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n,
		uint8_t count)
{
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    1ae4:	6959      	ldr	r1, [r3, #20]
    1ae6:	4a34      	ldr	r2, [pc, #208]	; (1bb8 <_usb_d_dev_in_next+0x1b4>)
    1ae8:	400a      	ands	r2, r1
    1aea:	615a      	str	r2, [r3, #20]
    1aec:	e028      	b.n	1b40 <_usb_d_dev_in_next+0x13c>
		ept->flags.bits.need_zlp = 0;
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
		goto _in_tx_exec;
	}
	/* Complete. */
	if (is_ctrl) {
    1aee:	4643      	mov	r3, r8
    1af0:	2b00      	cmp	r3, #0
    1af2:	d006      	beq.n	1b02 <_usb_d_dev_in_next+0xfe>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epinten_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1af4:	0164      	lsls	r4, r4, #5
    1af6:	4b31      	ldr	r3, [pc, #196]	; (1bbc <_usb_d_dev_in_next+0x1b8>)
    1af8:	469c      	mov	ip, r3
    1afa:	4464      	add	r4, ip
    1afc:	234b      	movs	r3, #75	; 0x4b
    1afe:	7023      	strb	r3, [r4, #0]
    1b00:	e005      	b.n	1b0e <_usb_d_dev_in_next+0x10a>
    1b02:	0164      	lsls	r4, r4, #5
    1b04:	4b2d      	ldr	r3, [pc, #180]	; (1bbc <_usb_d_dev_in_next+0x1b8>)
    1b06:	469c      	mov	ip, r3
    1b08:	4464      	add	r4, ip
    1b0a:	234a      	movs	r3, #74	; 0x4a
    1b0c:	7023      	strb	r3, [r4, #0]
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    1b0e:	8a29      	ldrh	r1, [r5, #16]
    1b10:	1c13      	adds	r3, r2, #0
    1b12:	4003      	ands	r3, r0
    1b14:	4299      	cmp	r1, r3
    1b16:	d10e      	bne.n	1b36 <_usb_d_dev_in_next+0x132>
		ept->flags.bits.is_busy = 0;
    1b18:	7ceb      	ldrb	r3, [r5, #19]
    1b1a:	2240      	movs	r2, #64	; 0x40
    1b1c:	4393      	bics	r3, r2
    1b1e:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    1b20:	7ca8      	ldrb	r0, [r5, #18]
    1b22:	4b20      	ldr	r3, [pc, #128]	; (1ba4 <_usb_d_dev_in_next+0x1a0>)
    1b24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    1b26:	68a9      	ldr	r1, [r5, #8]
    1b28:	4798      	blx	r3
    1b2a:	2800      	cmp	r0, #0
    1b2c:	d136      	bne.n	1b9c <_usb_d_dev_in_next+0x198>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    1b2e:	7cea      	ldrb	r2, [r5, #19]
    1b30:	2340      	movs	r3, #64	; 0x40
    1b32:	4313      	orrs	r3, r2
    1b34:	74eb      	strb	r3, [r5, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    1b36:	1c28      	adds	r0, r5, #0
    1b38:	2100      	movs	r1, #0
    1b3a:	4b21      	ldr	r3, [pc, #132]	; (1bc0 <_usb_d_dev_in_next+0x1bc>)
    1b3c:	4798      	blx	r3
	return;
    1b3e:	e02d      	b.n	1b9c <_usb_d_dev_in_next+0x198>

_in_tx_exec:
	if (!isr) {
    1b40:	2f00      	cmp	r7, #0
    1b42:	d109      	bne.n	1b58 <_usb_d_dev_in_next+0x154>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    1b44:	224e      	movs	r2, #78	; 0x4e
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
	return;

_in_tx_exec:
	if (!isr) {
		if (is_ctrl) {
    1b46:	4643      	mov	r3, r8
    1b48:	2b00      	cmp	r3, #0
    1b4a:	d100      	bne.n	1b4e <_usb_d_dev_in_next+0x14a>
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    1b4c:	3a04      	subs	r2, #4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epinten_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1b4e:	0163      	lsls	r3, r4, #5
    1b50:	491a      	ldr	r1, [pc, #104]	; (1bbc <_usb_d_dev_in_next+0x1b8>)
    1b52:	468c      	mov	ip, r1
    1b54:	4463      	add	r3, ip
    1b56:	705a      	strb	r2, [r3, #1]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg & mask;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epstatus_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1b58:	0164      	lsls	r4, r4, #5
    1b5a:	4b14      	ldr	r3, [pc, #80]	; (1bac <_usb_d_dev_in_next+0x1a8>)
    1b5c:	469c      	mov	ip, r3
    1b5e:	4464      	add	r4, ip
    1b60:	2380      	movs	r3, #128	; 0x80
    1b62:	7163      	strb	r3, [r4, #5]
    1b64:	e01a      	b.n	1b9c <_usb_d_dev_in_next+0x198>
	uint16_t trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
	uint16_t trans_next;
	uint16_t last_pkt = trans_count & ((ept->size == 1023) ?
			ept->size : (ept->size - 1));
	uint8_t inten = 0;
	bool is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1b66:	7cc1      	ldrb	r1, [r0, #19]
    1b68:	2307      	movs	r3, #7
    1b6a:	400b      	ands	r3, r1
    1b6c:	3b01      	subs	r3, #1
    1b6e:	4258      	negs	r0, r3
    1b70:	4158      	adcs	r0, r3
    1b72:	b2c3      	uxtb	r3, r0
    1b74:	4698      	mov	r8, r3
	Usb *hw = USB;
	uint8_t epn = USB_EP_GET_N(ept->ep);
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[0];
	uint16_t trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
	uint16_t trans_next;
	uint16_t last_pkt = trans_count & ((ept->size == 1023) ?
    1b76:	480c      	ldr	r0, [pc, #48]	; (1ba8 <_usb_d_dev_in_next+0x1a4>)
    1b78:	e766      	b.n	1a48 <_usb_d_dev_in_next+0x44>
			ept->size : (ept->size - 1));
	uint8_t inten = 0;
	bool is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1b7a:	7cea      	ldrb	r2, [r5, #19]
    1b7c:	2307      	movs	r3, #7
    1b7e:	4013      	ands	r3, r2
    1b80:	3b01      	subs	r3, #1
    1b82:	4259      	negs	r1, r3
    1b84:	4159      	adcs	r1, r3
    1b86:	b2cb      	uxtb	r3, r1
    1b88:	4698      	mov	r8, r3
	Usb *hw = USB;
	uint8_t epn = USB_EP_GET_N(ept->ep);
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[0];
	uint16_t trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
	uint16_t trans_next;
	uint16_t last_pkt = trans_count & ((ept->size == 1023) ?
    1b8a:	4807      	ldr	r0, [pc, #28]	; (1ba8 <_usb_d_dev_in_next+0x1a4>)
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
	Usb *hw = USB;
	uint8_t epn = USB_EP_GET_N(ept->ep);
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[0];
	uint16_t trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    1b8c:	2200      	movs	r2, #0
    1b8e:	e761      	b.n	1a54 <_usb_d_dev_in_next+0x50>
	uint16_t trans_next;
	uint16_t last_pkt = trans_count & ((ept->size == 1023) ?
    1b90:	8a03      	ldrh	r3, [r0, #16]
    1b92:	4a05      	ldr	r2, [pc, #20]	; (1ba8 <_usb_d_dev_in_next+0x1a4>)
    1b94:	4293      	cmp	r3, r2
    1b96:	d0f0      	beq.n	1b7a <_usb_d_dev_in_next+0x176>
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
	Usb *hw = USB;
	uint8_t epn = USB_EP_GET_N(ept->ep);
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[0];
	uint16_t trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    1b98:	2200      	movs	r2, #0
    1b9a:	e749      	b.n	1a30 <_usb_d_dev_in_next+0x2c>
			inten = USB_D_BANK1_INT_FLAGS;
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
}
    1b9c:	bc04      	pop	{r2}
    1b9e:	4690      	mov	r8, r2
    1ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ba2:	46c0      	nop			; (mov r8, r8)
    1ba4:	20000060 	.word	0x20000060
    1ba8:	000003ff 	.word	0x000003ff
    1bac:	41005100 	.word	0x41005100
    1bb0:	00002e8d 	.word	0x00002e8d
    1bb4:	0000307e 	.word	0x0000307e
    1bb8:	f0003fff 	.word	0xf0003fff
    1bbc:	41005108 	.word	0x41005108
    1bc0:	00001825 	.word	0x00001825

00001bc4 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    1bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1bc6:	465f      	mov	r7, fp
    1bc8:	4656      	mov	r6, sl
    1bca:	464d      	mov	r5, r9
    1bcc:	4644      	mov	r4, r8
    1bce:	b4f0      	push	{r4, r5, r6, r7}
    1bd0:	1c04      	adds	r4, r0, #0
    1bd2:	4689      	mov	r9, r1
	Usb *hw = USB;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1bd4:	7c83      	ldrb	r3, [r0, #18]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    1bd6:	250f      	movs	r5, #15
    1bd8:	401d      	ands	r5, r3
	uint16_t trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    1bda:	2900      	cmp	r1, #0
    1bdc:	d00f      	beq.n	1bfe <_usb_d_dev_out_next+0x3a>
    1bde:	016b      	lsls	r3, r5, #5
    1be0:	4a80      	ldr	r2, [pc, #512]	; (1de4 <_usb_d_dev_out_next+0x220>)
    1be2:	18d3      	adds	r3, r2, r3
    1be4:	685a      	ldr	r2, [r3, #4]
    1be6:	0112      	lsls	r2, r2, #4
    1be8:	0c92      	lsrs	r2, r2, #18
    1bea:	4692      	mov	sl, r2
	uint16_t last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    1bec:	685b      	ldr	r3, [r3, #4]
    1bee:	049b      	lsls	r3, r3, #18
    1bf0:	0c9b      	lsrs	r3, r3, #18
    1bf2:	469b      	mov	fp, r3
	uint16_t size_mask = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1bf4:	8a07      	ldrh	r7, [r0, #16]
    1bf6:	4a7c      	ldr	r2, [pc, #496]	; (1de8 <_usb_d_dev_out_next+0x224>)
    1bf8:	4297      	cmp	r7, r2
    1bfa:	d108      	bne.n	1c0e <_usb_d_dev_out_next+0x4a>
    1bfc:	e0c2      	b.n	1d84 <_usb_d_dev_out_next+0x1c0>
    1bfe:	8a07      	ldrh	r7, [r0, #16]
    1c00:	4b79      	ldr	r3, [pc, #484]	; (1de8 <_usb_d_dev_out_next+0x224>)
    1c02:	429f      	cmp	r7, r3
    1c04:	d100      	bne.n	1c08 <_usb_d_dev_out_next+0x44>
    1c06:	e0d1      	b.n	1dac <_usb_d_dev_out_next+0x1e8>
{
	Usb *hw = USB;
	uint8_t epn = USB_EP_GET_N(ept->ep);
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[0];
	uint16_t trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
	uint16_t last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    1c08:	2300      	movs	r3, #0
    1c0a:	469b      	mov	fp, r3
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
	Usb *hw = USB;
	uint8_t epn = USB_EP_GET_N(ept->ep);
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[0];
	uint16_t trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    1c0c:	469a      	mov	sl, r3
	uint16_t last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
	uint16_t size_mask = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1c0e:	3f01      	subs	r7, #1
    1c10:	b2bf      	uxth	r7, r7
	uint16_t last_pkt = last_trans & size_mask;
    1c12:	465b      	mov	r3, fp
    1c14:	403b      	ands	r3, r7
    1c16:	4698      	mov	r8, r3
	uint16_t trans_next;
	uint8_t inten;
	bool is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1c18:	7ce3      	ldrb	r3, [r4, #19]
    1c1a:	2607      	movs	r6, #7
    1c1c:	401e      	ands	r6, r3
    1c1e:	3e01      	subs	r6, #1
    1c20:	4272      	negs	r2, r6
    1c22:	4172      	adcs	r2, r6
    1c24:	b2d6      	uxtb	r6, r2

	if (isr) {
    1c26:	464b      	mov	r3, r9
    1c28:	2b00      	cmp	r3, #0
    1c2a:	d005      	beq.n	1c38 <_usb_d_dev_out_next+0x74>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1c2c:	016b      	lsls	r3, r5, #5
    1c2e:	4a6f      	ldr	r2, [pc, #444]	; (1dec <_usb_d_dev_out_next+0x228>)
    1c30:	4694      	mov	ip, r2
    1c32:	4463      	add	r3, ip
    1c34:	2201      	movs	r2, #1
    1c36:	71da      	strb	r2, [r3, #7]
		_usbd_ep_ack_io_cpt(epn, 0);
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    1c38:	7ce3      	ldrb	r3, [r4, #19]
    1c3a:	069b      	lsls	r3, r3, #26
    1c3c:	d50f      	bpl.n	1c5e <_usb_d_dev_out_next+0x9a>
    1c3e:	6863      	ldr	r3, [r4, #4]
    1c40:	2b00      	cmp	r3, #0
    1c42:	d00f      	beq.n	1c64 <_usb_d_dev_out_next+0xa0>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    1c44:	68a2      	ldr	r2, [r4, #8]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache,
    1c46:	6821      	ldr	r1, [r4, #0]
    1c48:	1888      	adds	r0, r1, r2
		_usbd_ep_ack_io_cpt(epn, 0);
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    1c4a:	1a9b      	subs	r3, r3, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache,
				(buf_remain > last_pkt) ? last_pkt : buf_remain);
    1c4c:	4642      	mov	r2, r8
    1c4e:	b299      	uxth	r1, r3
    1c50:	4588      	cmp	r8, r1
    1c52:	d900      	bls.n	1c56 <_usb_d_dev_out_next+0x92>
    1c54:	1c1a      	adds	r2, r3, #0
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache,
    1c56:	b292      	uxth	r2, r2
    1c58:	68e1      	ldr	r1, [r4, #12]
    1c5a:	4b65      	ldr	r3, [pc, #404]	; (1df0 <_usb_d_dev_out_next+0x22c>)
    1c5c:	4798      	blx	r3
				(buf_remain > last_pkt) ? last_pkt : buf_remain);
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    1c5e:	6862      	ldr	r2, [r4, #4]
    1c60:	2a00      	cmp	r2, #0
    1c62:	d11a      	bne.n	1c9a <_usb_d_dev_out_next+0xd6>
    1c64:	7ce3      	ldrb	r3, [r4, #19]
    1c66:	06db      	lsls	r3, r3, #27
    1c68:	d400      	bmi.n	1c6c <_usb_d_dev_out_next+0xa8>
    1c6a:	e09b      	b.n	1da4 <_usb_d_dev_out_next+0x1e0>
		ept->flags.bits.need_zlp = 0;
    1c6c:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    1c6e:	2210      	movs	r2, #16
    1c70:	4393      	bics	r3, r2
    1c72:	2220      	movs	r2, #32
    1c74:	4313      	orrs	r3, r2
    1c76:	74e3      	strb	r3, [r4, #19]
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n,
		uint32_t addr)
{
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
	bank->ADDR.reg = addr;
    1c78:	4a5a      	ldr	r2, [pc, #360]	; (1de4 <_usb_d_dev_out_next+0x220>)
    1c7a:	016b      	lsls	r3, r5, #5
    1c7c:	68e1      	ldr	r1, [r4, #12]
    1c7e:	5099      	str	r1, [r3, r2]
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n,
		uint8_t size)
{
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1c80:	18d3      	adds	r3, r2, r3
    1c82:	7c22      	ldrb	r2, [r4, #16]
    1c84:	0391      	lsls	r1, r2, #14
    1c86:	6858      	ldr	r0, [r3, #4]
    1c88:	4a5a      	ldr	r2, [pc, #360]	; (1df4 <_usb_d_dev_out_next+0x230>)
    1c8a:	4002      	ands	r2, r0
    1c8c:	430a      	orrs	r2, r1
    1c8e:	605a      	str	r2, [r3, #4]
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n,
		uint8_t count)
{
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    1c90:	685a      	ldr	r2, [r3, #4]
    1c92:	0b92      	lsrs	r2, r2, #14
    1c94:	0392      	lsls	r2, r2, #14
    1c96:	605a      	str	r2, [r3, #4]
    1c98:	e05c      	b.n	1d54 <_usb_d_dev_out_next+0x190>
		ept->flags.bits.need_zlp = 0;
		ept->flags.bits.use_cache = 1;
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
		goto _out_rx_exec;
	} else if (isr && last_pkt < ept->size) {
    1c9a:	464b      	mov	r3, r9
    1c9c:	2b00      	cmp	r3, #0
    1c9e:	d00a      	beq.n	1cb6 <_usb_d_dev_out_next+0xf2>
    1ca0:	8a23      	ldrh	r3, [r4, #16]
    1ca2:	4543      	cmp	r3, r8
    1ca4:	d907      	bls.n	1cb6 <_usb_d_dev_out_next+0xf2>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    1ca6:	7ce3      	ldrb	r3, [r4, #19]
    1ca8:	2210      	movs	r2, #16
    1caa:	4393      	bics	r3, r2
    1cac:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    1cae:	68a3      	ldr	r3, [r4, #8]
    1cb0:	445b      	add	r3, fp
    1cb2:	60a3      	str	r3, [r4, #8]
    1cb4:	e03a      	b.n	1d2c <_usb_d_dev_out_next+0x168>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    1cb6:	68a3      	ldr	r3, [r4, #8]
    1cb8:	4453      	add	r3, sl
    1cba:	60a3      	str	r3, [r4, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    1cbc:	429a      	cmp	r2, r3
    1cbe:	d935      	bls.n	1d2c <_usb_d_dev_out_next+0x168>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    1cc0:	1ad2      	subs	r2, r2, r3
    1cc2:	b292      	uxth	r2, r2
			if (ept->flags.bits.use_cache) {
    1cc4:	7ce1      	ldrb	r1, [r4, #19]
    1cc6:	0689      	lsls	r1, r1, #26
    1cc8:	d50a      	bpl.n	1ce0 <_usb_d_dev_out_next+0x11c>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    1cca:	8a21      	ldrh	r1, [r4, #16]
    1ccc:	1c13      	adds	r3, r2, #0
    1cce:	428a      	cmp	r2, r1
    1cd0:	d900      	bls.n	1cd4 <_usb_d_dev_out_next+0x110>
    1cd2:	1c0b      	adds	r3, r1, #0
    1cd4:	b29a      	uxth	r2, r3
					trans_next = ept->size;
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    1cd6:	68e0      	ldr	r0, [r4, #12]
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n,
		uint32_t addr)
{
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
	bank->ADDR.reg = addr;
    1cd8:	016b      	lsls	r3, r5, #5
    1cda:	4942      	ldr	r1, [pc, #264]	; (1de4 <_usb_d_dev_out_next+0x220>)
    1cdc:	5058      	str	r0, [r3, r1]
    1cde:	e016      	b.n	1d0e <_usb_d_dev_out_next+0x14a>
					trans_next = ept->size;
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    1ce0:	8a21      	ldrh	r1, [r4, #16]
    1ce2:	428a      	cmp	r2, r1
    1ce4:	d905      	bls.n	1cf2 <_usb_d_dev_out_next+0x12e>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    1ce6:	2180      	movs	r1, #128	; 0x80
    1ce8:	0189      	lsls	r1, r1, #6
    1cea:	428a      	cmp	r2, r1
    1cec:	d808      	bhi.n	1d00 <_usb_d_dev_out_next+0x13c>
						trans_next = USB_D_DEV_TRANS_MAX;
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    1cee:	43ba      	bics	r2, r7
    1cf0:	e008      	b.n	1d04 <_usb_d_dev_out_next+0x140>
					}
				} else if (trans_next < ept->size) {
    1cf2:	428a      	cmp	r2, r1
    1cf4:	d206      	bcs.n	1d04 <_usb_d_dev_out_next+0x140>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    1cf6:	7ce0      	ldrb	r0, [r4, #19]
    1cf8:	2120      	movs	r1, #32
    1cfa:	4301      	orrs	r1, r0
    1cfc:	74e1      	strb	r1, [r4, #19]
    1cfe:	e001      	b.n	1d04 <_usb_d_dev_out_next+0x140>
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
					if (trans_next > USB_D_DEV_TRANS_MAX) {
						trans_next = USB_D_DEV_TRANS_MAX;
    1d00:	2280      	movs	r2, #128	; 0x80
    1d02:	0192      	lsls	r2, r2, #6
				} else if (trans_next < ept->size) {
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
				}
				_usbd_ep_set_buf(epn, 0,
						(uint32_t)&ept->trans_buf[ept->trans_count]);
    1d04:	6821      	ldr	r1, [r4, #0]
    1d06:	18cb      	adds	r3, r1, r3
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n,
		uint32_t addr)
{
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
	bank->ADDR.reg = addr;
    1d08:	0169      	lsls	r1, r5, #5
    1d0a:	4836      	ldr	r0, [pc, #216]	; (1de4 <_usb_d_dev_out_next+0x220>)
    1d0c:	500b      	str	r3, [r1, r0]
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n,
		uint8_t size)
{
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1d0e:	0169      	lsls	r1, r5, #5
    1d10:	4b34      	ldr	r3, [pc, #208]	; (1de4 <_usb_d_dev_out_next+0x220>)
    1d12:	1859      	adds	r1, r3, r1
    1d14:	b2d3      	uxtb	r3, r2
    1d16:	039a      	lsls	r2, r3, #14
    1d18:	6848      	ldr	r0, [r1, #4]
    1d1a:	4b36      	ldr	r3, [pc, #216]	; (1df4 <_usb_d_dev_out_next+0x230>)
    1d1c:	4003      	ands	r3, r0
    1d1e:	4313      	orrs	r3, r2
    1d20:	604b      	str	r3, [r1, #4]
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n,
		uint8_t count)
{
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    1d22:	684b      	ldr	r3, [r1, #4]
    1d24:	0b9b      	lsrs	r3, r3, #14
    1d26:	039b      	lsls	r3, r3, #14
    1d28:	604b      	str	r3, [r1, #4]
    1d2a:	e013      	b.n	1d54 <_usb_d_dev_out_next+0x190>
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
			goto _out_rx_exec;
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    1d2c:	2e00      	cmp	r6, #0
    1d2e:	d006      	beq.n	1d3e <_usb_d_dev_out_next+0x17a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epinten_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1d30:	016d      	lsls	r5, r5, #5
    1d32:	4b31      	ldr	r3, [pc, #196]	; (1df8 <_usb_d_dev_out_next+0x234>)
    1d34:	469c      	mov	ip, r3
    1d36:	4465      	add	r5, ip
    1d38:	232d      	movs	r3, #45	; 0x2d
    1d3a:	702b      	strb	r3, [r5, #0]
    1d3c:	e005      	b.n	1d4a <_usb_d_dev_out_next+0x186>
    1d3e:	016d      	lsls	r5, r5, #5
    1d40:	4b2d      	ldr	r3, [pc, #180]	; (1df8 <_usb_d_dev_out_next+0x234>)
    1d42:	469c      	mov	ip, r3
    1d44:	4465      	add	r5, ip
    1d46:	2325      	movs	r3, #37	; 0x25
    1d48:	702b      	strb	r3, [r5, #0]
				USB_DEVICE_EPINTFLAG_TRFAIL1);
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
	}

	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    1d4a:	1c20      	adds	r0, r4, #0
    1d4c:	2100      	movs	r1, #0
    1d4e:	4b2b      	ldr	r3, [pc, #172]	; (1dfc <_usb_d_dev_out_next+0x238>)
    1d50:	4798      	blx	r3
	return;
    1d52:	e041      	b.n	1dd8 <_usb_d_dev_out_next+0x214>

_out_rx_exec:
	if (!isr) {
    1d54:	464b      	mov	r3, r9
    1d56:	2b00      	cmp	r3, #0
    1d58:	d10d      	bne.n	1d76 <_usb_d_dev_out_next+0x1b2>
			_usbd_ep_clear_bank_status(epn, 1);
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    1d5a:	2225      	movs	r2, #37	; 0x25
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
	return;

_out_rx_exec:
	if (!isr) {
		if (is_ctrl) {
    1d5c:	2e00      	cmp	r6, #0
    1d5e:	d005      	beq.n	1d6c <_usb_d_dev_out_next+0x1a8>
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
	bank->STATUS_BK.reg = 0;
    1d60:	016b      	lsls	r3, r5, #5
    1d62:	4a20      	ldr	r2, [pc, #128]	; (1de4 <_usb_d_dev_out_next+0x220>)
    1d64:	18d3      	adds	r3, r2, r3
    1d66:	2200      	movs	r2, #0
    1d68:	769a      	strb	r2, [r3, #26]
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    1d6a:	322d      	adds	r2, #45	; 0x2d
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epinten_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1d6c:	016b      	lsls	r3, r5, #5
    1d6e:	4922      	ldr	r1, [pc, #136]	; (1df8 <_usb_d_dev_out_next+0x234>)
    1d70:	468c      	mov	ip, r1
    1d72:	4463      	add	r3, ip
    1d74:	705a      	strb	r2, [r3, #1]
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epstatus_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1d76:	016d      	lsls	r5, r5, #5
    1d78:	4b1c      	ldr	r3, [pc, #112]	; (1dec <_usb_d_dev_out_next+0x228>)
    1d7a:	469c      	mov	ip, r3
    1d7c:	4465      	add	r5, ip
    1d7e:	2340      	movs	r3, #64	; 0x40
    1d80:	712b      	strb	r3, [r5, #4]
    1d82:	e029      	b.n	1dd8 <_usb_d_dev_out_next+0x214>
	uint8_t epn = USB_EP_GET_N(ept->ep);
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[0];
	uint16_t trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
	uint16_t last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
	uint16_t size_mask = (ept->size == 1023) ? 1023 : (ept->size - 1);
	uint16_t last_pkt = last_trans & size_mask;
    1d84:	059b      	lsls	r3, r3, #22
    1d86:	0d9b      	lsrs	r3, r3, #22
    1d88:	4698      	mov	r8, r3
	uint16_t trans_next;
	uint8_t inten;
	bool is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1d8a:	7cc6      	ldrb	r6, [r0, #19]
    1d8c:	2307      	movs	r3, #7
    1d8e:	401e      	ands	r6, r3
    1d90:	3e01      	subs	r6, #1
    1d92:	4272      	negs	r2, r6
    1d94:	4172      	adcs	r2, r6
    1d96:	b2d6      	uxtb	r6, r2
	Usb *hw = USB;
	uint8_t epn = USB_EP_GET_N(ept->ep);
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[0];
	uint16_t trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
	uint16_t last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
	uint16_t size_mask = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1d98:	4f13      	ldr	r7, [pc, #76]	; (1de8 <_usb_d_dev_out_next+0x224>)
    1d9a:	e747      	b.n	1c2c <_usb_d_dev_out_next+0x68>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
		ept->trans_count += last_trans;
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    1d9c:	68a3      	ldr	r3, [r4, #8]
    1d9e:	4453      	add	r3, sl
    1da0:	60a3      	str	r3, [r4, #8]
    1da2:	e7c3      	b.n	1d2c <_usb_d_dev_out_next+0x168>
		ept->flags.bits.need_zlp = 0;
		ept->flags.bits.use_cache = 1;
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
		goto _out_rx_exec;
	} else if (isr && last_pkt < ept->size) {
    1da4:	464b      	mov	r3, r9
    1da6:	2b00      	cmp	r3, #0
    1da8:	d111      	bne.n	1dce <_usb_d_dev_out_next+0x20a>
    1daa:	e7f7      	b.n	1d9c <_usb_d_dev_out_next+0x1d8>
	uint16_t last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
	uint16_t size_mask = (ept->size == 1023) ? 1023 : (ept->size - 1);
	uint16_t last_pkt = last_trans & size_mask;
	uint16_t trans_next;
	uint8_t inten;
	bool is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1dac:	7cc3      	ldrb	r3, [r0, #19]
    1dae:	2607      	movs	r6, #7
    1db0:	401e      	ands	r6, r3
    1db2:	3e01      	subs	r6, #1
    1db4:	4272      	negs	r2, r6
    1db6:	4172      	adcs	r2, r6
    1db8:	b2d6      	uxtb	r6, r2
	uint8_t epn = USB_EP_GET_N(ept->ep);
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[0];
	uint16_t trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
	uint16_t last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
	uint16_t size_mask = (ept->size == 1023) ? 1023 : (ept->size - 1);
	uint16_t last_pkt = last_trans & size_mask;
    1dba:	2300      	movs	r3, #0
    1dbc:	4698      	mov	r8, r3
	Usb *hw = USB;
	uint8_t epn = USB_EP_GET_N(ept->ep);
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[0];
	uint16_t trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
	uint16_t last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
	uint16_t size_mask = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1dbe:	4f0a      	ldr	r7, [pc, #40]	; (1de8 <_usb_d_dev_out_next+0x224>)
{
	Usb *hw = USB;
	uint8_t epn = USB_EP_GET_N(ept->ep);
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[0];
	uint16_t trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
	uint16_t last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    1dc0:	469b      	mov	fp, r3
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
	Usb *hw = USB;
	uint8_t epn = USB_EP_GET_N(ept->ep);
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[0];
	uint16_t trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    1dc2:	469a      	mov	sl, r3
    1dc4:	e738      	b.n	1c38 <_usb_d_dev_out_next+0x74>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
		ept->trans_count += last_trans;
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    1dc6:	68a3      	ldr	r3, [r4, #8]
    1dc8:	4453      	add	r3, sl
    1dca:	60a3      	str	r3, [r4, #8]
    1dcc:	e7ae      	b.n	1d2c <_usb_d_dev_out_next+0x168>
		ept->flags.bits.need_zlp = 0;
		ept->flags.bits.use_cache = 1;
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
		goto _out_rx_exec;
	} else if (isr && last_pkt < ept->size) {
    1dce:	8a23      	ldrh	r3, [r4, #16]
    1dd0:	4543      	cmp	r3, r8
    1dd2:	d900      	bls.n	1dd6 <_usb_d_dev_out_next+0x212>
    1dd4:	e767      	b.n	1ca6 <_usb_d_dev_out_next+0xe2>
    1dd6:	e7f6      	b.n	1dc6 <_usb_d_dev_out_next+0x202>
			inten = USB_D_BANK0_INT_FLAGS;
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
}
    1dd8:	bc3c      	pop	{r2, r3, r4, r5}
    1dda:	4690      	mov	r8, r2
    1ddc:	4699      	mov	r9, r3
    1dde:	46a2      	mov	sl, r4
    1de0:	46ab      	mov	fp, r5
    1de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1de4:	20000060 	.word	0x20000060
    1de8:	000003ff 	.word	0x000003ff
    1dec:	41005100 	.word	0x41005100
    1df0:	00002e8d 	.word	0x00002e8d
    1df4:	f0003fff 	.word	0xf0003fff
    1df8:	41005108 	.word	0x41005108
    1dfc:	00001825 	.word	0x00001825

00001e00 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    1e00:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e02:	4647      	mov	r7, r8
    1e04:	b480      	push	{r7}
    1e06:	4d0d      	ldr	r5, [pc, #52]	; (1e3c <_usb_d_dev_reset_epts+0x3c>)
    1e08:	1c2c      	adds	r4, r5, #0
    1e0a:	347c      	adds	r4, #124	; 0x7c
    1e0c:	23a6      	movs	r3, #166	; 0xa6
    1e0e:	009b      	lsls	r3, r3, #2
    1e10:	469c      	mov	ip, r3
    1e12:	4465      	add	r5, ip
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i ++) {
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    1e14:	4b0a      	ldr	r3, [pc, #40]	; (1e40 <_usb_d_dev_reset_epts+0x40>)
    1e16:	4698      	mov	r8, r3
		dev_inst.ep[i].ep = 0xFF;
    1e18:	27ff      	movs	r7, #255	; 0xff
		dev_inst.ep[i].flags.u8 = 0;
    1e1a:	2600      	movs	r6, #0
 */
static void _usb_d_dev_reset_epts(void)
{
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i ++) {
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    1e1c:	1c20      	adds	r0, r4, #0
    1e1e:	2103      	movs	r1, #3
    1e20:	47c0      	blx	r8
		dev_inst.ep[i].ep = 0xFF;
    1e22:	74a7      	strb	r7, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    1e24:	74e6      	strb	r6, [r4, #19]
    1e26:	3414      	adds	r4, #20
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i ++) {
    1e28:	42ac      	cmp	r4, r5
    1e2a:	d1f7      	bne.n	1e1c <_usb_d_dev_reset_epts+0x1c>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
		dev_inst.ep[i].ep = 0xFF;
		dev_inst.ep[i].flags.u8 = 0;
	}
	memset(prvt_inst.desc_table, 0,
    1e2c:	4803      	ldr	r0, [pc, #12]	; (1e3c <_usb_d_dev_reset_epts+0x3c>)
    1e2e:	2100      	movs	r1, #0
    1e30:	2260      	movs	r2, #96	; 0x60
    1e32:	4b04      	ldr	r3, [pc, #16]	; (1e44 <_usb_d_dev_reset_epts+0x44>)
    1e34:	4798      	blx	r3
			sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
}
    1e36:	bc04      	pop	{r2}
    1e38:	4690      	mov	r8, r2
    1e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e3c:	20000060 	.word	0x20000060
    1e40:	00001825 	.word	0x00001825
    1e44:	00002e9f 	.word	0x00002e9f

00001e48 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void *unused)
{
    1e48:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e4a:	4647      	mov	r7, r8
    1e4c:	b480      	push	{r7}
	Usb *hw = USB;
	uint8_t i;
	(void)unused;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    1e4e:	4b82      	ldr	r3, [pc, #520]	; (2058 <STACK_SIZE+0x58>)
    1e50:	8c1e      	ldrh	r6, [r3, #32]
    1e52:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    1e54:	2e00      	cmp	r6, #0
    1e56:	d172      	bne.n	1f3e <_usb_d_dev_handler+0xf6>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    1e58:	1c1a      	adds	r2, r3, #0
    1e5a:	8b9b      	ldrh	r3, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_inten_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    1e5c:	8b12      	ldrh	r2, [r2, #24]
 */
static inline bool _usb_d_dev_handle_nep(void)
{
	bool rc = true;
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    1e5e:	4013      	ands	r3, r2

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    1e60:	075a      	lsls	r2, r3, #29
    1e62:	d506      	bpl.n	1e72 <_usb_d_dev_handler+0x2a>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
}

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1e64:	2204      	movs	r2, #4
    1e66:	4b7c      	ldr	r3, [pc, #496]	; (2058 <STACK_SIZE+0x58>)
    1e68:	839a      	strh	r2, [r3, #28]
 */
static inline void _usb_d_dev_sof(void)
{
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
	dev_inst.callbacks.sof();
    1e6a:	4b7c      	ldr	r3, [pc, #496]	; (205c <STACK_SIZE+0x5c>)
    1e6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    1e6e:	4798      	blx	r3
    1e70:	e0ee      	b.n	2050 <STACK_SIZE+0x50>

	if (flags & USB_DEVICE_INTFLAG_SOF) {
		_usb_d_dev_sof();
		return true;
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    1e72:	059a      	lsls	r2, r3, #22
    1e74:	d522      	bpl.n	1ebc <_usb_d_dev_handler+0x74>
    1e76:	4b78      	ldr	r3, [pc, #480]	; (2058 <STACK_SIZE+0x58>)
    1e78:	4a79      	ldr	r2, [pc, #484]	; (2060 <STACK_SIZE+0x60>)
    1e7a:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_inten_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1e7c:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENCLR_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_inten_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1e7e:	3a92      	subs	r2, #146	; 0x92
    1e80:	3aff      	subs	r2, #255	; 0xff
    1e82:	831a      	strh	r2, [r3, #24]

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i ++) {
		UsbDeviceDescBank *bank =
				&prvt_inst.desc_table[i].DeviceDescBank[0];
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    1e84:	4b75      	ldr	r3, [pc, #468]	; (205c <STACK_SIZE+0x5c>)
    1e86:	891b      	ldrh	r3, [r3, #8]
    1e88:	3a61      	subs	r2, #97	; 0x61
    1e8a:	4013      	ands	r3, r2
    1e8c:	2b03      	cmp	r3, #3
    1e8e:	d007      	beq.n	1ea0 <_usb_d_dev_handler+0x58>
    1e90:	4b72      	ldr	r3, [pc, #456]	; (205c <STACK_SIZE+0x5c>)
    1e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    1e94:	4013      	ands	r3, r2
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
	uint8_t i;
	uint32_t lpm_variable = 0;
    1e96:	2100      	movs	r1, #0

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i ++) {
		UsbDeviceDescBank *bank =
				&prvt_inst.desc_table[i].DeviceDescBank[0];
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    1e98:	2b03      	cmp	r3, #3
    1e9a:	d10a      	bne.n	1eb2 <_usb_d_dev_handler+0x6a>
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i ++) {
		UsbDeviceDescBank *bank =
				&prvt_inst.desc_table[i].DeviceDescBank[0];
    1e9c:	3b02      	subs	r3, #2
    1e9e:	e000      	b.n	1ea2 <_usb_d_dev_handler+0x5a>
    1ea0:	2300      	movs	r3, #0
		if (bank->EXTREG.bit.SUBPID == 0x3) {
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    1ea2:	015b      	lsls	r3, r3, #5
    1ea4:	4a6d      	ldr	r2, [pc, #436]	; (205c <STACK_SIZE+0x5c>)
    1ea6:	18d3      	adds	r3, r2, r3
    1ea8:	8919      	ldrh	r1, [r3, #8]
    1eaa:	0449      	lsls	r1, r1, #17
    1eac:	0d49      	lsrs	r1, r1, #21
			/* Clear */
			bank->EXTREG.reg = 0;
    1eae:	2200      	movs	r2, #0
    1eb0:	811a      	strh	r2, [r3, #8]
			break;
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    1eb2:	4b6a      	ldr	r3, [pc, #424]	; (205c <STACK_SIZE+0x5c>)
    1eb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    1eb6:	2003      	movs	r0, #3
    1eb8:	4798      	blx	r3
    1eba:	e0c9      	b.n	2050 <STACK_SIZE+0x50>
		_usb_d_dev_sof();
		return true;
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
		_usb_d_dev_lpmsusp();
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    1ebc:	061a      	lsls	r2, r3, #24
    1ebe:	d508      	bpl.n	1ed2 <_usb_d_dev_handler+0x8a>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
}

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1ec0:	2280      	movs	r2, #128	; 0x80
    1ec2:	4b65      	ldr	r3, [pc, #404]	; (2058 <STACK_SIZE+0x58>)
    1ec4:	839a      	strh	r2, [r3, #28]
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    1ec6:	4b65      	ldr	r3, [pc, #404]	; (205c <STACK_SIZE+0x5c>)
    1ec8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    1eca:	2005      	movs	r0, #5
    1ecc:	2100      	movs	r1, #0
    1ece:	4798      	blx	r3
    1ed0:	e0be      	b.n	2050 <STACK_SIZE+0x50>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
		_usb_d_dev_lpmsusp();
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
		_usb_d_dev_ramerr();
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    1ed2:	2270      	movs	r2, #112	; 0x70
    1ed4:	421a      	tst	r2, r3
    1ed6:	d01b      	beq.n	1f10 <_usb_d_dev_handler+0xc8>
    1ed8:	4b5f      	ldr	r3, [pc, #380]	; (2058 <STACK_SIZE+0x58>)
    1eda:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_inten_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1edc:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENCLR_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_inten_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1ede:	4a60      	ldr	r2, [pc, #384]	; (2060 <STACK_SIZE+0x60>)
    1ee0:	831a      	strh	r2, [r3, #24]
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
#define DFLL_READY_FLAG (SYSCTRL_PCLKSR_DFLLRDY | \
		SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC)
	/* In USB recovery mode the status is not checked */
	if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    1ee2:	4b60      	ldr	r3, [pc, #384]	; (2064 <STACK_SIZE+0x64>)
    1ee4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    1ee6:	069b      	lsls	r3, r3, #26
    1ee8:	d407      	bmi.n	1efa <_usb_d_dev_handler+0xb2>
}

static inline hri_sysctrl_pclksr_reg_t hri_sysctrl_get_PCLKSR_reg(const void *const hw, hri_sysctrl_pclksr_reg_t mask) 
{
        uint32_t tmp; 
        tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    1eea:	495e      	ldr	r1, [pc, #376]	; (2064 <STACK_SIZE+0x64>)
        tmp &= mask;
    1eec:	3a32      	subs	r2, #50	; 0x32
    1eee:	3aff      	subs	r2, #255	; 0xff
}

static inline hri_sysctrl_pclksr_reg_t hri_sysctrl_get_PCLKSR_reg(const void *const hw, hri_sysctrl_pclksr_reg_t mask) 
{
        uint32_t tmp; 
        tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    1ef0:	68cb      	ldr	r3, [r1, #12]
        tmp &= mask;
    1ef2:	4013      	ands	r3, r2
		while(hri_sysctrl_get_PCLKSR_reg(SYSCTRL, DFLL_READY_FLAG) !=
    1ef4:	2bd0      	cmp	r3, #208	; 0xd0
    1ef6:	d1fb      	bne.n	1ef0 <_usb_d_dev_handler+0xa8>
    1ef8:	e004      	b.n	1f04 <_usb_d_dev_handler+0xbc>
}

static inline hri_sysctrl_pclksr_reg_t hri_sysctrl_get_PCLKSR_reg(const void *const hw, hri_sysctrl_pclksr_reg_t mask) 
{
        uint32_t tmp; 
        tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    1efa:	495a      	ldr	r1, [pc, #360]	; (2064 <STACK_SIZE+0x64>)
        tmp &= mask;
    1efc:	2210      	movs	r2, #16
}

static inline hri_sysctrl_pclksr_reg_t hri_sysctrl_get_PCLKSR_reg(const void *const hw, hri_sysctrl_pclksr_reg_t mask) 
{
        uint32_t tmp; 
        tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    1efe:	68cb      	ldr	r3, [r1, #12]
				DFLL_READY_FLAG);
	} else {
		while(hri_sysctrl_get_PCLKSR_reg(SYSCTRL, SYSCTRL_PCLKSR_DFLLRDY) !=
    1f00:	421a      	tst	r2, r3
    1f02:	d0fc      	beq.n	1efe <_usb_d_dev_handler+0xb6>
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    1f04:	4b55      	ldr	r3, [pc, #340]	; (205c <STACK_SIZE+0x5c>)
    1f06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    1f08:	2002      	movs	r0, #2
    1f0a:	2100      	movs	r1, #0
    1f0c:	4798      	blx	r3
    1f0e:	e09f      	b.n	2050 <STACK_SIZE+0x50>
		_usb_d_dev_lpmsusp();
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
		_usb_d_dev_ramerr();
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
		_usb_d_dev_wakeup();
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    1f10:	071a      	lsls	r2, r3, #28
    1f12:	d512      	bpl.n	1f3a <_usb_d_dev_handler+0xf2>
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epcfg_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    1f14:	4b50      	ldr	r3, [pc, #320]	; (2058 <STACK_SIZE+0x58>)
    1f16:	2100      	movs	r1, #0
    1f18:	2280      	movs	r2, #128	; 0x80
    1f1a:	0052      	lsls	r2, r2, #1
    1f1c:	5499      	strb	r1, [r3, r2]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
}

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1f1e:	3af8      	subs	r2, #248	; 0xf8
    1f20:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_inten_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1f22:	3268      	adds	r2, #104	; 0x68
    1f24:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENCLR_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_inten_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1f26:	4a4e      	ldr	r2, [pc, #312]	; (2060 <STACK_SIZE+0x60>)
    1f28:	831a      	strh	r2, [r3, #24]

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);

	_usb_d_dev_reset_epts();
    1f2a:	4b4f      	ldr	r3, [pc, #316]	; (2068 <STACK_SIZE+0x68>)
    1f2c:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    1f2e:	4b4b      	ldr	r3, [pc, #300]	; (205c <STACK_SIZE+0x5c>)
    1f30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    1f32:	2001      	movs	r0, #1
    1f34:	2100      	movs	r1, #0
    1f36:	4798      	blx	r3
    1f38:	e08a      	b.n	2050 <STACK_SIZE+0x50>
		_usb_d_dev_ramerr();
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
		_usb_d_dev_wakeup();
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
		_usb_d_dev_reset();
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    1f3a:	07db      	lsls	r3, r3, #31
    1f3c:	d405      	bmi.n	1f4a <_usb_d_dev_handler+0x102>
    1f3e:	4c47      	ldr	r4, [pc, #284]	; (205c <STACK_SIZE+0x5c>)
    1f40:	347c      	adds	r4, #124	; 0x7c
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
	uint8_t i;
	uint32_t lpm_variable = 0;
    1f42:	2500      	movs	r5, #0
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
	mask = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
	flags &= mask;
	if (flags) {
		if (!_usb_d_dev_ep_is_busy(ept)) {
    1f44:	4b45      	ldr	r3, [pc, #276]	; (205c <STACK_SIZE+0x5c>)
    1f46:	4698      	mov	r8, r3
    1f48:	e00c      	b.n	1f64 <_usb_d_dev_handler+0x11c>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
}

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1f4a:	4b43      	ldr	r3, [pc, #268]	; (2058 <STACK_SIZE+0x58>)
    1f4c:	4a44      	ldr	r2, [pc, #272]	; (2060 <STACK_SIZE+0x60>)
    1f4e:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_inten_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1f50:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENCLR_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_inten_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1f52:	3a92      	subs	r2, #146	; 0x92
    1f54:	3aff      	subs	r2, #255	; 0xff
    1f56:	831a      	strh	r2, [r3, #24]
{
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    1f58:	4b40      	ldr	r3, [pc, #256]	; (205c <STACK_SIZE+0x5c>)
    1f5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    1f5c:	2004      	movs	r0, #4
    1f5e:	2100      	movs	r1, #0
    1f60:	4798      	blx	r3
    1f62:	e075      	b.n	2050 <STACK_SIZE+0x50>
    1f64:	1c20      	adds	r0, r4, #0
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i ++) {
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
		if (ept->ep == 0xFF) {
    1f66:	7ca3      	ldrb	r3, [r4, #18]
    1f68:	2bff      	cmp	r3, #255	; 0xff
    1f6a:	d06d      	beq.n	2048 <STACK_SIZE+0x48>
	Usb *hw = USB;

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);

	if (!(epint & (1u << epn))) {
    1f6c:	210f      	movs	r1, #15
    1f6e:	400b      	ands	r3, r1
    1f70:	390e      	subs	r1, #14
    1f72:	4099      	lsls	r1, r3
    1f74:	420e      	tst	r6, r1
    1f76:	d067      	beq.n	2048 <STACK_SIZE+0x48>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    1f78:	0159      	lsls	r1, r3, #5
    1f7a:	4f3c      	ldr	r7, [pc, #240]	; (206c <STACK_SIZE+0x6c>)
    1f7c:	46bc      	mov	ip, r7
    1f7e:	4461      	add	r1, ip
    1f80:	79c9      	ldrb	r1, [r1, #7]
	mask = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    1f82:	015b      	lsls	r3, r3, #5
    1f84:	4f3a      	ldr	r7, [pc, #232]	; (2070 <STACK_SIZE+0x70>)
    1f86:	46bc      	mov	ip, r7
    1f88:	4463      	add	r3, ip
    1f8a:	785b      	ldrb	r3, [r3, #1]
	flags &= mask;
    1f8c:	400b      	ands	r3, r1
	if (flags) {
    1f8e:	d05b      	beq.n	2048 <STACK_SIZE+0x48>
		if (!_usb_d_dev_ep_is_busy(ept)) {
    1f90:	00a9      	lsls	r1, r5, #2
    1f92:	194a      	adds	r2, r1, r5
    1f94:	0092      	lsls	r2, r2, #2
    1f96:	4442      	add	r2, r8
    1f98:	3278      	adds	r2, #120	; 0x78
    1f9a:	7dd2      	ldrb	r2, [r2, #23]
    1f9c:	0651      	lsls	r1, r2, #25
    1f9e:	d410      	bmi.n	1fc2 <_usb_d_dev_handler+0x17a>
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1fa0:	06da      	lsls	r2, r3, #27
    1fa2:	d502      	bpl.n	1faa <_usb_d_dev_handler+0x162>
		_usb_d_dev_handle_setup(ept);
    1fa4:	4b33      	ldr	r3, [pc, #204]	; (2074 <STACK_SIZE+0x74>)
    1fa6:	4798      	blx	r3
    1fa8:	e04e      	b.n	2048 <STACK_SIZE+0x48>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    1faa:	065a      	lsls	r2, r3, #25
    1fac:	d503      	bpl.n	1fb6 <_usb_d_dev_handler+0x16e>
		_usb_d_dev_handle_stall(ept, 1);
    1fae:	2101      	movs	r1, #1
    1fb0:	4b31      	ldr	r3, [pc, #196]	; (2078 <STACK_SIZE+0x78>)
    1fb2:	4798      	blx	r3
    1fb4:	e048      	b.n	2048 <STACK_SIZE+0x48>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    1fb6:	069b      	lsls	r3, r3, #26
    1fb8:	d546      	bpl.n	2048 <STACK_SIZE+0x48>
		_usb_d_dev_handle_stall(ept, 0);
    1fba:	2100      	movs	r1, #0
    1fbc:	4b2e      	ldr	r3, [pc, #184]	; (2078 <STACK_SIZE+0x78>)
    1fbe:	4798      	blx	r3
    1fc0:	e042      	b.n	2048 <STACK_SIZE+0x48>
	mask = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
	flags &= mask;
	if (flags) {
		if (!_usb_d_dev_ep_is_busy(ept)) {
			_usb_d_dev_trans_setup_isr(ept, flags);
		} else if (_usb_d_dev_ep_is_in(ept)) {
    1fc2:	09d1      	lsrs	r1, r2, #7
    1fc4:	d020      	beq.n	2008 <STACK_SIZE+0x8>
{
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    1fc6:	0659      	lsls	r1, r3, #25
    1fc8:	d503      	bpl.n	1fd2 <_usb_d_dev_handler+0x18a>
		_usb_d_dev_handle_stall(ept, 1);
    1fca:	2101      	movs	r1, #1
    1fcc:	4b2a      	ldr	r3, [pc, #168]	; (2078 <STACK_SIZE+0x78>)
    1fce:	4798      	blx	r3
    1fd0:	e03a      	b.n	2048 <STACK_SIZE+0x48>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    1fd2:	0719      	lsls	r1, r3, #28
    1fd4:	d503      	bpl.n	1fde <_usb_d_dev_handler+0x196>
		_usb_d_dev_handle_trfail(ept, 1);
    1fd6:	2101      	movs	r1, #1
    1fd8:	4b28      	ldr	r3, [pc, #160]	; (207c <STACK_SIZE+0x7c>)
    1fda:	4798      	blx	r3
    1fdc:	e034      	b.n	2048 <STACK_SIZE+0x48>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    1fde:	0799      	lsls	r1, r3, #30
    1fe0:	d503      	bpl.n	1fea <_usb_d_dev_handler+0x1a2>
		_usb_d_dev_in_next(ept, true);
    1fe2:	2101      	movs	r1, #1
    1fe4:	4b26      	ldr	r3, [pc, #152]	; (2080 <STACK_SIZE+0x80>)
    1fe6:	4798      	blx	r3
    1fe8:	e02e      	b.n	2048 <STACK_SIZE+0x48>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    1fea:	2107      	movs	r1, #7
    1fec:	400a      	ands	r2, r1
    1fee:	2a01      	cmp	r2, #1
    1ff0:	d12a      	bne.n	2048 <STACK_SIZE+0x48>
		/* Check OUT NAK
		 * Check SETUP
		 */
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    1ff2:	075a      	lsls	r2, r3, #29
    1ff4:	d503      	bpl.n	1ffe <_usb_d_dev_handler+0x1b6>
			_usb_d_dev_handle_trfail(ept, 0);
    1ff6:	2100      	movs	r1, #0
    1ff8:	4b20      	ldr	r3, [pc, #128]	; (207c <STACK_SIZE+0x7c>)
    1ffa:	4798      	blx	r3
    1ffc:	e024      	b.n	2048 <STACK_SIZE+0x48>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1ffe:	06db      	lsls	r3, r3, #27
    2000:	d522      	bpl.n	2048 <STACK_SIZE+0x48>
			_usb_d_dev_handle_setup(ept);
    2002:	4b1c      	ldr	r3, [pc, #112]	; (2074 <STACK_SIZE+0x74>)
    2004:	4798      	blx	r3
    2006:	e01f      	b.n	2048 <STACK_SIZE+0x48>
{
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    2008:	0699      	lsls	r1, r3, #26
    200a:	d503      	bpl.n	2014 <STACK_SIZE+0x14>
		_usb_d_dev_handle_stall(ept, 0);
    200c:	2100      	movs	r1, #0
    200e:	4b1a      	ldr	r3, [pc, #104]	; (2078 <STACK_SIZE+0x78>)
    2010:	4798      	blx	r3
    2012:	e019      	b.n	2048 <STACK_SIZE+0x48>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    2014:	0759      	lsls	r1, r3, #29
    2016:	d503      	bpl.n	2020 <STACK_SIZE+0x20>
		_usb_d_dev_handle_trfail(ept, 0);
    2018:	2100      	movs	r1, #0
    201a:	4b18      	ldr	r3, [pc, #96]	; (207c <STACK_SIZE+0x7c>)
    201c:	4798      	blx	r3
    201e:	e013      	b.n	2048 <STACK_SIZE+0x48>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    2020:	07d9      	lsls	r1, r3, #31
    2022:	d503      	bpl.n	202c <STACK_SIZE+0x2c>
		_usb_d_dev_out_next(ept, true);
    2024:	2101      	movs	r1, #1
    2026:	4b17      	ldr	r3, [pc, #92]	; (2084 <STACK_SIZE+0x84>)
    2028:	4798      	blx	r3
    202a:	e00d      	b.n	2048 <STACK_SIZE+0x48>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    202c:	2107      	movs	r1, #7
    202e:	400a      	ands	r2, r1
    2030:	2a01      	cmp	r2, #1
    2032:	d109      	bne.n	2048 <STACK_SIZE+0x48>
		/* Check IN NAK
		 * Check SETUP
		 */
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    2034:	071a      	lsls	r2, r3, #28
    2036:	d503      	bpl.n	2040 <STACK_SIZE+0x40>
			_usb_d_dev_handle_trfail(ept, 1);
    2038:	3906      	subs	r1, #6
    203a:	4b10      	ldr	r3, [pc, #64]	; (207c <STACK_SIZE+0x7c>)
    203c:	4798      	blx	r3
    203e:	e003      	b.n	2048 <STACK_SIZE+0x48>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2040:	06db      	lsls	r3, r3, #27
    2042:	d501      	bpl.n	2048 <STACK_SIZE+0x48>
			_usb_d_dev_handle_setup(ept);
    2044:	4b0b      	ldr	r3, [pc, #44]	; (2074 <STACK_SIZE+0x74>)
    2046:	4798      	blx	r3
    2048:	3501      	adds	r5, #1
    204a:	3414      	adds	r4, #20
		if (_usb_d_dev_handle_nep()) {
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i ++) {
    204c:	2d1b      	cmp	r5, #27
    204e:	d189      	bne.n	1f64 <_usb_d_dev_handler+0x11c>
		if (ept->ep == 0xFF) {
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
	}
}
    2050:	bc04      	pop	{r2}
    2052:	4690      	mov	r8, r2
    2054:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2056:	46c0      	nop			; (mov r8, r8)
    2058:	41005000 	.word	0x41005000
    205c:	20000060 	.word	0x20000060
    2060:	00000201 	.word	0x00000201
    2064:	40000800 	.word	0x40000800
    2068:	00001e01 	.word	0x00001e01
    206c:	41005100 	.word	0x41005100
    2070:	41005108 	.word	0x41005108
    2074:	00001795 	.word	0x00001795
    2078:	0000184d 	.word	0x0000184d
    207c:	000018f1 	.word	0x000018f1
    2080:	00001a05 	.word	0x00001a05
    2084:	00001bc5 	.word	0x00001bc5

00002088 <_usb_d_dev_init>:
	(void)unused1;
	return false;
}

int32_t _usb_d_dev_init(void)
{
    2088:	b508      	push	{r3, lr}
typedef uint8_t hri_usbpipe_pstatusclr_reg_t;
typedef uint8_t hri_usbpipe_pstatusset_reg_t;

static inline void hri_usbdevice_wait_for_sync(const void *const hw, hri_usbdevice_syncbusy_reg_t reg)
{
	while(((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {};
    208a:	492b      	ldr	r1, [pc, #172]	; (2138 <_usb_d_dev_init+0xb0>)
    208c:	2201      	movs	r2, #1
    208e:	788b      	ldrb	r3, [r1, #2]
    2090:	4213      	tst	r3, r2
    2092:	d1fc      	bne.n	208e <_usb_d_dev_init+0x6>
    2094:	4928      	ldr	r1, [pc, #160]	; (2138 <_usb_d_dev_init+0xb0>)
    2096:	2203      	movs	r2, #3
    2098:	788b      	ldrb	r3, [r1, #2]
    209a:	4213      	tst	r3, r2
    209c:	d1fc      	bne.n	2098 <_usb_d_dev_init+0x10>

static inline bool hri_usbdevice_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST|USB_SYNCBUSY_ENABLE);
	tmp = ((Usb *)hw)->DEVICE.CTRLA.reg;
    209e:	4b26      	ldr	r3, [pc, #152]	; (2138 <_usb_d_dev_init+0xb0>)
    20a0:	781b      	ldrb	r3, [r3, #0]
		USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
		0, 0 /* Reserved */
	};

	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
	if (hri_usbdevice_get_CTRLA_ENABLE_bit(hw)) {
    20a2:	079b      	lsls	r3, r3, #30
    20a4:	d445      	bmi.n	2132 <_usb_d_dev_init+0xaa>
typedef uint8_t hri_usbpipe_pstatusclr_reg_t;
typedef uint8_t hri_usbpipe_pstatusset_reg_t;

static inline void hri_usbdevice_wait_for_sync(const void *const hw, hri_usbdevice_syncbusy_reg_t reg)
{
	while(((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {};
    20a6:	4924      	ldr	r1, [pc, #144]	; (2138 <_usb_d_dev_init+0xb0>)
    20a8:	2201      	movs	r2, #1
    20aa:	788b      	ldrb	r3, [r1, #2]
    20ac:	4213      	tst	r3, r2
    20ae:	d1fc      	bne.n	20aa <_usb_d_dev_init+0x22>

static inline void hri_usbdevice_set_CTRLA_SWRST_bit(const void *const hw)
{
	USB_CRITICAL_SECTION_ENTER();
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
	((Usb *)hw)->DEVICE.CTRLA.reg |= USB_CTRLA_SWRST;
    20b0:	4a21      	ldr	r2, [pc, #132]	; (2138 <_usb_d_dev_init+0xb0>)
    20b2:	7811      	ldrb	r1, [r2, #0]
    20b4:	2301      	movs	r3, #1
    20b6:	430b      	orrs	r3, r1
    20b8:	7013      	strb	r3, [r2, #0]
typedef uint8_t hri_usbpipe_pstatusclr_reg_t;
typedef uint8_t hri_usbpipe_pstatusset_reg_t;

static inline void hri_usbdevice_wait_for_sync(const void *const hw, hri_usbdevice_syncbusy_reg_t reg)
{
	while(((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {};
    20ba:	1c11      	adds	r1, r2, #0
    20bc:	2201      	movs	r2, #1
    20be:	788b      	ldrb	r3, [r1, #2]
    20c0:	4213      	tst	r3, r2
    20c2:	d1fc      	bne.n	20be <_usb_d_dev_init+0x36>
		return ERR_DENIED;
	}
	hri_usbdevice_set_CTRLA_SWRST_bit(hw);
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);

	dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    20c4:	4b1d      	ldr	r3, [pc, #116]	; (213c <_usb_d_dev_init+0xb4>)
    20c6:	4a1e      	ldr	r2, [pc, #120]	; (2140 <_usb_d_dev_init+0xb8>)
    20c8:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    20ca:	66da      	str	r2, [r3, #108]	; 0x6c

	dev_inst.ep_callbacks.setup =
    20cc:	671a      	str	r2, [r3, #112]	; 0x70
			(_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
	dev_inst.ep_callbacks.more =
    20ce:	675a      	str	r2, [r3, #116]	; 0x74
			(_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
	dev_inst.ep_callbacks.done =
    20d0:	679a      	str	r2, [r3, #120]	; 0x78
			(_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;

	_usb_d_dev_reset_epts();
    20d2:	4b1c      	ldr	r3, [pc, #112]	; (2144 <_usb_d_dev_init+0xbc>)
    20d4:	4798      	blx	r3
#define NVM_USB_PAD_TRANSP_POS  50
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS  55
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *hw = USB;
	uint32_t pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    20d6:	4b1c      	ldr	r3, [pc, #112]	; (2148 <_usb_d_dev_init+0xc0>)
    20d8:	681b      	ldr	r3, [r3, #0]
			+ (NVM_USB_PAD_TRANSN_POS / 32))
			>> (NVM_USB_PAD_TRANSN_POS % 32))
    20da:	0b5a      	lsrs	r2, r3, #13
#define NVM_USB_PAD_TRANSP_POS  50
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS  55
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *hw = USB;
	uint32_t pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    20dc:	201f      	movs	r0, #31
    20de:	4002      	ands	r2, r0
			+ (NVM_USB_PAD_TRANSN_POS / 32))
			>> (NVM_USB_PAD_TRANSN_POS % 32))
			& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    20e0:	0c99      	lsrs	r1, r3, #18
	Usb *hw = USB;
	uint32_t pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
			+ (NVM_USB_PAD_TRANSN_POS / 32))
			>> (NVM_USB_PAD_TRANSN_POS % 32))
			& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    20e2:	4001      	ands	r1, r0
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    20e4:	019b      	lsls	r3, r3, #6
    20e6:	0f5b      	lsrs	r3, r3, #29
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0x1F) {
    20e8:	2a1f      	cmp	r2, #31
    20ea:	d100      	bne.n	20ee <_usb_d_dev_init+0x66>
		pad_transn = 5;
    20ec:	3a1a      	subs	r2, #26
	}
	if (pad_transp == 0x1F) {
    20ee:	291f      	cmp	r1, #31
    20f0:	d100      	bne.n	20f4 <_usb_d_dev_init+0x6c>
		pad_transp = 29;
    20f2:	3902      	subs	r1, #2
	}
	if (pad_trim == 0x7) {
    20f4:	2b07      	cmp	r3, #7
    20f6:	d100      	bne.n	20fa <_usb_d_dev_init+0x72>
		pad_trim = 5;
    20f8:	3b02      	subs	r3, #2
	}
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) |
    20fa:	0192      	lsls	r2, r2, #6
    20fc:	430a      	orrs	r2, r1
    20fe:	031b      	lsls	r3, r3, #12
    2100:	4313      	orrs	r3, r2
    2102:	4a0d      	ldr	r2, [pc, #52]	; (2138 <_usb_d_dev_init+0xb0>)
    2104:	8513      	strh	r3, [r2, #40]	; 0x28
    2106:	1c11      	adds	r1, r2, #0
    2108:	2203      	movs	r2, #3
    210a:	788b      	ldrb	r3, [r1, #2]
    210c:	4213      	tst	r3, r2
    210e:	d1fc      	bne.n	210a <_usb_d_dev_init+0x82>

static inline void hri_usbdevice_write_CTRLA_reg(const void *const hw, hri_usbdevice_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	((Usb *)hw)->DEVICE.CTRLA.reg = data;
    2110:	4b09      	ldr	r3, [pc, #36]	; (2138 <_usb_d_dev_init+0xb0>)
    2112:	2204      	movs	r2, #4
    2114:	701a      	strb	r2, [r3, #0]
	_usb_d_dev_reset_epts();

	_usb_d_dev_load_calib();

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    2116:	4909      	ldr	r1, [pc, #36]	; (213c <_usb_d_dev_init+0xb4>)
}

static inline void hri_usbdevice_write_DESCADD_reg(const void *const hw, hri_usbdevice_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DESCADD.reg = data;
    2118:	6259      	str	r1, [r3, #36]	; 0x24
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    211a:	3a03      	subs	r2, #3
    211c:	811a      	strh	r2, [r3, #8]
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);

	dev_inst.irq.handler = _usb_d_dev_handler;
    211e:	4b0b      	ldr	r3, [pc, #44]	; (214c <_usb_d_dev_init+0xc4>)
    2120:	660b      	str	r3, [r1, #96]	; 0x60
	dev_inst.irq.parameter = NULL;
    2122:	2300      	movs	r3, #0
    2124:	664b      	str	r3, [r1, #100]	; 0x64
	_irq_register(USB_IRQn, &dev_inst.irq);
    2126:	3160      	adds	r1, #96	; 0x60
    2128:	2007      	movs	r0, #7
    212a:	4b09      	ldr	r3, [pc, #36]	; (2150 <_usb_d_dev_init+0xc8>)
    212c:	4798      	blx	r3

	return ERR_NONE;
    212e:	2000      	movs	r0, #0
    2130:	e001      	b.n	2136 <_usb_d_dev_init+0xae>
		0, 0 /* Reserved */
	};

	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
	if (hri_usbdevice_get_CTRLA_ENABLE_bit(hw)) {
		return ERR_DENIED;
    2132:	2011      	movs	r0, #17
    2134:	4240      	negs	r0, r0
	dev_inst.irq.handler = _usb_d_dev_handler;
	dev_inst.irq.parameter = NULL;
	_irq_register(USB_IRQn, &dev_inst.irq);

	return ERR_NONE;
}
    2136:	bd08      	pop	{r3, pc}
    2138:	41005000 	.word	0x41005000
    213c:	20000060 	.word	0x20000060
    2140:	00001821 	.word	0x00001821
    2144:	00001e01 	.word	0x00001e01
    2148:	00806024 	.word	0x00806024
    214c:	00001e49 	.word	0x00001e49
    2150:	000007fd 	.word	0x000007fd

00002154 <_usb_d_dev_ep_stall>:
	return ERR_NONE;
}

int32_t _usb_d_dev_ep_stall(const uint8_t ep,
		const enum usb_ep_stall_ctrl ctrl)
{
    2154:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t epn = USB_EP_GET_N(ep);
    2156:	240f      	movs	r4, #15
    2158:	4004      	ands	r4, r0
	bool dir = USB_EP_GET_DIR(ep);
    215a:	09c2      	lsrs	r2, r0, #7
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
	uint8_t ep_index = (epn == 0) ? 0 :
    215c:	2c00      	cmp	r4, #0
    215e:	d006      	beq.n	216e <_usb_d_dev_ep_stall+0x1a>
    2160:	1c23      	adds	r3, r4, #0
    2162:	2a00      	cmp	r2, #0
    2164:	d000      	beq.n	2168 <_usb_d_dev_ep_stall+0x14>
    2166:	1ca3      	adds	r3, r4, #2
	uint8_t epn = USB_EP_GET_N(ep);
	bool dir = USB_EP_GET_DIR(ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
	int32_t rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    2168:	2c02      	cmp	r4, #2
    216a:	d901      	bls.n	2170 <_usb_d_dev_ep_stall+0x1c>
    216c:	e095      	b.n	229a <_usb_d_dev_ep_stall+0x146>
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
	uint8_t ep_index = (epn == 0) ? 0 :
			(dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
	return &dev_inst.ep[ep_index];
    216e:	2300      	movs	r3, #0

	if (epn > CONF_USB_D_MAX_EP_N) {
		return -USB_ERR_PARAM;
	}

	if (USB_EP_STALL_SET == ctrl) {
    2170:	2901      	cmp	r1, #1
    2172:	d122      	bne.n	21ba <_usb_d_dev_ep_stall+0x66>
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
	if (st) {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn,
				(USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2174:	2610      	movs	r6, #16
    2176:	4096      	lsls	r6, r2
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
	if (st) {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn,
    2178:	b2f6      	uxtb	r6, r6
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept,
		bool dir)
{
	uint8_t epn = USB_EP_GET_N(ept->ep);
    217a:	4d49      	ldr	r5, [pc, #292]	; (22a0 <_usb_d_dev_ep_stall+0x14c>)
    217c:	0099      	lsls	r1, r3, #2
    217e:	18c8      	adds	r0, r1, r3
    2180:	0080      	lsls	r0, r0, #2
    2182:	1828      	adds	r0, r5, r0
    2184:	3088      	adds	r0, #136	; 0x88
    2186:	7980      	ldrb	r0, [r0, #6]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg & mask;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epstatus_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2188:	240f      	movs	r4, #15
    218a:	4004      	ands	r4, r0
    218c:	0160      	lsls	r0, r4, #5
    218e:	4f45      	ldr	r7, [pc, #276]	; (22a4 <_usb_d_dev_ep_stall+0x150>)
    2190:	46bc      	mov	ip, r7
    2192:	4460      	add	r0, ip
    2194:	7146      	strb	r6, [r0, #5]
	_usbd_ep_set_stall(epn, dir, true);
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    2196:	2020      	movs	r0, #32
    2198:	4090      	lsls	r0, r2
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    219a:	b2c2      	uxtb	r2, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epinten_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    219c:	0164      	lsls	r4, r4, #5
    219e:	4842      	ldr	r0, [pc, #264]	; (22a8 <_usb_d_dev_ep_stall+0x154>)
    21a0:	4684      	mov	ip, r0
    21a2:	4464      	add	r4, ip
    21a4:	7062      	strb	r2, [r4, #1]
		bool dir)
{
	uint8_t epn = USB_EP_GET_N(ept->ep);
	_usbd_ep_set_stall(epn, dir, true);
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
	ept->flags.bits.is_stalled = 1;
    21a6:	18cb      	adds	r3, r1, r3
    21a8:	009b      	lsls	r3, r3, #2
    21aa:	18eb      	adds	r3, r5, r3
    21ac:	3388      	adds	r3, #136	; 0x88
    21ae:	79d9      	ldrb	r1, [r3, #7]
    21b0:	2208      	movs	r2, #8
    21b2:	430a      	orrs	r2, r1
    21b4:	71da      	strb	r2, [r3, #7]
	if (epn > CONF_USB_D_MAX_EP_N) {
		return -USB_ERR_PARAM;
	}

	if (USB_EP_STALL_SET == ctrl) {
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    21b6:	2000      	movs	r0, #0
    21b8:	e071      	b.n	229e <_usb_d_dev_ep_stall+0x14a>
	} else if (USB_EP_STALL_CLR == ctrl) {
    21ba:	2900      	cmp	r1, #0
    21bc:	d159      	bne.n	2272 <_usb_d_dev_ep_stall+0x11e>
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept,
		bool dir)
{
	uint8_t epn = USB_EP_GET_N(ept->ep);
    21be:	0099      	lsls	r1, r3, #2
    21c0:	18c9      	adds	r1, r1, r3
    21c2:	0089      	lsls	r1, r1, #2
    21c4:	4836      	ldr	r0, [pc, #216]	; (22a0 <_usb_d_dev_ep_stall+0x14c>)
    21c6:	1841      	adds	r1, r0, r1
    21c8:	3188      	adds	r1, #136	; 0x88
    21ca:	7989      	ldrb	r1, [r1, #6]
    21cc:	200f      	movs	r0, #15
    21ce:	4001      	ands	r1, r0
    21d0:	014d      	lsls	r5, r1, #5
    21d2:	4836      	ldr	r0, [pc, #216]	; (22ac <_usb_d_dev_ep_stall+0x158>)
    21d4:	4684      	mov	ip, r0
    21d6:	4465      	add	r5, ip
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw, uint8_t submodule_index)
{
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    21d8:	2083      	movs	r0, #131	; 0x83
    21da:	0040      	lsls	r0, r0, #1
    21dc:	5c2e      	ldrb	r6, [r5, r0]
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
	Usb *hw = USB;
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) &
			(USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    21de:	2410      	movs	r4, #16
    21e0:	4094      	lsls	r4, r2
	}

	if (USB_EP_STALL_SET == ctrl) {
		rc = _usb_d_dev_ep_stall_set(ept, dir);
	} else if (USB_EP_STALL_CLR == ctrl) {
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    21e2:	2000      	movs	r0, #0
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept,
		bool dir)
{
	uint8_t epn = USB_EP_GET_N(ept->ep);
	bool is_stalled = _usbd_ep_is_stalled(epn, dir);
	if (!is_stalled) {
    21e4:	4226      	tst	r6, r4
    21e6:	d05a      	beq.n	229e <_usb_d_dev_ep_stall+0x14a>
{
	if (st) {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn,
				(USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn,
    21e8:	b2e4      	uxtb	r4, r4
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epstatus_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    21ea:	3005      	adds	r0, #5
    21ec:	30ff      	adds	r0, #255	; 0xff
    21ee:	542c      	strb	r4, [r5, r0]
	bool is_stalled = _usbd_ep_is_stalled(epn, dir);
	if (!is_stalled) {
		return ERR_NONE;
	}
	_usbd_ep_set_stall(epn, dir, false);
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    21f0:	38e4      	subs	r0, #228	; 0xe4
    21f2:	1c04      	adds	r4, r0, #0
    21f4:	4094      	lsls	r4, r2
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    21f6:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epinten_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    21f8:	0149      	lsls	r1, r1, #5
    21fa:	4e2b      	ldr	r6, [pc, #172]	; (22a8 <_usb_d_dev_ep_stall+0x154>)
    21fc:	46b4      	mov	ip, r6
    21fe:	4461      	add	r1, ip
    2200:	700c      	strb	r4, [r1, #0]
	return tmp;
}

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index)
{
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    2202:	2108      	movs	r1, #8
    2204:	31ff      	adds	r1, #255	; 0xff
    2206:	5c69      	ldrb	r1, [r5, r1]
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
	Usb *hw = USB;
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) &
			(USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    2208:	4090      	lsls	r0, r2
	if (!is_stalled) {
		return ERR_NONE;
	}
	_usbd_ep_set_stall(epn, dir, false);
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    220a:	4201      	tst	r1, r0
    220c:	d008      	beq.n	2220 <_usb_d_dev_ep_stall+0xcc>
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    220e:	b2c0      	uxtb	r0, r0
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2210:	2108      	movs	r1, #8
    2212:	31ff      	adds	r1, #255	; 0xff
    2214:	5468      	strb	r0, [r5, r1]
	if (tgl) {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn,
				(USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn,
				(USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    2216:	2001      	movs	r0, #1
    2218:	4090      	lsls	r0, r2
{
	if (tgl) {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn,
				(USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn,
    221a:	b2c2      	uxtb	r2, r0
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epstatus_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    221c:	3903      	subs	r1, #3
    221e:	546a      	strb	r2, [r5, r1]
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
	if (_usbd_ep_is_stall_sent(epn, dir)) {
		_usbd_ep_ack_stall(epn, dir);
		_usbd_ep_set_toggle(epn, dir, 0);
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    2220:	009a      	lsls	r2, r3, #2
    2222:	18d2      	adds	r2, r2, r3
    2224:	0092      	lsls	r2, r2, #2
    2226:	491e      	ldr	r1, [pc, #120]	; (22a0 <_usb_d_dev_ep_stall+0x14c>)
    2228:	188a      	adds	r2, r1, r2
    222a:	3278      	adds	r2, #120	; 0x78
    222c:	7dd2      	ldrb	r2, [r2, #23]
    222e:	2107      	movs	r1, #7
    2230:	400a      	ands	r2, r1
    2232:	2a01      	cmp	r2, #1
    2234:	d111      	bne.n	225a <_usb_d_dev_ep_stall+0x106>
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw, uint8_t submodule_index)
{
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    2236:	3206      	adds	r2, #6
    2238:	32ff      	adds	r2, #255	; 0xff
    223a:	5ca9      	ldrb	r1, [r5, r2]
	}

	if (USB_EP_STALL_SET == ctrl) {
		rc = _usb_d_dev_ep_stall_set(ept, dir);
	} else if (USB_EP_STALL_CLR == ctrl) {
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    223c:	2000      	movs	r0, #0
	if (_usbd_ep_is_stall_sent(epn, dir)) {
		_usbd_ep_ack_stall(epn, dir);
		_usbd_ep_set_toggle(epn, dir, 0);
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) &
    223e:	3ad6      	subs	r2, #214	; 0xd6
    2240:	4211      	tst	r1, r2
    2242:	d12c      	bne.n	229e <_usb_d_dev_ep_stall+0x14a>
				USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
			ept->flags.bits.is_stalled = 0;
    2244:	009a      	lsls	r2, r3, #2
    2246:	18d3      	adds	r3, r2, r3
    2248:	009b      	lsls	r3, r3, #2
    224a:	4a15      	ldr	r2, [pc, #84]	; (22a0 <_usb_d_dev_ep_stall+0x14c>)
    224c:	18d3      	adds	r3, r2, r3
    224e:	3388      	adds	r3, #136	; 0x88
    2250:	79da      	ldrb	r2, [r3, #7]
    2252:	2108      	movs	r1, #8
    2254:	438a      	bics	r2, r1
    2256:	71da      	strb	r2, [r3, #7]
    2258:	e021      	b.n	229e <_usb_d_dev_ep_stall+0x14a>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    225a:	009a      	lsls	r2, r3, #2
    225c:	18d3      	adds	r3, r2, r3
    225e:	009b      	lsls	r3, r3, #2
    2260:	4a0f      	ldr	r2, [pc, #60]	; (22a0 <_usb_d_dev_ep_stall+0x14c>)
    2262:	18d3      	adds	r3, r2, r3
    2264:	3388      	adds	r3, #136	; 0x88
    2266:	79da      	ldrb	r2, [r3, #7]
    2268:	2108      	movs	r1, #8
    226a:	438a      	bics	r2, r1
    226c:	71da      	strb	r2, [r3, #7]
	}

	if (USB_EP_STALL_SET == ctrl) {
		rc = _usb_d_dev_ep_stall_set(ept, dir);
	} else if (USB_EP_STALL_CLR == ctrl) {
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    226e:	2000      	movs	r0, #0
    2270:	e015      	b.n	229e <_usb_d_dev_ep_stall+0x14a>
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept,
		bool dir)
{
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2272:	0099      	lsls	r1, r3, #2
    2274:	18cb      	adds	r3, r1, r3
    2276:	009b      	lsls	r3, r3, #2
    2278:	4909      	ldr	r1, [pc, #36]	; (22a0 <_usb_d_dev_ep_stall+0x14c>)
    227a:	18cb      	adds	r3, r1, r3
    227c:	3388      	adds	r3, #136	; 0x88
    227e:	799b      	ldrb	r3, [r3, #6]
    2280:	210f      	movs	r1, #15
    2282:	400b      	ands	r3, r1
    2284:	015b      	lsls	r3, r3, #5
    2286:	4907      	ldr	r1, [pc, #28]	; (22a4 <_usb_d_dev_ep_stall+0x150>)
    2288:	468c      	mov	ip, r1
    228a:	4463      	add	r3, ip
    228c:	7998      	ldrb	r0, [r3, #6]
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
	Usb *hw = USB;
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) &
			(USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    228e:	2310      	movs	r3, #16
    2290:	4093      	lsls	r3, r2
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
	Usb *hw = USB;
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) &
    2292:	4018      	ands	r0, r3
	if (USB_EP_STALL_SET == ctrl) {
		rc = _usb_d_dev_ep_stall_set(ept, dir);
	} else if (USB_EP_STALL_CLR == ctrl) {
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    2294:	1e43      	subs	r3, r0, #1
    2296:	4198      	sbcs	r0, r3
    2298:	e001      	b.n	229e <_usb_d_dev_ep_stall+0x14a>
	bool dir = USB_EP_GET_DIR(ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
	int32_t rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
		return -USB_ERR_PARAM;
    229a:	2012      	movs	r0, #18
    229c:	4240      	negs	r0, r0
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
	}
	return rc;
}
    229e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    22a0:	20000060 	.word	0x20000060
    22a4:	41005100 	.word	0x41005100
    22a8:	41005108 	.word	0x41005108
    22ac:	41005000 	.word	0x41005000

000022b0 <_usb_d_dev_ep_read_req>:
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
}

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    22b0:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn = USB_EP_GET_N(ep);
    22b2:	230f      	movs	r3, #15
    22b4:	4018      	ands	r0, r3
	UsbDeviceDescBank *bank = prvt_inst.desc_table[epn].DeviceDescBank;
    22b6:	0143      	lsls	r3, r0, #5
    22b8:	4a15      	ldr	r2, [pc, #84]	; (2310 <_usb_d_dev_ep_read_req+0x60>)
    22ba:	18d3      	adds	r3, r2, r3
	uint32_t addr = bank[0].ADDR.reg;
    22bc:	681a      	ldr	r2, [r3, #0]
	uint16_t bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    22be:	685b      	ldr	r3, [r3, #4]
    22c0:	049b      	lsls	r3, r3, #18
    22c2:	0c9d      	lsrs	r5, r3, #18

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    22c4:	2802      	cmp	r0, #2
    22c6:	d81a      	bhi.n	22fe <_usb_d_dev_ep_read_req+0x4e>
    22c8:	2900      	cmp	r1, #0
    22ca:	d01b      	beq.n	2304 <_usb_d_dev_ep_read_req+0x54>
    22cc:	0140      	lsls	r0, r0, #5
    22ce:	4b11      	ldr	r3, [pc, #68]	; (2314 <_usb_d_dev_ep_read_req+0x64>)
    22d0:	18c4      	adds	r4, r0, r3
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    22d2:	2380      	movs	r3, #128	; 0x80
    22d4:	005b      	lsls	r3, r3, #1
    22d6:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    22d8:	2b11      	cmp	r3, #17
    22da:	d116      	bne.n	230a <_usb_d_dev_ep_read_req+0x5a>
}

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    22dc:	2308      	movs	r3, #8
    22de:	33ff      	adds	r3, #255	; 0xff
    22e0:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
		return ERR_NONE;
    22e2:	2000      	movs	r0, #0
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    22e4:	06db      	lsls	r3, r3, #27
    22e6:	d512      	bpl.n	230e <_usb_d_dev_ep_read_req+0x5e>
    22e8:	1c08      	adds	r0, r1, #0
		return ERR_NONE;
	}
	memcpy(req_buf, (void*)addr, 8);
    22ea:	1c11      	adds	r1, r2, #0
    22ec:	2208      	movs	r2, #8
    22ee:	4b0a      	ldr	r3, [pc, #40]	; (2318 <_usb_d_dev_ep_read_req+0x68>)
    22f0:	4798      	blx	r3
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    22f2:	2210      	movs	r2, #16
    22f4:	2308      	movs	r3, #8
    22f6:	33ff      	adds	r3, #255	; 0xff
    22f8:	54e2      	strb	r2, [r4, r3]
	_usbd_ep_ack_setup(epn);

	return bytes;
    22fa:	1c28      	adds	r0, r5, #0
    22fc:	e007      	b.n	230e <_usb_d_dev_ep_read_req+0x5e>
	UsbDeviceDescBank *bank = prvt_inst.desc_table[epn].DeviceDescBank;
	uint32_t addr = bank[0].ADDR.reg;
	uint16_t bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
		return -USB_ERR_PARAM;
    22fe:	2012      	movs	r0, #18
    2300:	4240      	negs	r0, r0
    2302:	e004      	b.n	230e <_usb_d_dev_ep_read_req+0x5e>
    2304:	2012      	movs	r0, #18
    2306:	4240      	negs	r0, r0
    2308:	e001      	b.n	230e <_usb_d_dev_ep_read_req+0x5e>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
		return -USB_ERR_FUNC;
    230a:	2013      	movs	r0, #19
    230c:	4240      	negs	r0, r0
	}
	memcpy(req_buf, (void*)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    230e:	bd38      	pop	{r3, r4, r5, pc}
    2310:	20000060 	.word	0x20000060
    2314:	41005000 	.word	0x41005000
    2318:	00002e8d 	.word	0x00002e8d

0000231c <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    231c:	b5f0      	push	{r4, r5, r6, r7, lr}
    231e:	464f      	mov	r7, r9
    2320:	4646      	mov	r6, r8
    2322:	b4c0      	push	{r6, r7}
    2324:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(trans->ep);
    2326:	7a06      	ldrb	r6, [r0, #8]
    2328:	220f      	movs	r2, #15
    232a:	4032      	ands	r2, r6
	bool dir = USB_EP_GET_DIR(trans->ep);
    232c:	09f6      	lsrs	r6, r6, #7
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
	uint8_t ep_index = (epn == 0) ? 0 :
    232e:	2a00      	cmp	r2, #0
    2330:	d100      	bne.n	2334 <_usb_d_dev_ep_trans+0x18>
    2332:	e0c2      	b.n	24ba <_usb_d_dev_ep_trans+0x19e>
    2334:	1c13      	adds	r3, r2, #0
    2336:	2e00      	cmp	r6, #0
    2338:	d000      	beq.n	233c <_usb_d_dev_ep_trans+0x20>
    233a:	1c93      	adds	r3, r2, #2
			(dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
	return &dev_inst.ep[ep_index];
    233c:	1c1d      	adds	r5, r3, #0
    233e:	4965      	ldr	r1, [pc, #404]	; (24d4 <_usb_d_dev_ep_trans+0x1b8>)
    2340:	009f      	lsls	r7, r3, #2
    2342:	18fc      	adds	r4, r7, r3
    2344:	00a4      	lsls	r4, r4, #2
    2346:	190c      	adds	r4, r1, r4
    2348:	347c      	adds	r4, #124	; 0x7c
{
	uint8_t epn = USB_EP_GET_N(trans->ep);
	bool dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask = (ept->size == 1023) ? 1023 : (ept->size - 1);
    234a:	18fb      	adds	r3, r7, r3
    234c:	009b      	lsls	r3, r3, #2
    234e:	18cb      	adds	r3, r1, r3
    2350:	3388      	adds	r3, #136	; 0x88
    2352:	889b      	ldrh	r3, [r3, #4]
    2354:	4960      	ldr	r1, [pc, #384]	; (24d8 <_usb_d_dev_ep_trans+0x1bc>)
    2356:	428b      	cmp	r3, r1
    2358:	d103      	bne.n	2362 <_usb_d_dev_ep_trans+0x46>
    235a:	e005      	b.n	2368 <_usb_d_dev_ep_trans+0x4c>
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
	uint8_t ep_index = (epn == 0) ? 0 :
			(dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
	return &dev_inst.ep[ep_index];
    235c:	4c5d      	ldr	r4, [pc, #372]	; (24d4 <_usb_d_dev_ep_trans+0x1b8>)
    235e:	347c      	adds	r4, #124	; 0x7c
    2360:	2500      	movs	r5, #0
{
	uint8_t epn = USB_EP_GET_N(trans->ep);
	bool dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2362:	3b01      	subs	r3, #1
    2364:	b29b      	uxth	r3, r3
    2366:	e000      	b.n	236a <_usb_d_dev_ep_trans+0x4e>
    2368:	4b5b      	ldr	r3, [pc, #364]	; (24d8 <_usb_d_dev_ep_trans+0x1bc>)
	bool size_n_aligned = (trans->size & size_mask);
    236a:	6841      	ldr	r1, [r0, #4]
    236c:	400b      	ands	r3, r1
    236e:	1e5f      	subs	r7, r3, #1
    2370:	41bb      	sbcs	r3, r7
    2372:	b2df      	uxtb	r7, r3

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    2374:	2a02      	cmp	r2, #2
    2376:	d900      	bls.n	237a <_usb_d_dev_ep_trans+0x5e>
    2378:	e08d      	b.n	2496 <_usb_d_dev_ep_trans+0x17a>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) ||
    237a:	6803      	ldr	r3, [r0, #0]
    237c:	2280      	movs	r2, #128	; 0x80
    237e:	0592      	lsls	r2, r2, #22
    2380:	4293      	cmp	r3, r2
    2382:	d905      	bls.n	2390 <_usb_d_dev_ep_trans+0x74>
    2384:	18c9      	adds	r1, r1, r3
    2386:	4a55      	ldr	r2, [pc, #340]	; (24dc <_usb_d_dev_ep_trans+0x1c0>)
    2388:	4291      	cmp	r1, r2
    238a:	d801      	bhi.n	2390 <_usb_d_dev_ep_trans+0x74>
    238c:	079b      	lsls	r3, r3, #30
    238e:	d00b      	beq.n	23a8 <_usb_d_dev_ep_trans+0x8c>
			(!_usb_is_aligned(trans->buf))) {
		if (!ept->cache) {
    2390:	00ab      	lsls	r3, r5, #2
    2392:	195b      	adds	r3, r3, r5
    2394:	009b      	lsls	r3, r3, #2
    2396:	4a4f      	ldr	r2, [pc, #316]	; (24d4 <_usb_d_dev_ep_trans+0x1b8>)
    2398:	18d3      	adds	r3, r2, r3
    239a:	3380      	adds	r3, #128	; 0x80
    239c:	689b      	ldr	r3, [r3, #8]
    239e:	2b00      	cmp	r3, #0
    23a0:	d07c      	beq.n	249c <_usb_d_dev_ep_trans+0x180>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
    23a2:	2301      	movs	r3, #1
    23a4:	4698      	mov	r8, r3
    23a6:	e001      	b.n	23ac <_usb_d_dev_ep_trans+0x90>
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask = (ept->size == 1023) ? 1023 : (ept->size - 1);
	bool size_n_aligned = (trans->size & size_mask);

	bool use_cache = false;
    23a8:	2300      	movs	r3, #0
    23aa:	4698      	mov	r8, r3
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    23ac:	2e00      	cmp	r6, #0
    23ae:	d10a      	bne.n	23c6 <_usb_d_dev_ep_trans+0xaa>
    23b0:	2f00      	cmp	r7, #0
    23b2:	d008      	beq.n	23c6 <_usb_d_dev_ep_trans+0xaa>
		if (!ept->cache) {
    23b4:	00ab      	lsls	r3, r5, #2
    23b6:	195b      	adds	r3, r3, r5
    23b8:	009b      	lsls	r3, r3, #2
    23ba:	4a46      	ldr	r2, [pc, #280]	; (24d4 <_usb_d_dev_ep_trans+0x1b8>)
    23bc:	18d3      	adds	r3, r2, r3
    23be:	3380      	adds	r3, #128	; 0x80
    23c0:	689b      	ldr	r3, [r3, #8]
    23c2:	2b00      	cmp	r3, #0
    23c4:	d06d      	beq.n	24a2 <_usb_d_dev_ep_trans+0x186>
    23c6:	4681      	mov	r9, r0
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    23c8:	00ab      	lsls	r3, r5, #2
    23ca:	195b      	adds	r3, r3, r5
    23cc:	009b      	lsls	r3, r3, #2
    23ce:	4a41      	ldr	r2, [pc, #260]	; (24d4 <_usb_d_dev_ep_trans+0x1b8>)
    23d0:	18d3      	adds	r3, r2, r3
    23d2:	3378      	adds	r3, #120	; 0x78
    23d4:	7ddb      	ldrb	r3, [r3, #23]
    23d6:	071b      	lsls	r3, r3, #28
    23d8:	d504      	bpl.n	23e4 <_usb_d_dev_ep_trans+0xc8>
		atomic_leave_critical(&flags);
    23da:	a801      	add	r0, sp, #4
    23dc:	4b40      	ldr	r3, [pc, #256]	; (24e0 <_usb_d_dev_ep_trans+0x1c4>)
    23de:	4798      	blx	r3
		return USB_HALTED;
    23e0:	2002      	movs	r0, #2
    23e2:	e072      	b.n	24ca <_usb_d_dev_ep_trans+0x1ae>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    23e4:	a801      	add	r0, sp, #4
    23e6:	4b3f      	ldr	r3, [pc, #252]	; (24e4 <_usb_d_dev_ep_trans+0x1c8>)
    23e8:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    23ea:	00ab      	lsls	r3, r5, #2
    23ec:	195b      	adds	r3, r3, r5
    23ee:	009b      	lsls	r3, r3, #2
    23f0:	4a38      	ldr	r2, [pc, #224]	; (24d4 <_usb_d_dev_ep_trans+0x1b8>)
    23f2:	18d3      	adds	r3, r2, r3
    23f4:	3378      	adds	r3, #120	; 0x78
    23f6:	7ddb      	ldrb	r3, [r3, #23]
    23f8:	065b      	lsls	r3, r3, #25
    23fa:	d504      	bpl.n	2406 <_usb_d_dev_ep_trans+0xea>
		atomic_leave_critical(&flags);
    23fc:	a801      	add	r0, sp, #4
    23fe:	4b38      	ldr	r3, [pc, #224]	; (24e0 <_usb_d_dev_ep_trans+0x1c4>)
    2400:	4798      	blx	r3
		return USB_BUSY;
    2402:	2001      	movs	r0, #1
    2404:	e061      	b.n	24ca <_usb_d_dev_ep_trans+0x1ae>
	}
	atomic_leave_critical(&flags);
    2406:	a801      	add	r0, sp, #4
    2408:	4b35      	ldr	r3, [pc, #212]	; (24e0 <_usb_d_dev_ep_trans+0x1c4>)
    240a:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf = trans->buf;
    240c:	00ab      	lsls	r3, r5, #2
    240e:	195b      	adds	r3, r3, r5
    2410:	009b      	lsls	r3, r3, #2
    2412:	4a30      	ldr	r2, [pc, #192]	; (24d4 <_usb_d_dev_ep_trans+0x1b8>)
    2414:	18d3      	adds	r3, r2, r3
    2416:	1c1a      	adds	r2, r3, #0
    2418:	4649      	mov	r1, r9
    241a:	6809      	ldr	r1, [r1, #0]
    241c:	67d9      	str	r1, [r3, #124]	; 0x7c
    241e:	3278      	adds	r2, #120	; 0x78
	ept->trans_size = trans->size;
    2420:	4649      	mov	r1, r9
    2422:	6849      	ldr	r1, [r1, #4]
    2424:	6091      	str	r1, [r2, #8]
	ept->trans_count = 0;
    2426:	3208      	adds	r2, #8
    2428:	2100      	movs	r1, #0
    242a:	6051      	str	r1, [r2, #4]

	ept->flags.bits.dir = dir;
    242c:	3388      	adds	r3, #136	; 0x88
    242e:	01f0      	lsls	r0, r6, #7
    2430:	79da      	ldrb	r2, [r3, #7]
    2432:	317f      	adds	r1, #127	; 0x7f
    2434:	400a      	ands	r2, r1
	ept->flags.bits.use_cache = use_cache;
    2436:	4641      	mov	r1, r8
    2438:	0149      	lsls	r1, r1, #5
    243a:	4302      	orrs	r2, r0
    243c:	2020      	movs	r0, #32
    243e:	4382      	bics	r2, r0
    2440:	430a      	orrs	r2, r1
    2442:	71da      	strb	r2, [r3, #7]
	ept->flags.bits.need_zlp = (trans->zlp && (!size_n_aligned));
    2444:	464b      	mov	r3, r9
    2446:	7a5b      	ldrb	r3, [r3, #9]
    2448:	2200      	movs	r2, #0
    244a:	2b00      	cmp	r3, #0
    244c:	d001      	beq.n	2452 <_usb_d_dev_ep_trans+0x136>
    244e:	3201      	adds	r2, #1
    2450:	407a      	eors	r2, r7
    2452:	4820      	ldr	r0, [pc, #128]	; (24d4 <_usb_d_dev_ep_trans+0x1b8>)
    2454:	00a9      	lsls	r1, r5, #2
    2456:	194b      	adds	r3, r1, r5
    2458:	009b      	lsls	r3, r3, #2
    245a:	18c3      	adds	r3, r0, r3
    245c:	3388      	adds	r3, #136	; 0x88
    245e:	2701      	movs	r7, #1
    2460:	403a      	ands	r2, r7
    2462:	0112      	lsls	r2, r2, #4
    2464:	79db      	ldrb	r3, [r3, #7]
    2466:	370f      	adds	r7, #15
    2468:	43bb      	bics	r3, r7
	ept->flags.bits.is_busy = 1;
    246a:	194d      	adds	r5, r1, r5
    246c:	00ad      	lsls	r5, r5, #2
    246e:	1945      	adds	r5, r0, r5
    2470:	3588      	adds	r5, #136	; 0x88
    2472:	431a      	orrs	r2, r3
    2474:	2340      	movs	r3, #64	; 0x40
    2476:	431a      	orrs	r2, r3
    2478:	71ea      	strb	r2, [r5, #7]

	if (dir) {
    247a:	2e00      	cmp	r6, #0
    247c:	d005      	beq.n	248a <_usb_d_dev_ep_trans+0x16e>
		_usb_d_dev_in_next(ept, false);
    247e:	1c20      	adds	r0, r4, #0
    2480:	2100      	movs	r1, #0
    2482:	4b19      	ldr	r3, [pc, #100]	; (24e8 <_usb_d_dev_ep_trans+0x1cc>)
    2484:	4798      	blx	r3
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
    2486:	2000      	movs	r0, #0
    2488:	e01f      	b.n	24ca <_usb_d_dev_ep_trans+0x1ae>
	ept->flags.bits.is_busy = 1;

	if (dir) {
		_usb_d_dev_in_next(ept, false);
	} else {
		_usb_d_dev_out_next(ept, false);
    248a:	1c20      	adds	r0, r4, #0
    248c:	2100      	movs	r1, #0
    248e:	4b17      	ldr	r3, [pc, #92]	; (24ec <_usb_d_dev_ep_trans+0x1d0>)
    2490:	4798      	blx	r3
	}

	return ERR_NONE;
    2492:	2000      	movs	r0, #0
    2494:	e019      	b.n	24ca <_usb_d_dev_ep_trans+0x1ae>
	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
		return -USB_ERR_PARAM;
    2496:	2012      	movs	r0, #18
    2498:	4240      	negs	r0, r0
    249a:	e016      	b.n	24ca <_usb_d_dev_ep_trans+0x1ae>
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) ||
			(!_usb_is_aligned(trans->buf))) {
		if (!ept->cache) {
			return -USB_ERR_FUNC;
    249c:	2013      	movs	r0, #19
    249e:	4240      	negs	r0, r0
    24a0:	e013      	b.n	24ca <_usb_d_dev_ep_trans+0x1ae>
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
		if (!ept->cache) {
			return -USB_ERR_PARAM;
    24a2:	2012      	movs	r0, #18
    24a4:	4240      	negs	r0, r0
    24a6:	e010      	b.n	24ca <_usb_d_dev_ep_trans+0x1ae>
	uint8_t epn = USB_EP_GET_N(trans->ep);
	bool dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask = (ept->size == 1023) ? 1023 : (ept->size - 1);
	bool size_n_aligned = (trans->size & size_mask);
    24a8:	6841      	ldr	r1, [r0, #4]
    24aa:	058b      	lsls	r3, r1, #22
    24ac:	1e5f      	subs	r7, r3, #1
    24ae:	41bb      	sbcs	r3, r7
    24b0:	b2df      	uxtb	r7, r3
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
	uint8_t ep_index = (epn == 0) ? 0 :
			(dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
	return &dev_inst.ep[ep_index];
    24b2:	4c08      	ldr	r4, [pc, #32]	; (24d4 <_usb_d_dev_ep_trans+0x1b8>)
    24b4:	347c      	adds	r4, #124	; 0x7c
    24b6:	2500      	movs	r5, #0
    24b8:	e75f      	b.n	237a <_usb_d_dev_ep_trans+0x5e>
{
	uint8_t epn = USB_EP_GET_N(trans->ep);
	bool dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask = (ept->size == 1023) ? 1023 : (ept->size - 1);
    24ba:	4b06      	ldr	r3, [pc, #24]	; (24d4 <_usb_d_dev_ep_trans+0x1b8>)
    24bc:	3360      	adds	r3, #96	; 0x60
    24be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    24c0:	4905      	ldr	r1, [pc, #20]	; (24d8 <_usb_d_dev_ep_trans+0x1bc>)
    24c2:	428b      	cmp	r3, r1
    24c4:	d000      	beq.n	24c8 <_usb_d_dev_ep_trans+0x1ac>
    24c6:	e749      	b.n	235c <_usb_d_dev_ep_trans+0x40>
    24c8:	e7ee      	b.n	24a8 <_usb_d_dev_ep_trans+0x18c>
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    24ca:	b003      	add	sp, #12
    24cc:	bc0c      	pop	{r2, r3}
    24ce:	4690      	mov	r8, r2
    24d0:	4699      	mov	r9, r3
    24d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24d4:	20000060 	.word	0x20000060
    24d8:	000003ff 	.word	0x000003ff
    24dc:	20007fff 	.word	0x20007fff
    24e0:	000025c9 	.word	0x000025c9
    24e4:	000025b9 	.word	0x000025b9
    24e8:	00001a05 	.word	0x00001a05
    24ec:	00001bc5 	.word	0x00001bc5

000024f0 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type,
		const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ?
			(FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    24f0:	2900      	cmp	r1, #0
    24f2:	d100      	bne.n	24f6 <_usb_d_dev_register_ep_callback+0x6>
    24f4:	4907      	ldr	r1, [pc, #28]	; (2514 <_usb_d_dev_register_ep_callback+0x24>)
	if (type == USB_D_DEV_EP_CB_SETUP) {
    24f6:	2800      	cmp	r0, #0
    24f8:	d102      	bne.n	2500 <_usb_d_dev_register_ep_callback+0x10>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    24fa:	4b07      	ldr	r3, [pc, #28]	; (2518 <_usb_d_dev_register_ep_callback+0x28>)
    24fc:	6719      	str	r1, [r3, #112]	; 0x70
    24fe:	e008      	b.n	2512 <_usb_d_dev_register_ep_callback+0x22>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    2500:	2801      	cmp	r0, #1
    2502:	d102      	bne.n	250a <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    2504:	4b04      	ldr	r3, [pc, #16]	; (2518 <_usb_d_dev_register_ep_callback+0x28>)
    2506:	6759      	str	r1, [r3, #116]	; 0x74
    2508:	e003      	b.n	2512 <_usb_d_dev_register_ep_callback+0x22>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    250a:	2802      	cmp	r0, #2
    250c:	d101      	bne.n	2512 <_usb_d_dev_register_ep_callback+0x22>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    250e:	4b02      	ldr	r3, [pc, #8]	; (2518 <_usb_d_dev_register_ep_callback+0x28>)
    2510:	6799      	str	r1, [r3, #120]	; 0x78
	}
}
    2512:	4770      	bx	lr
    2514:	00001821 	.word	0x00001821
    2518:	20000060 	.word	0x20000060

0000251c <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    251c:	b510      	push	{r4, lr}
    251e:	1e04      	subs	r4, r0, #0
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    2520:	d003      	beq.n	252a <_wdt_init+0xe>
    2522:	6800      	ldr	r0, [r0, #0]
    2524:	1e43      	subs	r3, r0, #1
    2526:	4198      	sbcs	r0, r3
    2528:	e000      	b.n	252c <_wdt_init+0x10>
    252a:	2000      	movs	r0, #0
    252c:	4913      	ldr	r1, [pc, #76]	; (257c <_wdt_init+0x60>)
    252e:	225a      	movs	r2, #90	; 0x5a
    2530:	4b13      	ldr	r3, [pc, #76]	; (2580 <_wdt_init+0x64>)
    2532:	4798      	blx	r3

	if(hri_wdt_get_CTRL_ALWAYSON_bit(dev->hw) ||
    2534:	6822      	ldr	r2, [r4, #0]
typedef uint8_t hri_wdt_intflag_reg_t;
typedef uint8_t hri_wdt_status_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw)
{
	while(((const Wdt *)hw)->STATUS.bit.SYNCBUSY);
    2536:	79d3      	ldrb	r3, [r2, #7]
    2538:	09db      	lsrs	r3, r3, #7
    253a:	d1fc      	bne.n	2536 <_wdt_init+0x1a>

static inline bool hri_wdt_get_CTRL_ALWAYSON_bit(const void *const hw) 
{
        uint8_t tmp;
        hri_wdt_wait_for_sync(hw);
        tmp = ((Wdt *)hw)->CTRL.reg;
    253c:	7813      	ldrb	r3, [r2, #0]
    253e:	09db      	lsrs	r3, r3, #7
    2540:	d116      	bne.n	2570 <_wdt_init+0x54>
typedef uint8_t hri_wdt_intflag_reg_t;
typedef uint8_t hri_wdt_status_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw)
{
	while(((const Wdt *)hw)->STATUS.bit.SYNCBUSY);
    2542:	79d3      	ldrb	r3, [r2, #7]
    2544:	09db      	lsrs	r3, r3, #7
    2546:	d1fc      	bne.n	2542 <_wdt_init+0x26>

static inline bool hri_wdt_get_CTRL_ENABLE_bit(const void *const hw) 
{
        uint8_t tmp;
        hri_wdt_wait_for_sync(hw);
        tmp = ((Wdt *)hw)->CTRL.reg;
    2548:	7813      	ldrb	r3, [r2, #0]
    254a:	079b      	lsls	r3, r3, #30
    254c:	d413      	bmi.n	2576 <_wdt_init+0x5a>
typedef uint8_t hri_wdt_intflag_reg_t;
typedef uint8_t hri_wdt_status_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw)
{
	while(((const Wdt *)hw)->STATUS.bit.SYNCBUSY);
    254e:	79d3      	ldrb	r3, [r2, #7]
    2550:	09db      	lsrs	r3, r3, #7
    2552:	d1fc      	bne.n	254e <_wdt_init+0x32>

static inline void hri_wdt_clear_CTRL_WEN_bit(const void *const hw) 
{
        WDT_CRITICAL_SECTION_ENTER();
        hri_wdt_wait_for_sync(hw);
        ((Wdt *)hw)->CTRL.reg &= ~WDT_CTRL_WEN;
    2554:	7813      	ldrb	r3, [r2, #0]
    2556:	2104      	movs	r1, #4
    2558:	438b      	bics	r3, r1
    255a:	7013      	strb	r3, [r2, #0]
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRL_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    255c:	6822      	ldr	r2, [r4, #0]
typedef uint8_t hri_wdt_intflag_reg_t;
typedef uint8_t hri_wdt_status_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw)
{
	while(((const Wdt *)hw)->STATUS.bit.SYNCBUSY);
    255e:	79d3      	ldrb	r3, [r2, #7]
    2560:	09db      	lsrs	r3, r3, #7
    2562:	d1fc      	bne.n	255e <_wdt_init+0x42>
static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data) 
{
        uint8_t tmp;
        WDT_CRITICAL_SECTION_ENTER();
        hri_wdt_wait_for_sync(hw);
        tmp = ((Wdt *)hw)->CONFIG.reg;
    2564:	7853      	ldrb	r3, [r2, #1]
        tmp &= ~WDT_CONFIG_PER_Msk;
    2566:	210f      	movs	r1, #15
    2568:	438b      	bics	r3, r1
        tmp |= WDT_CONFIG_PER(data);
        ((Wdt *)hw)->CONFIG.reg = tmp;
    256a:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    256c:	2000      	movs	r0, #0
    256e:	e004      	b.n	257a <_wdt_init+0x5e>
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);

	if(hri_wdt_get_CTRL_ALWAYSON_bit(dev->hw) ||
			hri_wdt_get_CTRL_ENABLE_bit(dev->hw)) {
		return ERR_DENIED;
    2570:	2011      	movs	r0, #17
    2572:	4240      	negs	r0, r0
    2574:	e001      	b.n	257a <_wdt_init+0x5e>
    2576:	2011      	movs	r0, #17
    2578:	4240      	negs	r0, r0

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
	}

	return ERR_NONE;
}
    257a:	bd10      	pop	{r4, pc}
    257c:	000030ac 	.word	0x000030ac
    2580:	00002d79 	.word	0x00002d79

00002584 <ac_sync_init>:

/**
 * \brief Initialize the AC HAL instance and hardware.
 */
int32_t ac_sync_init(struct ac_sync_descriptor *const descr, void *const hw)
{
    2584:	b538      	push	{r3, r4, r5, lr}
    2586:	1c04      	adds	r4, r0, #0
    2588:	1c0d      	adds	r5, r1, #0
	ASSERT(descr && hw);
    258a:	2800      	cmp	r0, #0
    258c:	d003      	beq.n	2596 <ac_sync_init+0x12>
    258e:	1c08      	adds	r0, r1, #0
    2590:	1e43      	subs	r3, r0, #1
    2592:	4198      	sbcs	r0, r3
    2594:	e000      	b.n	2598 <ac_sync_init+0x14>
    2596:	2000      	movs	r0, #0
    2598:	4904      	ldr	r1, [pc, #16]	; (25ac <ac_sync_init+0x28>)
    259a:	223b      	movs	r2, #59	; 0x3b
    259c:	4b04      	ldr	r3, [pc, #16]	; (25b0 <ac_sync_init+0x2c>)
    259e:	4798      	blx	r3

	return _ac_sync_init(&descr->device, hw);
    25a0:	1c20      	adds	r0, r4, #0
    25a2:	1c29      	adds	r1, r5, #0
    25a4:	4b03      	ldr	r3, [pc, #12]	; (25b4 <ac_sync_init+0x30>)
    25a6:	4798      	blx	r3
}
    25a8:	bd38      	pop	{r3, r4, r5, pc}
    25aa:	46c0      	nop			; (mov r8, r8)
    25ac:	000030d0 	.word	0x000030d0
    25b0:	00002d79 	.word	0x00002d79
    25b4:	0000078d 	.word	0x0000078d

000025b8 <atomic_enter_critical>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    25b8:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    25bc:	6003      	str	r3, [r0, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    25be:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    25c0:	f3bf 8f5f 	dmb	sy
  __disable_irq();
  __DMB();
}
    25c4:	4770      	bx	lr
    25c6:	46c0      	nop			; (mov r8, r8)

000025c8 <atomic_leave_critical>:
    25c8:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    25cc:	6803      	ldr	r3, [r0, #0]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    25ce:	f383 8810 	msr	PRIMASK, r3
}
    25d2:	4770      	bx	lr

000025d4 <dac_sync_init>:

/**
 * \brief Initialize the DAC HAL instance and hardware.
 */
int32_t dac_sync_init(struct dac_sync_descriptor *const descr, void *const hw)
{
    25d4:	b538      	push	{r3, r4, r5, lr}
    25d6:	1c04      	adds	r4, r0, #0
    25d8:	1c0d      	adds	r5, r1, #0
	uint8_t i;
	int32_t rc;

	ASSERT(descr && hw);
    25da:	2800      	cmp	r0, #0
    25dc:	d003      	beq.n	25e6 <dac_sync_init+0x12>
    25de:	1c08      	adds	r0, r1, #0
    25e0:	1e43      	subs	r3, r0, #1
    25e2:	4198      	sbcs	r0, r3
    25e4:	e000      	b.n	25e8 <dac_sync_init+0x14>
    25e6:	2000      	movs	r0, #0
    25e8:	4906      	ldr	r1, [pc, #24]	; (2604 <dac_sync_init+0x30>)
    25ea:	223c      	movs	r2, #60	; 0x3c
    25ec:	4b06      	ldr	r3, [pc, #24]	; (2608 <dac_sync_init+0x34>)
    25ee:	4798      	blx	r3

	rc = _dac_sync_init(&descr->device, hw);
    25f0:	1c20      	adds	r0, r4, #0
    25f2:	1c29      	adds	r1, r5, #0
    25f4:	4b05      	ldr	r3, [pc, #20]	; (260c <dac_sync_init+0x38>)
    25f6:	4798      	blx	r3
	if (rc) {
    25f8:	2800      	cmp	r0, #0
    25fa:	d102      	bne.n	2602 <dac_sync_init+0x2e>
		return rc;
	}

	for(i = 0; i < CHANNEL_NUM; i++) {
		descr->sel_ch[i].buffer = NULL;
    25fc:	2300      	movs	r3, #0
    25fe:	6063      	str	r3, [r4, #4]
		descr->sel_ch[i].length = 0;
    2600:	60a3      	str	r3, [r4, #8]
	}

	return ERR_NONE;
}
    2602:	bd38      	pop	{r3, r4, r5, pc}
    2604:	000030ec 	.word	0x000030ec
    2608:	00002d79 	.word	0x00002d79
    260c:	000008d5 	.word	0x000008d5

00002610 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    2610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    2612:	2401      	movs	r4, #1
    2614:	2500      	movs	r5, #0

	while (upper >= lower) {
		middle = ( upper + lower ) >> 1;

		if (ext_irqs[middle].pin == pin) {
    2616:	27ff      	movs	r7, #255	; 0xff
    2618:	4e0d      	ldr	r6, [pc, #52]	; (2650 <process_ext_irq+0x40>)
static void process_ext_irq(const uint32_t pin)
{
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;

	while (upper >= lower) {
		middle = ( upper + lower ) >> 1;
    261a:	1963      	adds	r3, r4, r5
    261c:	105b      	asrs	r3, r3, #1
    261e:	b2d9      	uxtb	r1, r3

		if (ext_irqs[middle].pin == pin) {
    2620:	403b      	ands	r3, r7
    2622:	00da      	lsls	r2, r3, #3
    2624:	18b2      	adds	r2, r6, r2
    2626:	6852      	ldr	r2, [r2, #4]
    2628:	4282      	cmp	r2, r0
    262a:	d106      	bne.n	263a <process_ext_irq+0x2a>
			if (ext_irqs[middle].cb) {
    262c:	00db      	lsls	r3, r3, #3
    262e:	4a08      	ldr	r2, [pc, #32]	; (2650 <process_ext_irq+0x40>)
    2630:	589b      	ldr	r3, [r3, r2]
    2632:	2b00      	cmp	r3, #0
    2634:	d006      	beq.n	2644 <process_ext_irq+0x34>
				ext_irqs[middle].cb();
    2636:	4798      	blx	r3
				return;
    2638:	e008      	b.n	264c <process_ext_irq+0x3c>
			}
		}

		if (ext_irqs[middle].pin < pin) {
    263a:	4282      	cmp	r2, r0
    263c:	d202      	bcs.n	2644 <process_ext_irq+0x34>
			lower = middle + 1;
    263e:	3101      	adds	r1, #1
    2640:	b2cd      	uxtb	r5, r1
    2642:	e001      	b.n	2648 <process_ext_irq+0x38>
		} else {
			upper = middle - 1;
    2644:	3901      	subs	r1, #1
    2646:	b2cc      	uxtb	r4, r1
 */
static void process_ext_irq(const uint32_t pin)
{
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;

	while (upper >= lower) {
    2648:	42ac      	cmp	r4, r5
    264a:	d2e6      	bcs.n	261a <process_ext_irq+0xa>
			lower = middle + 1;
		} else {
			upper = middle - 1;
		}
	}
}
    264c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    264e:	46c0      	nop			; (mov r8, r8)
    2650:	200003b8 	.word	0x200003b8

00002654 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    2654:	b508      	push	{r3, lr}
	return _ext_irq_init(process_ext_irq);
    2656:	4802      	ldr	r0, [pc, #8]	; (2660 <ext_irq_init+0xc>)
    2658:	4b02      	ldr	r3, [pc, #8]	; (2664 <ext_irq_init+0x10>)
    265a:	4798      	blx	r3
}
    265c:	bd08      	pop	{r3, pc}
    265e:	46c0      	nop			; (mov r8, r8)
    2660:	00002611 	.word	0x00002611
    2664:	00000e35 	.word	0x00000e35

00002668 <dma_transfer_done>:
 * \param[in] device The pointer to pointer to device sctructure
 * \param[in] resource The pointer to memory resource
 */
static void dma_transfer_done(struct _dma_dev * *dev,
		struct _dma_resource *const resource)
{
    2668:	b508      	push	{r3, lr}
	struct memory_dma_descriptor *descr =
			CONTAINER_OF(dev, struct memory_dma_descriptor, dev);

	if(descr->memory_cb.complete) {
    266a:	6883      	ldr	r3, [r0, #8]
    266c:	2b00      	cmp	r3, #0
    266e:	d000      	beq.n	2672 <dma_transfer_done+0xa>
		descr->memory_cb.complete(descr);
    2670:	4798      	blx	r3
	}
	(void)resource;
}
    2672:	bd08      	pop	{r3, pc}

00002674 <dma_memory_error>:
 * \param[in] device The pointer to pointer to device sctructure
 * \param[in] resource The pointer to memory resource
 */
static void dma_memory_error(struct _dma_dev * *dev,
		struct _dma_resource *const resource)
{
    2674:	b508      	push	{r3, lr}
	struct memory_dma_descriptor *descr =
			CONTAINER_OF(dev, struct memory_dma_descriptor, dev);

	if(descr->memory_cb.error) {
    2676:	68c3      	ldr	r3, [r0, #12]
    2678:	2b00      	cmp	r3, #0
    267a:	d000      	beq.n	267e <dma_memory_error+0xa>
		descr->memory_cb.error(descr);
    267c:	4798      	blx	r3
	}
	(void)resource;
}
    267e:	bd08      	pop	{r3, pc}

00002680 <dma_memory_init>:

/**
 * \brief Initialize DMA
 */
int32_t dma_memory_init(void)
{
    2680:	b538      	push	{r3, r4, r5, lr}
	int32_t ret;

	if(initialized == true) {
    2682:	4b16      	ldr	r3, [pc, #88]	; (26dc <dma_memory_init+0x5c>)
    2684:	781b      	ldrb	r3, [r3, #0]
    2686:	2b00      	cmp	r3, #0
    2688:	d122      	bne.n	26d0 <dma_memory_init+0x50>
		return ERR_ALREADY_INITIALIZED;
	}

	initialized = true;
    268a:	4d14      	ldr	r5, [pc, #80]	; (26dc <dma_memory_init+0x5c>)
    268c:	3301      	adds	r3, #1
    268e:	702b      	strb	r3, [r5, #0]

	_dma_init(&descr.dev);
    2690:	1d2c      	adds	r4, r5, #4
    2692:	1c20      	adds	r0, r4, #0
    2694:	4b12      	ldr	r3, [pc, #72]	; (26e0 <dma_memory_init+0x60>)
    2696:	4798      	blx	r3

	ret = _dma_allocate(descr.dev, &descr.resource, 1);
    2698:	6868      	ldr	r0, [r5, #4]
    269a:	1d21      	adds	r1, r4, #4
    269c:	2201      	movs	r2, #1
    269e:	4b11      	ldr	r3, [pc, #68]	; (26e4 <dma_memory_init+0x64>)
    26a0:	4798      	blx	r3

	if(ret < 0) {
    26a2:	2800      	cmp	r0, #0
    26a4:	db17      	blt.n	26d6 <dma_memory_init+0x56>
		return ERR_NO_RESOURCE;
	}

	descr.resource->_dma_cb.transfer_done = dma_transfer_done;
    26a6:	4c0d      	ldr	r4, [pc, #52]	; (26dc <dma_memory_init+0x5c>)
    26a8:	68a0      	ldr	r0, [r4, #8]
    26aa:	4b0f      	ldr	r3, [pc, #60]	; (26e8 <dma_memory_init+0x68>)
    26ac:	6083      	str	r3, [r0, #8]
	descr.resource->_dma_cb.error = dma_memory_error;
    26ae:	4b0f      	ldr	r3, [pc, #60]	; (26ec <dma_memory_init+0x6c>)
    26b0:	60c3      	str	r3, [r0, #12]

	_memory_fill_dma_pointer(&descr.resource->get_trigger_num);
    26b2:	3014      	adds	r0, #20
    26b4:	4b0e      	ldr	r3, [pc, #56]	; (26f0 <dma_memory_init+0x70>)
    26b6:	4798      	blx	r3
	_memory_fill_dma_config_pointer(&descr.resource->config);
    26b8:	68a0      	ldr	r0, [r4, #8]
    26ba:	3010      	adds	r0, #16
    26bc:	4b0d      	ldr	r3, [pc, #52]	; (26f4 <dma_memory_init+0x74>)
    26be:	4798      	blx	r3

	_dma_config_resource(descr.dev, descr.resource, NULL, MEMORY_DMA_TX);
    26c0:	6860      	ldr	r0, [r4, #4]
    26c2:	68a1      	ldr	r1, [r4, #8]
    26c4:	2200      	movs	r2, #0
    26c6:	2300      	movs	r3, #0
    26c8:	4c0b      	ldr	r4, [pc, #44]	; (26f8 <dma_memory_init+0x78>)
    26ca:	47a0      	blx	r4

	return ERR_NONE;
    26cc:	2000      	movs	r0, #0
    26ce:	e004      	b.n	26da <dma_memory_init+0x5a>
int32_t dma_memory_init(void)
{
	int32_t ret;

	if(initialized == true) {
		return ERR_ALREADY_INITIALIZED;
    26d0:	2012      	movs	r0, #18
    26d2:	4240      	negs	r0, r0
    26d4:	e001      	b.n	26da <dma_memory_init+0x5a>
	_dma_init(&descr.dev);

	ret = _dma_allocate(descr.dev, &descr.resource, 1);

	if(ret < 0) {
		return ERR_NO_RESOURCE;
    26d6:	201c      	movs	r0, #28
    26d8:	4240      	negs	r0, r0
	_memory_fill_dma_config_pointer(&descr.resource->config);

	_dma_config_resource(descr.dev, descr.resource, NULL, MEMORY_DMA_TX);

	return ERR_NONE;
}
    26da:	bd38      	pop	{r3, r4, r5, pc}
    26dc:	200003c0 	.word	0x200003c0
    26e0:	000009e5 	.word	0x000009e5
    26e4:	00000af9 	.word	0x00000af9
    26e8:	00002669 	.word	0x00002669
    26ec:	00002675 	.word	0x00002675
    26f0:	00000d4d 	.word	0x00000d4d
    26f4:	00000d59 	.word	0x00000d59
    26f8:	00000c41 	.word	0x00000c41

000026fc <spi_m_sync_init>:
		const uint8_t *const buf, const uint16_t length);
static int32_t _spi_m_sync_io_read(struct io_descriptor *const io,
		uint8_t *const buf, const uint16_t length);

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    26fc:	b538      	push	{r3, r4, r5, lr}
    26fe:	1c04      	adds	r4, r0, #0
    2700:	1c0d      	adds	r5, r1, #0
	int32_t rc = 0;

	ASSERT(spi && hw);
    2702:	2800      	cmp	r0, #0
    2704:	d003      	beq.n	270e <spi_m_sync_init+0x12>
    2706:	1c08      	adds	r0, r1, #0
    2708:	1e43      	subs	r3, r0, #1
    270a:	4198      	sbcs	r0, r3
    270c:	e000      	b.n	2710 <spi_m_sync_init+0x14>
    270e:	2000      	movs	r0, #0
    2710:	4909      	ldr	r1, [pc, #36]	; (2738 <spi_m_sync_init+0x3c>)
    2712:	2246      	movs	r2, #70	; 0x46
    2714:	4b09      	ldr	r3, [pc, #36]	; (273c <spi_m_sync_init+0x40>)
    2716:	4798      	blx	r3

	spi->dev.prvt = (void *)hw;
    2718:	6025      	str	r5, [r4, #0]

	rc = _spi_m_sync_init(&spi->dev, hw);
    271a:	1c20      	adds	r0, r4, #0
    271c:	1c29      	adds	r1, r5, #0
    271e:	4b08      	ldr	r3, [pc, #32]	; (2740 <spi_m_sync_init+0x44>)
    2720:	4798      	blx	r3
	if (rc < 0) {
    2722:	2800      	cmp	r0, #0
    2724:	db06      	blt.n	2734 <spi_m_sync_init+0x38>
		return rc;
	}

	spi->flags = SPI_DEACTIVATE_NEXT;
    2726:	4b07      	ldr	r3, [pc, #28]	; (2744 <spi_m_sync_init+0x48>)
    2728:	8223      	strh	r3, [r4, #16]
	spi->io.read = _spi_m_sync_io_read;
    272a:	4b07      	ldr	r3, [pc, #28]	; (2748 <spi_m_sync_init+0x4c>)
    272c:	60e3      	str	r3, [r4, #12]
	spi->io.write = _spi_m_sync_io_write;
    272e:	4b07      	ldr	r3, [pc, #28]	; (274c <spi_m_sync_init+0x50>)
    2730:	60a3      	str	r3, [r4, #8]

	return ERR_NONE;
    2732:	2000      	movs	r0, #0
}
    2734:	bd38      	pop	{r3, r4, r5, pc}
    2736:	46c0      	nop			; (mov r8, r8)
    2738:	00003108 	.word	0x00003108
    273c:	00002d79 	.word	0x00002d79
    2740:	00001391 	.word	0x00001391
    2744:	ffff8000 	.word	0xffff8000
    2748:	000027d1 	.word	0x000027d1
    274c:	00002795 	.word	0x00002795

00002750 <spi_m_sync_transfer>:
	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi,
		const struct spi_xfer *p_xfer)
{
    2750:	b530      	push	{r4, r5, lr}
    2752:	b087      	sub	sp, #28
    2754:	1c05      	adds	r5, r0, #0
    2756:	1c0c      	adds	r4, r1, #0
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    2758:	2800      	cmp	r0, #0
    275a:	d003      	beq.n	2764 <spi_m_sync_transfer+0x14>
    275c:	1c08      	adds	r0, r1, #0
    275e:	1e43      	subs	r3, r0, #1
    2760:	4198      	sbcs	r0, r3
    2762:	e000      	b.n	2766 <spi_m_sync_transfer+0x16>
    2764:	2000      	movs	r0, #0
    2766:	4908      	ldr	r1, [pc, #32]	; (2788 <spi_m_sync_transfer+0x38>)
    2768:	22ca      	movs	r2, #202	; 0xca
    276a:	4b08      	ldr	r3, [pc, #32]	; (278c <spi_m_sync_transfer+0x3c>)
    276c:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    276e:	6823      	ldr	r3, [r4, #0]
    2770:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
    2772:	6863      	ldr	r3, [r4, #4]
    2774:	9304      	str	r3, [sp, #16]
	msg.size = p_xfer->size;
    2776:	68a3      	ldr	r3, [r4, #8]
    2778:	9301      	str	r3, [sp, #4]
    277a:	9305      	str	r3, [sp, #20]

	return _spi_m_sync_trans(&spi->dev, &msg);
    277c:	1c28      	adds	r0, r5, #0
    277e:	a903      	add	r1, sp, #12
    2780:	4b03      	ldr	r3, [pc, #12]	; (2790 <spi_m_sync_transfer+0x40>)
    2782:	4798      	blx	r3
}
    2784:	b007      	add	sp, #28
    2786:	bd30      	pop	{r4, r5, pc}
    2788:	00003108 	.word	0x00003108
    278c:	00002d79 	.word	0x00002d79
    2790:	00001501 	.word	0x00001501

00002794 <_spi_m_sync_io_write>:
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io,
		const uint8_t *const buf, const uint16_t length)
{
    2794:	b570      	push	{r4, r5, r6, lr}
    2796:	b084      	sub	sp, #16
    2798:	1c04      	adds	r4, r0, #0
    279a:	1c0e      	adds	r6, r1, #0
    279c:	1c15      	adds	r5, r2, #0
	ASSERT(io);
    279e:	1e43      	subs	r3, r0, #1
    27a0:	4198      	sbcs	r0, r3
    27a2:	b2c0      	uxtb	r0, r0
    27a4:	4907      	ldr	r1, [pc, #28]	; (27c4 <_spi_m_sync_io_write+0x30>)
    27a6:	22b8      	movs	r2, #184	; 0xb8
    27a8:	4b07      	ldr	r3, [pc, #28]	; (27c8 <_spi_m_sync_io_write+0x34>)
    27aa:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi =
			CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
	struct spi_xfer xfer;

	xfer.rxbuf = 0;
    27ac:	2300      	movs	r3, #0
    27ae:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
    27b0:	9601      	str	r6, [sp, #4]
	xfer.size = length;
    27b2:	9503      	str	r5, [sp, #12]
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io,
		const uint8_t *const buf, const uint16_t length)
{
	ASSERT(io);

	struct spi_m_sync_descriptor *spi =
    27b4:	1c20      	adds	r0, r4, #0
    27b6:	3808      	subs	r0, #8

	xfer.rxbuf = 0;
	xfer.txbuf = (uint8_t *)buf;
	xfer.size = length;

	return spi_m_sync_transfer(spi, &xfer);
    27b8:	a901      	add	r1, sp, #4
    27ba:	4b04      	ldr	r3, [pc, #16]	; (27cc <_spi_m_sync_io_write+0x38>)
    27bc:	4798      	blx	r3
}
    27be:	b004      	add	sp, #16
    27c0:	bd70      	pop	{r4, r5, r6, pc}
    27c2:	46c0      	nop			; (mov r8, r8)
    27c4:	00003108 	.word	0x00003108
    27c8:	00002d79 	.word	0x00002d79
    27cc:	00002751 	.word	0x00002751

000027d0 <_spi_m_sync_io_read>:
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf,
		const uint16_t length)
{
    27d0:	b570      	push	{r4, r5, r6, lr}
    27d2:	b084      	sub	sp, #16
    27d4:	1c04      	adds	r4, r0, #0
    27d6:	1c0e      	adds	r6, r1, #0
    27d8:	1c15      	adds	r5, r2, #0
	ASSERT(io);
    27da:	1e43      	subs	r3, r0, #1
    27dc:	4198      	sbcs	r0, r3
    27de:	b2c0      	uxtb	r0, r0
    27e0:	4907      	ldr	r1, [pc, #28]	; (2800 <_spi_m_sync_io_read+0x30>)
    27e2:	229a      	movs	r2, #154	; 0x9a
    27e4:	4b07      	ldr	r3, [pc, #28]	; (2804 <_spi_m_sync_io_read+0x34>)
    27e6:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi =
			CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
	struct spi_xfer xfer;

	xfer.rxbuf = buf;
    27e8:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
    27ea:	2300      	movs	r3, #0
    27ec:	9301      	str	r3, [sp, #4]
	xfer.size = length;
    27ee:	9503      	str	r5, [sp, #12]
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf,
		const uint16_t length)
{
	ASSERT(io);

	struct spi_m_sync_descriptor *spi =
    27f0:	1c20      	adds	r0, r4, #0
    27f2:	3808      	subs	r0, #8

	xfer.rxbuf = buf;
	xfer.txbuf = 0;
	xfer.size = length;

	return spi_m_sync_transfer(spi, &xfer);
    27f4:	a901      	add	r1, sp, #4
    27f6:	4b04      	ldr	r3, [pc, #16]	; (2808 <_spi_m_sync_io_read+0x38>)
    27f8:	4798      	blx	r3
}
    27fa:	b004      	add	sp, #16
    27fc:	bd70      	pop	{r4, r5, r6, pc}
    27fe:	46c0      	nop			; (mov r8, r8)
    2800:	00003108 	.word	0x00003108
    2804:	00002d79 	.word	0x00002d79
    2808:	00002751 	.word	0x00002751

0000280c <timer_add_timer_task>:
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list,
		struct timer_task *const new_task,
		const uint32_t time)
{
    280c:	b5f0      	push	{r4, r5, r6, r7, lr}
    280e:	4647      	mov	r7, r8
    2810:	b480      	push	{r7}
    2812:	4680      	mov	r8, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void * list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    2814:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL,
	*head = (struct timer_task *)list_get_head(list);

	if (!head)
    2816:	2f00      	cmp	r7, #0
    2818:	d102      	bne.n	2820 <timer_add_timer_task+0x14>
	{
		list_insert_as_head(list, new_task);
    281a:	4b15      	ldr	r3, [pc, #84]	; (2870 <timer_add_timer_task+0x64>)
    281c:	4798      	blx	r3
		return;
    281e:	e024      	b.n	286a <timer_add_timer_task+0x5e>
			time_left = it->interval - ( time - it->time_label );
		} else {
			time_left = it->interval - ( 0xFFFFFFFF - it->time_label ) - time;
		}

		if (time_left >= new_task->interval) {
    2820:	688e      	ldr	r6, [r1, #8]
    2822:	1c3c      	adds	r4, r7, #0
    2824:	2500      	movs	r5, #0
    2826:	e000      	b.n	282a <timer_add_timer_task+0x1e>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void * list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    2828:	1c1c      	adds	r4, r3, #0
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
		uint32_t time_left;

		if (it->time_label <= time) {
    282a:	6863      	ldr	r3, [r4, #4]
    282c:	4293      	cmp	r3, r2
    282e:	d804      	bhi.n	283a <timer_add_timer_task+0x2e>
    2830:	68a0      	ldr	r0, [r4, #8]
    2832:	4684      	mov	ip, r0
    2834:	4463      	add	r3, ip
			time_left = it->interval - ( time - it->time_label );
    2836:	1a9b      	subs	r3, r3, r2
    2838:	e004      	b.n	2844 <timer_add_timer_task+0x38>
		} else {
			time_left = it->interval - ( 0xFFFFFFFF - it->time_label ) - time;
    283a:	68a0      	ldr	r0, [r4, #8]
    283c:	4684      	mov	ip, r0
    283e:	4463      	add	r3, ip
    2840:	3301      	adds	r3, #1
    2842:	1a9b      	subs	r3, r3, r2
		}

		if (time_left >= new_task->interval) {
    2844:	42b3      	cmp	r3, r6
    2846:	d206      	bcs.n	2856 <timer_add_timer_task+0x4a>
    2848:	2c00      	cmp	r4, #0
    284a:	d00b      	beq.n	2864 <timer_add_timer_task+0x58>
    284c:	6823      	ldr	r3, [r4, #0]
    284e:	1c25      	adds	r5, r4, #0
	{
		list_insert_as_head(list, new_task);
		return;
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2850:	2b00      	cmp	r3, #0
    2852:	d1e9      	bne.n	2828 <timer_add_timer_task+0x1c>
    2854:	e006      	b.n	2864 <timer_add_timer_task+0x58>
		}

		prev = it;
	}

	if (it == head) {
    2856:	42bc      	cmp	r4, r7
    2858:	d103      	bne.n	2862 <timer_add_timer_task+0x56>
		list_insert_as_head(list, new_task);
    285a:	4640      	mov	r0, r8
    285c:	4b04      	ldr	r3, [pc, #16]	; (2870 <timer_add_timer_task+0x64>)
    285e:	4798      	blx	r3
    2860:	e003      	b.n	286a <timer_add_timer_task+0x5e>
    2862:	1c2c      	adds	r4, r5, #0
	} else {
		list_insert_after(prev, new_task);
    2864:	1c20      	adds	r0, r4, #0
    2866:	4b03      	ldr	r3, [pc, #12]	; (2874 <timer_add_timer_task+0x68>)
    2868:	4798      	blx	r3
	}
}
    286a:	bc04      	pop	{r2}
    286c:	4690      	mov	r8, r2
    286e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2870:	00002da9 	.word	0x00002da9
    2874:	00002dd5 	.word	0x00002dd5

00002878 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    2878:	b5f0      	push	{r4, r5, r6, r7, lr}
    287a:	4647      	mov	r7, r8
    287c:	b480      	push	{r7}
    287e:	b082      	sub	sp, #8
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void * list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    2880:	6945      	ldr	r5, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device,
			struct timer_descriptor, device);
	struct timer_task *it = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t time = ++timer->time;
    2882:	6903      	ldr	r3, [r0, #16]
    2884:	3301      	adds	r3, #1
    2886:	4698      	mov	r8, r3
    2888:	6103      	str	r3, [r0, #16]

	if (( timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN ) ||
    288a:	7e03      	ldrb	r3, [r0, #24]
    288c:	07db      	lsls	r3, r3, #31
    288e:	d40b      	bmi.n	28a8 <timer_process_counted+0x30>
			( timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED )) {
    2890:	7e03      	ldrb	r3, [r0, #24]
	struct timer_descriptor *timer = CONTAINER_OF(device,
			struct timer_descriptor, device);
	struct timer_task *it = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t time = ++timer->time;

	if (( timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN ) ||
    2892:	079b      	lsls	r3, r3, #30
    2894:	d408      	bmi.n	28a8 <timer_process_counted+0x30>
			( timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED )) {
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && (( time - it->time_label ) >= it->interval )) {
    2896:	2d00      	cmp	r5, #0
    2898:	d02c      	beq.n	28f4 <timer_process_counted+0x7c>
    289a:	4643      	mov	r3, r8
    289c:	686a      	ldr	r2, [r5, #4]
    289e:	1a9b      	subs	r3, r3, r2
    28a0:	68aa      	ldr	r2, [r5, #8]
    28a2:	4293      	cmp	r3, r2
    28a4:	d207      	bcs.n	28b6 <timer_process_counted+0x3e>
    28a6:	e025      	b.n	28f4 <timer_process_counted+0x7c>
	struct timer_task *it = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t time = ++timer->time;

	if (( timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN ) ||
			( timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED )) {
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    28a8:	7e02      	ldrb	r2, [r0, #24]
    28aa:	2302      	movs	r3, #2
    28ac:	4313      	orrs	r3, r2
    28ae:	7603      	strb	r3, [r0, #24]
		return;
    28b0:	e020      	b.n	28f4 <timer_process_counted+0x7c>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}

		it = (struct timer_task *)list_get_head(&timer->tasks);
    28b2:	1c25      	adds	r5, r4, #0
    28b4:	e006      	b.n	28c4 <timer_process_counted+0x4c>
    28b6:	1c07      	adds	r7, r0, #0
	}

	while (it && (( time - it->time_label ) >= it->interval )) {
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    28b8:	2314      	movs	r3, #20
    28ba:	469c      	mov	ip, r3
    28bc:	4484      	add	ip, r0
    28be:	4663      	mov	r3, ip
    28c0:	9301      	str	r3, [sp, #4]
    28c2:	4e0e      	ldr	r6, [pc, #56]	; (28fc <timer_process_counted+0x84>)
    28c4:	9801      	ldr	r0, [sp, #4]
    28c6:	47b0      	blx	r6

		if (TIMER_TASK_REPEAT == tmp->mode) {
    28c8:	7c2b      	ldrb	r3, [r5, #16]
    28ca:	2b01      	cmp	r3, #1
    28cc:	d106      	bne.n	28dc <timer_process_counted+0x64>
			tmp->time_label = time;
    28ce:	4643      	mov	r3, r8
    28d0:	606b      	str	r3, [r5, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    28d2:	9801      	ldr	r0, [sp, #4]
    28d4:	1c29      	adds	r1, r5, #0
    28d6:	4642      	mov	r2, r8
    28d8:	4b09      	ldr	r3, [pc, #36]	; (2900 <timer_process_counted+0x88>)
    28da:	4798      	blx	r3
    28dc:	697c      	ldr	r4, [r7, #20]
		}

		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    28de:	68eb      	ldr	r3, [r5, #12]
    28e0:	1c28      	adds	r0, r5, #0
    28e2:	4798      	blx	r3
			( timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED )) {
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && (( time - it->time_label ) >= it->interval )) {
    28e4:	2c00      	cmp	r4, #0
    28e6:	d005      	beq.n	28f4 <timer_process_counted+0x7c>
    28e8:	4643      	mov	r3, r8
    28ea:	6862      	ldr	r2, [r4, #4]
    28ec:	1a9b      	subs	r3, r3, r2
    28ee:	68a2      	ldr	r2, [r4, #8]
    28f0:	4293      	cmp	r3, r2
    28f2:	d2de      	bcs.n	28b2 <timer_process_counted+0x3a>

		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
    28f4:	b002      	add	sp, #8
    28f6:	bc04      	pop	{r2}
    28f8:	4690      	mov	r8, r2
    28fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    28fc:	00002ddd 	.word	0x00002ddd
    2900:	0000280d 	.word	0x0000280d

00002904 <timer_init>:
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr,
		void *const hw,
		struct _timer_hpl_interface *const func)
{
    2904:	b538      	push	{r3, r4, r5, lr}
    2906:	1c04      	adds	r4, r0, #0
    2908:	1c0d      	adds	r5, r1, #0
	ASSERT(descr && hw);
    290a:	2800      	cmp	r0, #0
    290c:	d003      	beq.n	2916 <timer_init+0x12>
    290e:	1c08      	adds	r0, r1, #0
    2910:	1e43      	subs	r3, r0, #1
    2912:	4198      	sbcs	r0, r3
    2914:	e000      	b.n	2918 <timer_init+0x14>
    2916:	2000      	movs	r0, #0
    2918:	4906      	ldr	r1, [pc, #24]	; (2934 <timer_init+0x30>)
    291a:	2249      	movs	r2, #73	; 0x49
    291c:	4b06      	ldr	r3, [pc, #24]	; (2938 <timer_init+0x34>)
    291e:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    2920:	1c20      	adds	r0, r4, #0
    2922:	1c29      	adds	r1, r5, #0
    2924:	4b05      	ldr	r3, [pc, #20]	; (293c <timer_init+0x38>)
    2926:	4798      	blx	r3
	descr->time = 0;
    2928:	2300      	movs	r3, #0
    292a:	6123      	str	r3, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    292c:	4b04      	ldr	r3, [pc, #16]	; (2940 <timer_init+0x3c>)
    292e:	6023      	str	r3, [r4, #0]

	return ERR_NONE;
}
    2930:	2000      	movs	r0, #0
    2932:	bd38      	pop	{r3, r4, r5, pc}
    2934:	00003124 	.word	0x00003124
    2938:	00002d79 	.word	0x00002d79
    293c:	00001681 	.word	0x00001681
    2940:	00002879 	.word	0x00002879

00002944 <usart_sync_write>:
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr,
		const uint8_t *const buf, const uint16_t length)
{
    2944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2946:	464f      	mov	r7, r9
    2948:	4646      	mov	r6, r8
    294a:	b4c0      	push	{r6, r7}
    294c:	1c05      	adds	r5, r0, #0
    294e:	1c0f      	adds	r7, r1, #0
    2950:	4690      	mov	r8, r2
	uint32_t offset = 0;
	struct usart_sync_descriptor *descr =
			CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    2952:	2800      	cmp	r0, #0
    2954:	d005      	beq.n	2962 <usart_sync_write+0x1e>
    2956:	2900      	cmp	r1, #0
    2958:	d005      	beq.n	2966 <usart_sync_write+0x22>
    295a:	1c10      	adds	r0, r2, #0
    295c:	1e43      	subs	r3, r0, #1
    295e:	4198      	sbcs	r0, r3
    2960:	e002      	b.n	2968 <usart_sync_write+0x24>
    2962:	2000      	movs	r0, #0
    2964:	e000      	b.n	2968 <usart_sync_write+0x24>
    2966:	2000      	movs	r0, #0
    2968:	490f      	ldr	r1, [pc, #60]	; (29a8 <usart_sync_write+0x64>)
    296a:	2289      	movs	r2, #137	; 0x89
    296c:	0052      	lsls	r2, r2, #1
    296e:	4b0f      	ldr	r3, [pc, #60]	; (29ac <usart_sync_write+0x68>)
    2970:	4798      	blx	r3

	while (!_usart_sync_is_byte_sent(&descr->device));
    2972:	3508      	adds	r5, #8
    2974:	4e0e      	ldr	r6, [pc, #56]	; (29b0 <usart_sync_write+0x6c>)
    2976:	1c2c      	adds	r4, r5, #0
    2978:	1c28      	adds	r0, r5, #0
    297a:	47b0      	blx	r6
    297c:	2800      	cmp	r0, #0
    297e:	d0fa      	beq.n	2976 <usart_sync_write+0x32>
    2980:	2600      	movs	r6, #0
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    2982:	4b0c      	ldr	r3, [pc, #48]	; (29b4 <usart_sync_write+0x70>)
    2984:	4699      	mov	r9, r3
		while (!_usart_sync_is_byte_sent(&descr->device));
    2986:	4d0a      	ldr	r5, [pc, #40]	; (29b0 <usart_sync_write+0x6c>)

	ASSERT(io_descr && buf && length);

	while (!_usart_sync_is_byte_sent(&descr->device));
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    2988:	5db9      	ldrb	r1, [r7, r6]
    298a:	1c20      	adds	r0, r4, #0
    298c:	47c8      	blx	r9
		while (!_usart_sync_is_byte_sent(&descr->device));
    298e:	1c20      	adds	r0, r4, #0
    2990:	47a8      	blx	r5
    2992:	2800      	cmp	r0, #0
    2994:	d0fb      	beq.n	298e <usart_sync_write+0x4a>
	} while (++offset < length);
    2996:	3601      	adds	r6, #1
    2998:	4546      	cmp	r6, r8
    299a:	d3f5      	bcc.n	2988 <usart_sync_write+0x44>

	return (int32_t)offset;
}
    299c:	1c30      	adds	r0, r6, #0
    299e:	bc0c      	pop	{r2, r3}
    29a0:	4690      	mov	r8, r2
    29a2:	4699      	mov	r9, r3
    29a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    29a6:	46c0      	nop			; (mov r8, r8)
    29a8:	0000313c 	.word	0x0000313c
    29ac:	00002d79 	.word	0x00002d79
    29b0:	00001379 	.word	0x00001379
    29b4:	00001369 	.word	0x00001369

000029b8 <usart_sync_read>:
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr,
	uint8_t *const buf, const uint16_t length)
{
    29b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    29ba:	4647      	mov	r7, r8
    29bc:	b480      	push	{r7}
    29be:	1c04      	adds	r4, r0, #0
    29c0:	1c0f      	adds	r7, r1, #0
    29c2:	4690      	mov	r8, r2
	uint32_t offset = 0;
	struct usart_sync_descriptor *descr =
			CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    29c4:	2800      	cmp	r0, #0
    29c6:	d005      	beq.n	29d4 <usart_sync_read+0x1c>
    29c8:	2900      	cmp	r1, #0
    29ca:	d005      	beq.n	29d8 <usart_sync_read+0x20>
    29cc:	1c10      	adds	r0, r2, #0
    29ce:	1e43      	subs	r3, r0, #1
    29d0:	4198      	sbcs	r0, r3
    29d2:	e002      	b.n	29da <usart_sync_read+0x22>
    29d4:	2000      	movs	r0, #0
    29d6:	e000      	b.n	29da <usart_sync_read+0x22>
    29d8:	2000      	movs	r0, #0
    29da:	490b      	ldr	r1, [pc, #44]	; (2a08 <usart_sync_read+0x50>)
    29dc:	222e      	movs	r2, #46	; 0x2e
    29de:	32ff      	adds	r2, #255	; 0xff
    29e0:	4b0a      	ldr	r3, [pc, #40]	; (2a0c <usart_sync_read+0x54>)
    29e2:	4798      	blx	r3
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr,
	uint8_t *const buf, const uint16_t length)
{
	uint32_t offset = 0;
    29e4:	2600      	movs	r6, #0
			CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);

	do {
		while (!_usart_sync_is_byte_received(&descr->device));
    29e6:	4d0a      	ldr	r5, [pc, #40]	; (2a10 <usart_sync_read+0x58>)
    29e8:	3408      	adds	r4, #8
    29ea:	1c20      	adds	r0, r4, #0
    29ec:	47a8      	blx	r5
    29ee:	2800      	cmp	r0, #0
    29f0:	d0fb      	beq.n	29ea <usart_sync_read+0x32>
		buf[offset] = _usart_sync_read_byte(&descr->device);
    29f2:	1c20      	adds	r0, r4, #0
    29f4:	4b07      	ldr	r3, [pc, #28]	; (2a14 <usart_sync_read+0x5c>)
    29f6:	4798      	blx	r3
    29f8:	55b8      	strb	r0, [r7, r6]
	} while (++offset < length);
    29fa:	3601      	adds	r6, #1
    29fc:	4546      	cmp	r6, r8
    29fe:	d3f4      	bcc.n	29ea <usart_sync_read+0x32>

	return (int32_t)offset;
}
    2a00:	1c30      	adds	r0, r6, #0
    2a02:	bc04      	pop	{r2}
    2a04:	4690      	mov	r8, r2
    2a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a08:	0000313c 	.word	0x0000313c
    2a0c:	00002d79 	.word	0x00002d79
    2a10:	00001385 	.word	0x00001385
    2a14:	00001371 	.word	0x00001371

00002a18 <usart_sync_init>:
/**
 * \brief Initialize usart interface
 */
int32_t usart_sync_init(struct usart_sync_descriptor *const descr,
		void *const hw)
{
    2a18:	b538      	push	{r3, r4, r5, lr}
    2a1a:	1c04      	adds	r4, r0, #0
    2a1c:	1c0d      	adds	r5, r1, #0
	int32_t init_status;

	ASSERT(descr && hw);
    2a1e:	2800      	cmp	r0, #0
    2a20:	d003      	beq.n	2a2a <usart_sync_init+0x12>
    2a22:	1c08      	adds	r0, r1, #0
    2a24:	1e43      	subs	r3, r0, #1
    2a26:	4198      	sbcs	r0, r3
    2a28:	e000      	b.n	2a2c <usart_sync_init+0x14>
    2a2a:	2000      	movs	r0, #0
    2a2c:	4907      	ldr	r1, [pc, #28]	; (2a4c <usart_sync_init+0x34>)
    2a2e:	2242      	movs	r2, #66	; 0x42
    2a30:	4b07      	ldr	r3, [pc, #28]	; (2a50 <usart_sync_init+0x38>)
    2a32:	4798      	blx	r3

	init_status = _usart_sync_init(&descr->device, hw);
    2a34:	1c20      	adds	r0, r4, #0
    2a36:	3008      	adds	r0, #8
    2a38:	1c29      	adds	r1, r5, #0
    2a3a:	4b06      	ldr	r3, [pc, #24]	; (2a54 <usart_sync_init+0x3c>)
    2a3c:	4798      	blx	r3
	if (init_status) {
    2a3e:	2800      	cmp	r0, #0
    2a40:	d103      	bne.n	2a4a <usart_sync_init+0x32>
		return init_status;
	}

	descr->io.read  = usart_sync_read;
    2a42:	4b05      	ldr	r3, [pc, #20]	; (2a58 <usart_sync_init+0x40>)
    2a44:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_sync_write;
    2a46:	4b05      	ldr	r3, [pc, #20]	; (2a5c <usart_sync_init+0x44>)
    2a48:	6023      	str	r3, [r4, #0]

	return ERR_NONE;
}
    2a4a:	bd38      	pop	{r3, r4, r5, pc}
    2a4c:	0000313c 	.word	0x0000313c
    2a50:	00002d79 	.word	0x00002d79
    2a54:	0000133d 	.word	0x0000133d
    2a58:	000029b9 	.word	0x000029b9
    2a5c:	00002945 	.word	0x00002945

00002a60 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    2a60:	b530      	push	{r4, r5, lr}
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    2a62:	4b0e      	ldr	r3, [pc, #56]	; (2a9c <_usb_d_find_ep+0x3c>)
    2a64:	7859      	ldrb	r1, [r3, #1]
    2a66:	4281      	cmp	r1, r0
    2a68:	d107      	bne.n	2a7a <_usb_d_find_ep+0x1a>
    2a6a:	e004      	b.n	2a76 <_usb_d_find_ep+0x16>
    2a6c:	3220      	adds	r2, #32
    2a6e:	7851      	ldrb	r1, [r2, #1]
    2a70:	4281      	cmp	r1, r0
    2a72:	d106      	bne.n	2a82 <_usb_d_find_ep+0x22>
    2a74:	e00f      	b.n	2a96 <_usb_d_find_ep+0x36>
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2a76:	2300      	movs	r3, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
			return i;
    2a78:	e00d      	b.n	2a96 <_usb_d_find_ep+0x36>
    2a7a:	4a08      	ldr	r2, [pc, #32]	; (2a9c <_usb_d_find_ep+0x3c>)
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    2a7c:	2300      	movs	r3, #0
			return i;
		}

		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL &&
				( ep & USB_EP_N_MASK ) == usb_d_inst.ep[i].xfer.hdr.ep) {
    2a7e:	250f      	movs	r5, #15
    2a80:	4005      	ands	r5, r0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
			return i;
		}

		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL &&
    2a82:	7814      	ldrb	r4, [r2, #0]
    2a84:	2c00      	cmp	r4, #0
    2a86:	d101      	bne.n	2a8c <_usb_d_find_ep+0x2c>
    2a88:	428d      	cmp	r5, r1
    2a8a:	d004      	beq.n	2a96 <_usb_d_find_ep+0x36>
    2a8c:	3301      	adds	r3, #1
    2a8e:	b2db      	uxtb	r3, r3
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2a90:	2b0d      	cmp	r3, #13
    2a92:	d1eb      	bne.n	2a6c <_usb_d_find_ep+0xc>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL &&
				( ep & USB_EP_N_MASK ) == usb_d_inst.ep[i].xfer.hdr.ep) {
			return i;
		}
	}
	return -1;
    2a94:	33f2      	adds	r3, #242	; 0xf2
    2a96:	b258      	sxtb	r0, r3
}
    2a98:	bd30      	pop	{r4, r5, pc}
    2a9a:	46c0      	nop			; (mov r8, r8)
    2a9c:	200003d8 	.word	0x200003d8

00002aa0 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    2aa0:	2000      	movs	r0, #0
    2aa2:	4770      	bx	lr

00002aa4 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    2aa4:	b538      	push	{r3, r4, r5, lr}
    2aa6:	1c04      	adds	r4, r0, #0
    2aa8:	1c0d      	adds	r5, r1, #0
	int8_t ep_index = _usb_d_find_ep(ep);
    2aaa:	4b09      	ldr	r3, [pc, #36]	; (2ad0 <usb_d_cb_trans_more+0x2c>)
    2aac:	4798      	blx	r3
	struct usb_d_ep *ept = &usb_d_inst.ep[ep_index];

	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    2aae:	0143      	lsls	r3, r0, #5
    2ab0:	4a08      	ldr	r2, [pc, #32]	; (2ad4 <usb_d_cb_trans_more+0x30>)
    2ab2:	18d3      	adds	r3, r2, r3
    2ab4:	789a      	ldrb	r2, [r3, #2]
		return ept->callbacks.more(ep, transfered);
	}

	return false;
    2ab6:	2300      	movs	r3, #0
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
	int8_t ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept = &usb_d_inst.ep[ep_index];

	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    2ab8:	2a03      	cmp	r2, #3
    2aba:	d107      	bne.n	2acc <usb_d_cb_trans_more+0x28>
		return ept->callbacks.more(ep, transfered);
    2abc:	0140      	lsls	r0, r0, #5
    2abe:	4b05      	ldr	r3, [pc, #20]	; (2ad4 <usb_d_cb_trans_more+0x30>)
    2ac0:	1818      	adds	r0, r3, r0
    2ac2:	6983      	ldr	r3, [r0, #24]
    2ac4:	1c20      	adds	r0, r4, #0
    2ac6:	1c29      	adds	r1, r5, #0
    2ac8:	4798      	blx	r3
    2aca:	1c03      	adds	r3, r0, #0
	}

	return false;
}
    2acc:	1c18      	adds	r0, r3, #0
    2ace:	bd38      	pop	{r3, r4, r5, pc}
    2ad0:	00002a61 	.word	0x00002a61
    2ad4:	200003d8 	.word	0x200003d8

00002ad8 <_usb_d_cb_trans_done>:
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep,
		const int32_t code,
		const uint32_t transferred)
{
    2ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ada:	b085      	sub	sp, #20
    2adc:	1c05      	adds	r5, r0, #0
    2ade:	1c0f      	adds	r7, r1, #0
    2ae0:	1c16      	adds	r6, r2, #0
	int8_t ep_index = _usb_d_find_ep(ep);
    2ae2:	4b4e      	ldr	r3, [pc, #312]	; (2c1c <_usb_d_cb_trans_done+0x144>)
    2ae4:	4798      	blx	r3
    2ae6:	1c04      	adds	r4, r0, #0
	struct usb_d_ep *ept = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    2ae8:	2f00      	cmp	r7, #0
    2aea:	d152      	bne.n	2b92 <_usb_d_cb_trans_done+0xba>
		ept->xfer.hdr.status = USB_XFER_DONE;
    2aec:	4b4c      	ldr	r3, [pc, #304]	; (2c20 <_usb_d_cb_trans_done+0x148>)
    2aee:	0142      	lsls	r2, r0, #5
    2af0:	1899      	adds	r1, r3, r2
    2af2:	2000      	movs	r0, #0
    2af4:	70c8      	strb	r0, [r1, #3]

		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2af6:	5cd3      	ldrb	r3, [r2, r3]
    2af8:	2b00      	cmp	r3, #0
    2afa:	d144      	bne.n	2b86 <_usb_d_cb_trans_done+0xae>
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
	uint8_t state = ept->xfer.hdr.state;
	bool req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    2afc:	7b0a      	ldrb	r2, [r1, #12]

	if (state == USB_EP_S_X_DATA) {
    2afe:	788b      	ldrb	r3, [r1, #2]
    2b00:	2b03      	cmp	r3, #3
    2b02:	d134      	bne.n	2b6e <_usb_d_cb_trans_done+0x96>
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
	uint8_t state = ept->xfer.hdr.state;
	bool req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    2b04:	09d5      	lsrs	r5, r2, #7

	if (state == USB_EP_S_X_DATA) {
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA,
    2b06:	7848      	ldrb	r0, [r1, #1]
				ept->xfer.req);
    2b08:	1c0a      	adds	r2, r1, #0
    2b0a:	320c      	adds	r2, #12
	uint8_t state = ept->xfer.hdr.state;
	bool req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;

	if (state == USB_EP_S_X_DATA) {
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA,
    2b0c:	69cb      	ldr	r3, [r1, #28]
    2b0e:	2101      	movs	r1, #1
    2b10:	4798      	blx	r3
				ept->xfer.req);

		if (err) {
    2b12:	2800      	cmp	r0, #0
    2b14:	d017      	beq.n	2b46 <_usb_d_cb_trans_done+0x6e>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    2b16:	0163      	lsls	r3, r4, #5
    2b18:	4a41      	ldr	r2, [pc, #260]	; (2c20 <_usb_d_cb_trans_done+0x148>)
    2b1a:	18d3      	adds	r3, r2, r3
    2b1c:	2205      	movs	r2, #5
    2b1e:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    2b20:	3a03      	subs	r2, #3
    2b22:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep :
    2b24:	2d00      	cmp	r5, #0
    2b26:	d004      	beq.n	2b32 <_usb_d_cb_trans_done+0x5a>
    2b28:	0164      	lsls	r4, r4, #5
    2b2a:	4b3d      	ldr	r3, [pc, #244]	; (2c20 <_usb_d_cb_trans_done+0x148>)
    2b2c:	191c      	adds	r4, r3, r4
    2b2e:	7860      	ldrb	r0, [r4, #1]
    2b30:	e005      	b.n	2b3e <_usb_d_cb_trans_done+0x66>
					( ept->xfer.hdr.ep | USB_EP_DIR ), USB_EP_STALL_SET);
    2b32:	0164      	lsls	r4, r4, #5
    2b34:	4b3a      	ldr	r3, [pc, #232]	; (2c20 <_usb_d_cb_trans_done+0x148>)
    2b36:	191c      	adds	r4, r3, r4
				ept->xfer.req);

		if (err) {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
			ept->xfer.hdr.status = USB_XFER_HALT;
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep :
    2b38:	7860      	ldrb	r0, [r4, #1]
    2b3a:	2380      	movs	r3, #128	; 0x80
    2b3c:	4318      	orrs	r0, r3
    2b3e:	2101      	movs	r1, #1
    2b40:	4b38      	ldr	r3, [pc, #224]	; (2c24 <_usb_d_cb_trans_done+0x14c>)
    2b42:	4798      	blx	r3
    2b44:	e067      	b.n	2c16 <_usb_d_cb_trans_done+0x13e>
					( ept->xfer.hdr.ep | USB_EP_DIR ), USB_EP_STALL_SET);
		} else {
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    2b46:	0164      	lsls	r4, r4, #5
    2b48:	4b35      	ldr	r3, [pc, #212]	; (2c20 <_usb_d_cb_trans_done+0x148>)
    2b4a:	191c      	adds	r4, r3, r4
    2b4c:	2304      	movs	r3, #4
    2b4e:	70a3      	strb	r3, [r4, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    2b50:	7863      	ldrb	r3, [r4, #1]
		const bool dir,
		const uint8_t *buf,
		const uint32_t size,
		const uint8_t zlp)
{
	struct usb_d_transfer trans = {
    2b52:	2200      	movs	r2, #0
    2b54:	9201      	str	r2, [sp, #4]
    2b56:	9202      	str	r2, [sp, #8]
    2b58:	2d00      	cmp	r5, #0
    2b5a:	d101      	bne.n	2b60 <_usb_d_cb_trans_done+0x88>
    2b5c:	3280      	adds	r2, #128	; 0x80
    2b5e:	4313      	orrs	r3, r2
    2b60:	a801      	add	r0, sp, #4
    2b62:	7203      	strb	r3, [r0, #8]
    2b64:	2301      	movs	r3, #1
    2b66:	7243      	strb	r3, [r0, #9]
		(uint8_t *)buf, size, dir ? (uint8_t)( ep | USB_EP_DIR ) : (uint8_t)ep,
		zlp
	};

	return _usb_d_dev_ep_trans(&trans);
    2b68:	4b2f      	ldr	r3, [pc, #188]	; (2c28 <_usb_d_cb_trans_done+0x150>)
    2b6a:	4798      	blx	r3
    2b6c:	e053      	b.n	2c16 <_usb_d_cb_trans_done+0x13e>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
		}
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE,
    2b6e:	4a2c      	ldr	r2, [pc, #176]	; (2c20 <_usb_d_cb_trans_done+0x148>)
    2b70:	0164      	lsls	r4, r4, #5
    2b72:	1915      	adds	r5, r2, r4
    2b74:	7868      	ldrb	r0, [r5, #1]
				ept->xfer.req);
    2b76:	1c2a      	adds	r2, r5, #0
    2b78:	320c      	adds	r2, #12
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
		}
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE,
    2b7a:	2100      	movs	r1, #0
    2b7c:	69eb      	ldr	r3, [r5, #28]
    2b7e:	4798      	blx	r3
				ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2b80:	2302      	movs	r3, #2
    2b82:	70ab      	strb	r3, [r5, #2]
    2b84:	e047      	b.n	2c16 <_usb_d_cb_trans_done+0x13e>
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
			usb_d_ctrl_trans_done(ept);
			return;
		}

		ept->xfer.hdr.state = USB_EP_S_IDLE;
    2b86:	0163      	lsls	r3, r4, #5
    2b88:	4a25      	ldr	r2, [pc, #148]	; (2c20 <_usb_d_cb_trans_done+0x148>)
    2b8a:	18d3      	adds	r3, r2, r3
    2b8c:	2201      	movs	r2, #1
    2b8e:	709a      	strb	r2, [r3, #2]
    2b90:	e039      	b.n	2c06 <_usb_d_cb_trans_done+0x12e>
	} else if (code == USB_TRANS_STALL) {
    2b92:	2f01      	cmp	r7, #1
    2b94:	d114      	bne.n	2bc0 <_usb_d_cb_trans_done+0xe8>
		ept->xfer.hdr.status = USB_XFER_HALT;
    2b96:	4b22      	ldr	r3, [pc, #136]	; (2c20 <_usb_d_cb_trans_done+0x148>)
    2b98:	0142      	lsls	r2, r0, #5
    2b9a:	1899      	adds	r1, r3, r2
    2b9c:	2002      	movs	r0, #2
    2b9e:	70c8      	strb	r0, [r1, #3]

		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2ba0:	5cd3      	ldrb	r3, [r2, r3]
    2ba2:	2b00      	cmp	r3, #0
    2ba4:	d106      	bne.n	2bb4 <_usb_d_cb_trans_done+0xdc>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2ba6:	2202      	movs	r2, #2
    2ba8:	708a      	strb	r2, [r1, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2baa:	1c28      	adds	r0, r5, #0
    2bac:	2100      	movs	r1, #0
    2bae:	4b1d      	ldr	r3, [pc, #116]	; (2c24 <_usb_d_cb_trans_done+0x14c>)
    2bb0:	4798      	blx	r3
    2bb2:	e028      	b.n	2c06 <_usb_d_cb_trans_done+0x12e>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    2bb4:	0163      	lsls	r3, r4, #5
    2bb6:	4a1a      	ldr	r2, [pc, #104]	; (2c20 <_usb_d_cb_trans_done+0x148>)
    2bb8:	18d3      	adds	r3, r2, r3
    2bba:	2205      	movs	r2, #5
    2bbc:	709a      	strb	r2, [r3, #2]
    2bbe:	e022      	b.n	2c06 <_usb_d_cb_trans_done+0x12e>
		}
	} else if (code == USB_TRANS_ABORT) {
    2bc0:	2f02      	cmp	r7, #2
    2bc2:	d110      	bne.n	2be6 <_usb_d_cb_trans_done+0x10e>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    2bc4:	4b16      	ldr	r3, [pc, #88]	; (2c20 <_usb_d_cb_trans_done+0x148>)
    2bc6:	0142      	lsls	r2, r0, #5
    2bc8:	1899      	adds	r1, r3, r2
    2bca:	2004      	movs	r0, #4
    2bcc:	70c8      	strb	r0, [r1, #3]

		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2bce:	5cd3      	ldrb	r3, [r2, r3]
    2bd0:	2b00      	cmp	r3, #0
    2bd2:	d102      	bne.n	2bda <_usb_d_cb_trans_done+0x102>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2bd4:	2302      	movs	r3, #2
    2bd6:	708b      	strb	r3, [r1, #2]
			return;
    2bd8:	e01d      	b.n	2c16 <_usb_d_cb_trans_done+0x13e>
		}

		ept->xfer.hdr.state = USB_EP_S_IDLE;
    2bda:	0163      	lsls	r3, r4, #5
    2bdc:	4a10      	ldr	r2, [pc, #64]	; (2c20 <_usb_d_cb_trans_done+0x148>)
    2bde:	18d3      	adds	r3, r2, r3
    2be0:	2201      	movs	r2, #1
    2be2:	709a      	strb	r2, [r3, #2]
    2be4:	e00f      	b.n	2c06 <_usb_d_cb_trans_done+0x12e>
	} else if (code == USB_TRANS_RESET) {
    2be6:	2f03      	cmp	r7, #3
    2be8:	d107      	bne.n	2bfa <_usb_d_cb_trans_done+0x122>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    2bea:	0143      	lsls	r3, r0, #5
    2bec:	4a0c      	ldr	r2, [pc, #48]	; (2c20 <_usb_d_cb_trans_done+0x148>)
    2bee:	18d3      	adds	r3, r2, r3
    2bf0:	2200      	movs	r2, #0
    2bf2:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    2bf4:	3205      	adds	r2, #5
    2bf6:	70da      	strb	r2, [r3, #3]
    2bf8:	e005      	b.n	2c06 <_usb_d_cb_trans_done+0x12e>
	} else {
		ept->xfer.hdr.state = USB_EP_S_ERROR;
    2bfa:	0143      	lsls	r3, r0, #5
    2bfc:	4a08      	ldr	r2, [pc, #32]	; (2c20 <_usb_d_cb_trans_done+0x148>)
    2bfe:	18d3      	adds	r3, r2, r3
    2c00:	2206      	movs	r2, #6
    2c02:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    2c04:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status,
    2c06:	0164      	lsls	r4, r4, #5
    2c08:	4b05      	ldr	r3, [pc, #20]	; (2c20 <_usb_d_cb_trans_done+0x148>)
    2c0a:	191c      	adds	r4, r3, r4
    2c0c:	78e1      	ldrb	r1, [r4, #3]
    2c0e:	69e3      	ldr	r3, [r4, #28]
    2c10:	1c28      	adds	r0, r5, #0
    2c12:	1c32      	adds	r2, r6, #0
    2c14:	4798      	blx	r3
			(void *)transferred);
}
    2c16:	b005      	add	sp, #20
    2c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c1a:	46c0      	nop			; (mov r8, r8)
    2c1c:	00002a61 	.word	0x00002a61
    2c20:	200003d8 	.word	0x200003d8
    2c24:	00002155 	.word	0x00002155
    2c28:	0000231d 	.word	0x0000231d

00002c2c <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    2c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c2e:	4647      	mov	r7, r8
    2c30:	b480      	push	{r7}
    2c32:	1c05      	adds	r5, r0, #0
	int8_t ep_index = _usb_d_find_ep(ep);
    2c34:	4b1d      	ldr	r3, [pc, #116]	; (2cac <usb_d_cb_trans_setup+0x80>)
    2c36:	4798      	blx	r3
    2c38:	1c06      	adds	r6, r0, #0
	struct usb_d_ep *ept = &usb_d_inst.ep[ep_index];
	uint8_t *req = ept->xfer.req;
    2c3a:	0143      	lsls	r3, r0, #5
    2c3c:	4c1c      	ldr	r4, [pc, #112]	; (2cb0 <usb_d_cb_trans_setup+0x84>)
    2c3e:	18e4      	adds	r4, r4, r3
    2c40:	340c      	adds	r4, #12

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    2c42:	1c28      	adds	r0, r5, #0
    2c44:	1c21      	adds	r1, r4, #0
    2c46:	4b1b      	ldr	r3, [pc, #108]	; (2cb4 <usb_d_cb_trans_setup+0x88>)
    2c48:	4798      	blx	r3

	if (n != 8) {
    2c4a:	b2c0      	uxtb	r0, r0
    2c4c:	2808      	cmp	r0, #8
    2c4e:	d008      	beq.n	2c62 <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2c50:	1c28      	adds	r0, r5, #0
    2c52:	2101      	movs	r1, #1
    2c54:	4c18      	ldr	r4, [pc, #96]	; (2cb8 <usb_d_cb_trans_setup+0x8c>)
    2c56:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    2c58:	2080      	movs	r0, #128	; 0x80
    2c5a:	4328      	orrs	r0, r5
    2c5c:	2101      	movs	r1, #1
    2c5e:	47a0      	blx	r4
		return;
    2c60:	e020      	b.n	2ca4 <usb_d_cb_trans_setup+0x78>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2c62:	1c28      	adds	r0, r5, #0
    2c64:	2100      	movs	r1, #0
    2c66:	4b14      	ldr	r3, [pc, #80]	; (2cb8 <usb_d_cb_trans_setup+0x8c>)
    2c68:	4698      	mov	r8, r3
    2c6a:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    2c6c:	2780      	movs	r7, #128	; 0x80
    2c6e:	432f      	orrs	r7, r5
    2c70:	1c38      	adds	r0, r7, #0
    2c72:	2100      	movs	r1, #0
    2c74:	47c0      	blx	r8
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    2c76:	0173      	lsls	r3, r6, #5
    2c78:	4a0d      	ldr	r2, [pc, #52]	; (2cb0 <usb_d_cb_trans_setup+0x84>)
    2c7a:	18d3      	adds	r3, r2, r3
    2c7c:	2201      	movs	r2, #1
    2c7e:	709a      	strb	r2, [r3, #2]

	if (!ept->callbacks.req(ep, req)) {
    2c80:	695b      	ldr	r3, [r3, #20]
    2c82:	1c28      	adds	r0, r5, #0
    2c84:	1c21      	adds	r1, r4, #0
    2c86:	4798      	blx	r3
    2c88:	2800      	cmp	r0, #0
    2c8a:	d10b      	bne.n	2ca4 <usb_d_cb_trans_setup+0x78>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    2c8c:	0176      	lsls	r6, r6, #5
    2c8e:	4b08      	ldr	r3, [pc, #32]	; (2cb0 <usb_d_cb_trans_setup+0x84>)
    2c90:	199e      	adds	r6, r3, r6
    2c92:	2305      	movs	r3, #5
    2c94:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2c96:	1c28      	adds	r0, r5, #0
    2c98:	2101      	movs	r1, #1
    2c9a:	4c07      	ldr	r4, [pc, #28]	; (2cb8 <usb_d_cb_trans_setup+0x8c>)
    2c9c:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    2c9e:	1c38      	adds	r0, r7, #0
    2ca0:	2101      	movs	r1, #1
    2ca2:	47a0      	blx	r4
	}
}
    2ca4:	bc04      	pop	{r2}
    2ca6:	4690      	mov	r8, r2
    2ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2caa:	46c0      	nop			; (mov r8, r8)
    2cac:	00002a61 	.word	0x00002a61
    2cb0:	200003d8 	.word	0x200003d8
    2cb4:	000022b1 	.word	0x000022b1
    2cb8:	00002155 	.word	0x00002155

00002cbc <usb_d_init>:
	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status,
			(void *)transferred);
}

int32_t usb_d_init(void)
{
    2cbc:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    2cbe:	4b14      	ldr	r3, [pc, #80]	; (2d10 <usb_d_init+0x54>)
    2cc0:	4798      	blx	r3
	uint8_t i;

	if (rc < 0) {
    2cc2:	2800      	cmp	r0, #0
    2cc4:	db22      	blt.n	2d0c <usb_d_init+0x50>
		return rc;
	}

	memset(usb_d_inst.ep,
    2cc6:	4c13      	ldr	r4, [pc, #76]	; (2d14 <usb_d_init+0x58>)
    2cc8:	1c20      	adds	r0, r4, #0
    2cca:	2100      	movs	r1, #0
    2ccc:	22d0      	movs	r2, #208	; 0xd0
    2cce:	0052      	lsls	r2, r2, #1
    2cd0:	4b11      	ldr	r3, [pc, #68]	; (2d18 <usb_d_init+0x5c>)
    2cd2:	4798      	blx	r3
    2cd4:	1c63      	adds	r3, r4, #1
    2cd6:	1c20      	adds	r0, r4, #0
    2cd8:	30a2      	adds	r0, #162	; 0xa2
    2cda:	30ff      	adds	r0, #255	; 0xff
			0x00,
			sizeof( struct usb_d_ep ) * CONF_USB_D_NUM_EP_SP);
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep = 0xFF;
    2cdc:	24ff      	movs	r4, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req =
    2cde:	4a0f      	ldr	r2, [pc, #60]	; (2d1c <usb_d_init+0x60>)

	memset(usb_d_inst.ep,
			0x00,
			sizeof( struct usb_d_ep ) * CONF_USB_D_NUM_EP_SP);
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep = 0xFF;
    2ce0:	701c      	strb	r4, [r3, #0]
    2ce2:	1c19      	adds	r1, r3, #0
    2ce4:	3113      	adds	r1, #19
		usb_d_inst.ep[i].callbacks.req =
    2ce6:	600a      	str	r2, [r1, #0]
    2ce8:	3104      	adds	r1, #4
				(usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
		usb_d_inst.ep[i].callbacks.more =
    2cea:	600a      	str	r2, [r1, #0]
    2cec:	3104      	adds	r1, #4
				(usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
		usb_d_inst.ep[i].callbacks.xfer =
    2cee:	600a      	str	r2, [r1, #0]
    2cf0:	3320      	adds	r3, #32
	}

	memset(usb_d_inst.ep,
			0x00,
			sizeof( struct usb_d_ep ) * CONF_USB_D_NUM_EP_SP);
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2cf2:	4283      	cmp	r3, r0
    2cf4:	d1f4      	bne.n	2ce0 <usb_d_init+0x24>
				(usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
		usb_d_inst.ep[i].callbacks.xfer =
				(usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP,
    2cf6:	2000      	movs	r0, #0
    2cf8:	4909      	ldr	r1, [pc, #36]	; (2d20 <usb_d_init+0x64>)
    2cfa:	4c0a      	ldr	r4, [pc, #40]	; (2d24 <usb_d_init+0x68>)
    2cfc:	47a0      	blx	r4
			(const FUNC_PTR)usb_d_cb_trans_setup);
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE,
    2cfe:	2001      	movs	r0, #1
    2d00:	4909      	ldr	r1, [pc, #36]	; (2d28 <usb_d_init+0x6c>)
    2d02:	47a0      	blx	r4
			(const FUNC_PTR)usb_d_cb_trans_more);
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE,
    2d04:	2002      	movs	r0, #2
    2d06:	4909      	ldr	r1, [pc, #36]	; (2d2c <usb_d_init+0x70>)
    2d08:	47a0      	blx	r4
			(const FUNC_PTR)_usb_d_cb_trans_done);
	return ERR_NONE;
    2d0a:	2000      	movs	r0, #0
}
    2d0c:	bd10      	pop	{r4, pc}
    2d0e:	46c0      	nop			; (mov r8, r8)
    2d10:	00002089 	.word	0x00002089
    2d14:	200003d8 	.word	0x200003d8
    2d18:	00002e9f 	.word	0x00002e9f
    2d1c:	00002aa1 	.word	0x00002aa1
    2d20:	00002c2d 	.word	0x00002c2d
    2d24:	000024f1 	.word	0x000024f1
    2d28:	00002aa5 	.word	0x00002aa5
    2d2c:	00002ad9 	.word	0x00002ad9

00002d30 <main>:
#include "atmel_start.h"
#include "atmel_start_pins.h"


int main(void)
{
    2d30:	b538      	push	{r3, r4, r5, lr}
	system_init();
    2d32:	4b0e      	ldr	r3, [pc, #56]	; (2d6c <main+0x3c>)
    2d34:	4798      	blx	r3
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin,
		const enum gpio_direction direction)
{
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(
    2d36:	2000      	movs	r0, #0
    2d38:	2110      	movs	r1, #16
    2d3a:	2202      	movs	r2, #2
    2d3c:	4d0c      	ldr	r5, [pc, #48]	; (2d70 <main+0x40>)
    2d3e:	47a8      	blx	r5
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    2d40:	2000      	movs	r0, #0
    2d42:	2110      	movs	r1, #16
    2d44:	2200      	movs	r2, #0
    2d46:	4c0b      	ldr	r4, [pc, #44]	; (2d74 <main+0x44>)
    2d48:	47a0      	blx	r4
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin,
		const enum gpio_direction direction)
{
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(
    2d4a:	2000      	movs	r0, #0
    2d4c:	2120      	movs	r1, #32
    2d4e:	2202      	movs	r2, #2
    2d50:	47a8      	blx	r5
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    2d52:	2000      	movs	r0, #0
    2d54:	2120      	movs	r1, #32
    2d56:	2200      	movs	r2, #0
    2d58:	47a0      	blx	r4
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin,
		const enum gpio_direction direction)
{
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(
    2d5a:	2000      	movs	r0, #0
    2d5c:	2108      	movs	r1, #8
    2d5e:	2202      	movs	r2, #2
    2d60:	47a8      	blx	r5
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    2d62:	2000      	movs	r0, #0
    2d64:	2108      	movs	r1, #8
    2d66:	2200      	movs	r2, #0
    2d68:	47a0      	blx	r4
	gpio_set_pin_level(PA03,false);
	
	
	/* Replace with your application code */
	while(1) {
	}
    2d6a:	e7fe      	b.n	2d6a <main+0x3a>
    2d6c:	00000589 	.word	0x00000589
    2d70:	000010e5 	.word	0x000010e5
    2d74:	00001189 	.word	0x00001189

00002d78 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    if (!(condition)) {
    2d78:	2800      	cmp	r0, #0
    2d7a:	d100      	bne.n	2d7e <assert+0x6>
        __asm("BKPT #0");
    2d7c:	be00      	bkpt	0x0000
    }
    (void)file;
    (void)line;
}
    2d7e:	4770      	bx	lr

00002d80 <is_list_element>:
 */
bool is_list_element(const struct list_descriptor *const list,
		const void *const element)
{
	struct list_element *it;
	for (it = list->head; it;it = it->next) {
    2d80:	6803      	ldr	r3, [r0, #0]
    2d82:	2b00      	cmp	r3, #0
    2d84:	d009      	beq.n	2d9a <is_list_element+0x1a>
		if (it == element) {
    2d86:	428b      	cmp	r3, r1
    2d88:	d102      	bne.n	2d90 <is_list_element+0x10>
    2d8a:	e008      	b.n	2d9e <is_list_element+0x1e>
    2d8c:	4299      	cmp	r1, r3
    2d8e:	d008      	beq.n	2da2 <is_list_element+0x22>
 */
bool is_list_element(const struct list_descriptor *const list,
		const void *const element)
{
	struct list_element *it;
	for (it = list->head; it;it = it->next) {
    2d90:	681b      	ldr	r3, [r3, #0]
    2d92:	2b00      	cmp	r3, #0
    2d94:	d1fa      	bne.n	2d8c <is_list_element+0xc>
		if (it == element) {
			return true;
		}
	}

	return false;
    2d96:	2000      	movs	r0, #0
    2d98:	e004      	b.n	2da4 <is_list_element+0x24>
    2d9a:	2000      	movs	r0, #0
    2d9c:	e002      	b.n	2da4 <is_list_element+0x24>
		const void *const element)
{
	struct list_element *it;
	for (it = list->head; it;it = it->next) {
		if (it == element) {
			return true;
    2d9e:	2001      	movs	r0, #1
    2da0:	e000      	b.n	2da4 <is_list_element+0x24>
    2da2:	2001      	movs	r0, #1
		}
	}

	return false;
}
    2da4:	4770      	bx	lr
    2da6:	46c0      	nop			; (mov r8, r8)

00002da8 <list_insert_as_head>:
/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list,
		void *const element)
{
    2da8:	b538      	push	{r3, r4, r5, lr}
    2daa:	1c04      	adds	r4, r0, #0
    2dac:	1c0d      	adds	r5, r1, #0
	ASSERT(!is_list_element(list, element));
    2dae:	4b06      	ldr	r3, [pc, #24]	; (2dc8 <list_insert_as_head+0x20>)
    2db0:	4798      	blx	r3
    2db2:	2301      	movs	r3, #1
    2db4:	4058      	eors	r0, r3
    2db6:	b2c0      	uxtb	r0, r0
    2db8:	4904      	ldr	r1, [pc, #16]	; (2dcc <list_insert_as_head+0x24>)
    2dba:	2245      	movs	r2, #69	; 0x45
    2dbc:	4b04      	ldr	r3, [pc, #16]	; (2dd0 <list_insert_as_head+0x28>)
    2dbe:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    2dc0:	6823      	ldr	r3, [r4, #0]
    2dc2:	602b      	str	r3, [r5, #0]
	list->head = (struct list_element *)element;
    2dc4:	6025      	str	r5, [r4, #0]
}
    2dc6:	bd38      	pop	{r3, r4, r5, pc}
    2dc8:	00002d81 	.word	0x00002d81
    2dcc:	00003158 	.word	0x00003158
    2dd0:	00002d79 	.word	0x00002d79

00002dd4 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next =
    2dd4:	6803      	ldr	r3, [r0, #0]
    2dd6:	600b      	str	r3, [r1, #0]
			((struct list_element *)after)->next;
	((struct list_element *)after)->next = (struct list_element *)element;
    2dd8:	6001      	str	r1, [r0, #0]
}
    2dda:	4770      	bx	lr

00002ddc <list_remove_head>:
/**
 * \brief Removes list head
 */
void * list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    2ddc:	6803      	ldr	r3, [r0, #0]
    2dde:	2b00      	cmp	r3, #0
    2de0:	d001      	beq.n	2de6 <list_remove_head+0xa>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    2de2:	681a      	ldr	r2, [r3, #0]
    2de4:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    2de6:	1c18      	adds	r0, r3, #0
    2de8:	4770      	bx	lr
    2dea:	46c0      	nop			; (mov r8, r8)

00002dec <__ffssi2>:
    2dec:	b508      	push	{r3, lr}
    2dee:	2300      	movs	r3, #0
    2df0:	2800      	cmp	r0, #0
    2df2:	d002      	beq.n	2dfa <__ffssi2+0xe>
    2df4:	f000 f804 	bl	2e00 <__ctzsi2>
    2df8:	1c43      	adds	r3, r0, #1
    2dfa:	1c18      	adds	r0, r3, #0
    2dfc:	bd08      	pop	{r3, pc}
    2dfe:	46c0      	nop			; (mov r8, r8)

00002e00 <__ctzsi2>:
    2e00:	4241      	negs	r1, r0
    2e02:	4008      	ands	r0, r1
    2e04:	211c      	movs	r1, #28
    2e06:	2301      	movs	r3, #1
    2e08:	041b      	lsls	r3, r3, #16
    2e0a:	4298      	cmp	r0, r3
    2e0c:	d301      	bcc.n	2e12 <__ctzsi2+0x12>
    2e0e:	0c00      	lsrs	r0, r0, #16
    2e10:	3910      	subs	r1, #16
    2e12:	0a1b      	lsrs	r3, r3, #8
    2e14:	4298      	cmp	r0, r3
    2e16:	d301      	bcc.n	2e1c <__ctzsi2+0x1c>
    2e18:	0a00      	lsrs	r0, r0, #8
    2e1a:	3908      	subs	r1, #8
    2e1c:	091b      	lsrs	r3, r3, #4
    2e1e:	4298      	cmp	r0, r3
    2e20:	d301      	bcc.n	2e26 <__ctzsi2+0x26>
    2e22:	0900      	lsrs	r0, r0, #4
    2e24:	3904      	subs	r1, #4
    2e26:	a202      	add	r2, pc, #8	; (adr r2, 2e30 <__ctzsi2+0x30>)
    2e28:	5c10      	ldrb	r0, [r2, r0]
    2e2a:	1a40      	subs	r0, r0, r1
    2e2c:	4770      	bx	lr
    2e2e:	46c0      	nop			; (mov r8, r8)
    2e30:	1d1d1c1b 	.word	0x1d1d1c1b
    2e34:	1e1e1e1e 	.word	0x1e1e1e1e
    2e38:	1f1f1f1f 	.word	0x1f1f1f1f
    2e3c:	1f1f1f1f 	.word	0x1f1f1f1f

00002e40 <__libc_init_array>:
    2e40:	4b0e      	ldr	r3, [pc, #56]	; (2e7c <__libc_init_array+0x3c>)
    2e42:	b570      	push	{r4, r5, r6, lr}
    2e44:	2500      	movs	r5, #0
    2e46:	1c1e      	adds	r6, r3, #0
    2e48:	4c0d      	ldr	r4, [pc, #52]	; (2e80 <__libc_init_array+0x40>)
    2e4a:	1ae4      	subs	r4, r4, r3
    2e4c:	10a4      	asrs	r4, r4, #2
    2e4e:	42a5      	cmp	r5, r4
    2e50:	d004      	beq.n	2e5c <__libc_init_array+0x1c>
    2e52:	00ab      	lsls	r3, r5, #2
    2e54:	58f3      	ldr	r3, [r6, r3]
    2e56:	4798      	blx	r3
    2e58:	3501      	adds	r5, #1
    2e5a:	e7f8      	b.n	2e4e <__libc_init_array+0xe>
    2e5c:	f000 f98a 	bl	3174 <_init>
    2e60:	4b08      	ldr	r3, [pc, #32]	; (2e84 <__libc_init_array+0x44>)
    2e62:	2500      	movs	r5, #0
    2e64:	1c1e      	adds	r6, r3, #0
    2e66:	4c08      	ldr	r4, [pc, #32]	; (2e88 <__libc_init_array+0x48>)
    2e68:	1ae4      	subs	r4, r4, r3
    2e6a:	10a4      	asrs	r4, r4, #2
    2e6c:	42a5      	cmp	r5, r4
    2e6e:	d004      	beq.n	2e7a <__libc_init_array+0x3a>
    2e70:	00ab      	lsls	r3, r5, #2
    2e72:	58f3      	ldr	r3, [r6, r3]
    2e74:	4798      	blx	r3
    2e76:	3501      	adds	r5, #1
    2e78:	e7f8      	b.n	2e6c <__libc_init_array+0x2c>
    2e7a:	bd70      	pop	{r4, r5, r6, pc}
    2e7c:	00003180 	.word	0x00003180
    2e80:	00003180 	.word	0x00003180
    2e84:	00003180 	.word	0x00003180
    2e88:	00003184 	.word	0x00003184

00002e8c <memcpy>:
    2e8c:	2300      	movs	r3, #0
    2e8e:	b510      	push	{r4, lr}
    2e90:	4293      	cmp	r3, r2
    2e92:	d003      	beq.n	2e9c <memcpy+0x10>
    2e94:	5ccc      	ldrb	r4, [r1, r3]
    2e96:	54c4      	strb	r4, [r0, r3]
    2e98:	3301      	adds	r3, #1
    2e9a:	e7f9      	b.n	2e90 <memcpy+0x4>
    2e9c:	bd10      	pop	{r4, pc}

00002e9e <memset>:
    2e9e:	1c03      	adds	r3, r0, #0
    2ea0:	1882      	adds	r2, r0, r2
    2ea2:	4293      	cmp	r3, r2
    2ea4:	d002      	beq.n	2eac <memset+0xe>
    2ea6:	7019      	strb	r1, [r3, #0]
    2ea8:	3301      	adds	r3, #1
    2eaa:	e7fa      	b.n	2ea2 <memset+0x4>
    2eac:	4770      	bx	lr
    2eae:	0000      	movs	r0, r0
    2eb0:	6c6c6548 	.word	0x6c6c6548
    2eb4:	6f57206f 	.word	0x6f57206f
    2eb8:	21646c72 	.word	0x21646c72
    2ebc:	00000000 	.word	0x00000000
    2ec0:	682f2e2e 	.word	0x682f2e2e
    2ec4:	692f6c61 	.word	0x692f6c61
    2ec8:	756c636e 	.word	0x756c636e
    2ecc:	682f6564 	.word	0x682f6564
    2ed0:	775f6c61 	.word	0x775f6c61
    2ed4:	682e7464 	.word	0x682e7464
    2ed8:	00000000 	.word	0x00000000
    2edc:	682f2e2e 	.word	0x682f2e2e
    2ee0:	682f6c61 	.word	0x682f6c61
    2ee4:	612f6c70 	.word	0x612f6c70
    2ee8:	70682f63 	.word	0x70682f63
    2eec:	63615f6c 	.word	0x63615f6c
    2ef0:	31765f31 	.word	0x31765f31
    2ef4:	625f3131 	.word	0x625f3131
    2ef8:	2e657361 	.word	0x2e657361
    2efc:	00000063 	.word	0x00000063
    2f00:	682f2e2e 	.word	0x682f2e2e
    2f04:	682f6c61 	.word	0x682f6c61
    2f08:	632f6c70 	.word	0x632f6c70
    2f0c:	2f65726f 	.word	0x2f65726f
    2f10:	5f6c7068 	.word	0x5f6c7068
    2f14:	65726f63 	.word	0x65726f63
    2f18:	70306d5f 	.word	0x70306d5f
    2f1c:	5f73756c 	.word	0x5f73756c
    2f20:	65736162 	.word	0x65736162
    2f24:	0000632e 	.word	0x0000632e
    2f28:	682f2e2e 	.word	0x682f2e2e
    2f2c:	682f6c61 	.word	0x682f6c61
    2f30:	642f6c70 	.word	0x642f6c70
    2f34:	682f6361 	.word	0x682f6361
    2f38:	645f6c70 	.word	0x645f6c70
    2f3c:	5f316361 	.word	0x5f316361
    2f40:	30313176 	.word	0x30313176
    2f44:	0000632e 	.word	0x0000632e
    2f48:	682f2e2e 	.word	0x682f2e2e
    2f4c:	682f6c61 	.word	0x682f6c61
    2f50:	642f6c70 	.word	0x642f6c70
    2f54:	682f6361 	.word	0x682f6361
    2f58:	645f6c70 	.word	0x645f6c70
    2f5c:	5f316361 	.word	0x5f316361
    2f60:	31303176 	.word	0x31303176
    2f64:	7361625f 	.word	0x7361625f
    2f68:	6e692e65 	.word	0x6e692e65
    2f6c:	00000063 	.word	0x00000063
    2f70:	682f2e2e 	.word	0x682f2e2e
    2f74:	682f6c61 	.word	0x682f6c61
    2f78:	642f6c70 	.word	0x642f6c70
    2f7c:	2f63616d 	.word	0x2f63616d
    2f80:	5f6c7068 	.word	0x5f6c7068
    2f84:	63616d64 	.word	0x63616d64
    2f88:	3031765f 	.word	0x3031765f
    2f8c:	61625f30 	.word	0x61625f30
    2f90:	632e6573 	.word	0x632e6573
    2f94:	00000000 	.word	0x00000000

00002f98 <_map>:
    2f98:	000000ff ffffffff 682f2e2e 682f6c61     ........../hal/h
    2fa8:	652f6c70 682f6369 655f6c70 5f316369     pl/eic/hpl_eic1_
    2fb8:	31303176 00632e61 682f2e2e 682f6c61     v101a.c.../hal/h
    2fc8:	702f6c70 70682f6d 6d705f6c 32765f31     pl/pm/hpl_pm1_v2
    2fd8:	2e613130 00000063 682f2e2e 682f6c61     01a.c...../hal/h
    2fe8:	702f6c70 2f74726f 5f6c7068 74726f70     pl/port/hpl_port
    2ff8:	3031765f 00632e30                       _v100.c.

00003000 <_i2cms>:
	...

00003014 <sercomspi_regs>:
    3014:	0020000c 00020000 00000000 01ff004f     .. .........O...
    3024:	00000000 682f2e2e 682f6c61 732f6c70     ....../hal/hpl/s
    3034:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
    3044:	3032765f 00632e30                       _v200.c.

0000304c <_tcs>:
    304c:	03680003 00000000 00000000 000003e8     ..h.............
    305c:	00000000 682f2e2e 682f6c61 742f6c70     ....../hal/hpl/t
    306c:	70682f63 63745f6c 31765f31 632e3132     c/hpl_tc1_v121.c
    307c:	20000000 00004a25 00000804              ... %J......

00003088 <_usb_ep_cfgs>:
    3088:	20000378 00000000 00000040 20000338     x.. ....@...8.. 
    3098:	00000000 00000040 200002f8 00000000     ....@...... ....
    30a8:	00000040 682f2e2e 682f6c61 772f6c70     @...../hal/hpl/w
    30b8:	682f7464 775f6c70 5f317464 30303276     dt/hpl_wdt1_v200
    30c8:	7361625f 00632e65 682f2e2e 732f6c61     _base.c.../hal/s
    30d8:	682f6372 615f6c61 79735f63 632e636e     rc/hal_ac_sync.c
    30e8:	00000000 682f2e2e 732f6c61 682f6372     ....../hal/src/h
    30f8:	645f6c61 735f6361 2e636e79 00000063     al_dac_sync.c...
    3108:	682f2e2e 732f6c61 682f6372 735f6c61     ../hal/src/hal_s
    3118:	6d5f6970 6e79735f 00632e63 682f2e2e     pi_m_sync.c.../h
    3128:	732f6c61 682f6372 745f6c61 72656d69     al/src/hal_timer
    3138:	0000632e 682f2e2e 732f6c61 682f6372     .c..../hal/src/h
    3148:	755f6c61 74726173 6e79735f 00632e63     al_usart_sync.c.
    3158:	752f2e2e 736c6974 6372732f 6974752f     ../utils/src/uti
    3168:	6c5f736c 2e747369 00000063              ls_list.c...

00003174 <_init>:
    3174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3176:	46c0      	nop			; (mov r8, r8)
    3178:	bcf8      	pop	{r3, r4, r5, r6, r7}
    317a:	bc08      	pop	{r3}
    317c:	469e      	mov	lr, r3
    317e:	4770      	bx	lr

00003180 <__init_array_start>:
    3180:	000000dd 	.word	0x000000dd

00003184 <_fini>:
    3184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3186:	46c0      	nop			; (mov r8, r8)
    3188:	bcf8      	pop	{r3, r4, r5, r6, r7}
    318a:	bc08      	pop	{r3}
    318c:	469e      	mov	lr, r3
    318e:	4770      	bx	lr

00003190 <__fini_array_start>:
    3190:	000000b5 	.word	0x000000b5
